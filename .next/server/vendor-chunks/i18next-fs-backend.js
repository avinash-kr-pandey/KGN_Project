"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next-fs-backend";
exports.ids = ["vendor-chunks/i18next-fs-backend"];
exports.modules = {

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/extname.js":
/*!********************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/extname.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (filename) {\n  if (filename.indexOf('.') < 0) return undefined;\n  return \".\".concat(filename.split('.').pop());\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9leHRuYW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZ0I7QUFDaEI7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGF6ZS8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWZzLWJhY2tlbmQvZXNtL2V4dG5hbWUuanM/NDk5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGZpbGVuYW1lKSB7XG4gIGlmIChmaWxlbmFtZS5pbmRleE9mKCcuJykgPCAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gXCIuXCIuY29uY2F0KGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCkpO1xufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/extname.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js":
/*!**************************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/formats/json5.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\nvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\nvar unicode = {\n  Space_Separator: Space_Separator,\n  ID_Start: ID_Start,\n  ID_Continue: ID_Continue\n};\nvar util = {\n  isSpaceSeparator: function isSpaceSeparator(c) {\n    return typeof c === 'string' && unicode.Space_Separator.test(c);\n  },\n  isIdStartChar: function isIdStartChar(c) {\n    return typeof c === 'string' && (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '$' || c === '_' || unicode.ID_Start.test(c));\n  },\n  isIdContinueChar: function isIdContinueChar(c) {\n    return typeof c === 'string' && (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '$' || c === '_' || c === \"\\u200C\" || c === \"\\u200D\" || unicode.ID_Continue.test(c));\n  },\n  isDigit: function isDigit(c) {\n    return typeof c === 'string' && /[0-9]/.test(c);\n  },\n  isHexDigit: function isHexDigit(c) {\n    return typeof c === 'string' && /[0-9A-Fa-f]/.test(c);\n  }\n};\nvar source;\nvar parseState;\nvar stack;\nvar pos;\nvar line;\nvar column;\nvar token;\nvar key;\nvar root;\nvar parse = function parse(text, reviver) {\n  source = String(text);\n  parseState = 'start';\n  stack = [];\n  pos = 0;\n  line = 1;\n  column = 0;\n  token = undefined;\n  key = undefined;\n  root = undefined;\n  do {\n    token = lex();\n    parseStates[parseState]();\n  } while (token.type !== 'eof');\n  if (typeof reviver === 'function') {\n    return internalize({\n      '': root\n    }, '', reviver);\n  }\n  return root;\n};\nfunction internalize(holder, name, reviver) {\n  var value = holder[name];\n  if (value != null && _typeof(value) === 'object') {\n    if (Array.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        var _key = String(i);\n        var replacement = internalize(value, _key, reviver);\n        if (replacement === undefined) {\n          delete value[_key];\n        } else {\n          Object.defineProperty(value, _key, {\n            value: replacement,\n            writable: true,\n            enumerable: true,\n            configurable: true\n          });\n        }\n      }\n    } else {\n      for (var _key2 in value) {\n        var _replacement = internalize(value, _key2, reviver);\n        if (_replacement === undefined) {\n          delete value[_key2];\n        } else {\n          Object.defineProperty(value, _key2, {\n            value: _replacement,\n            writable: true,\n            enumerable: true,\n            configurable: true\n          });\n        }\n      }\n    }\n  }\n  return reviver.call(holder, name, value);\n}\nvar lexState;\nvar buffer;\nvar doubleQuote;\nvar _sign;\nvar c;\nfunction lex() {\n  lexState = 'default';\n  buffer = '';\n  doubleQuote = false;\n  _sign = 1;\n  for (;;) {\n    c = peek();\n    var _token = lexStates[lexState]();\n    if (_token) {\n      return _token;\n    }\n  }\n}\nfunction peek() {\n  if (source[pos]) {\n    return String.fromCodePoint(source.codePointAt(pos));\n  }\n}\nfunction read() {\n  var c = peek();\n  if (c === '\\n') {\n    line++;\n    column = 0;\n  } else if (c) {\n    column += c.length;\n  } else {\n    column++;\n  }\n  if (c) {\n    pos += c.length;\n  }\n  return c;\n}\nvar lexStates = {\n  default: function _default() {\n    switch (c) {\n      case '\\t':\n      case '\\v':\n      case '\\f':\n      case ' ':\n      case \"\\xA0\":\n      case \"\\uFEFF\":\n      case '\\n':\n      case '\\r':\n      case \"\\u2028\":\n      case \"\\u2029\":\n        read();\n        return;\n      case '/':\n        read();\n        lexState = 'comment';\n        return;\n      case undefined:\n        read();\n        return newToken('eof');\n    }\n    if (util.isSpaceSeparator(c)) {\n      read();\n      return;\n    }\n    return lexStates[parseState]();\n  },\n  comment: function comment() {\n    switch (c) {\n      case '*':\n        read();\n        lexState = 'multiLineComment';\n        return;\n      case '/':\n        read();\n        lexState = 'singleLineComment';\n        return;\n    }\n    throw invalidChar(read());\n  },\n  multiLineComment: function multiLineComment() {\n    switch (c) {\n      case '*':\n        read();\n        lexState = 'multiLineCommentAsterisk';\n        return;\n      case undefined:\n        throw invalidChar(read());\n    }\n    read();\n  },\n  multiLineCommentAsterisk: function multiLineCommentAsterisk() {\n    switch (c) {\n      case '*':\n        read();\n        return;\n      case '/':\n        read();\n        lexState = 'default';\n        return;\n      case undefined:\n        throw invalidChar(read());\n    }\n    read();\n    lexState = 'multiLineComment';\n  },\n  singleLineComment: function singleLineComment() {\n    switch (c) {\n      case '\\n':\n      case '\\r':\n      case \"\\u2028\":\n      case \"\\u2029\":\n        read();\n        lexState = 'default';\n        return;\n      case undefined:\n        read();\n        return newToken('eof');\n    }\n    read();\n  },\n  value: function value() {\n    switch (c) {\n      case '{':\n      case '[':\n        return newToken('punctuator', read());\n      case 'n':\n        read();\n        literal('ull');\n        return newToken('null', null);\n      case 't':\n        read();\n        literal('rue');\n        return newToken('boolean', true);\n      case 'f':\n        read();\n        literal('alse');\n        return newToken('boolean', false);\n      case '-':\n      case '+':\n        if (read() === '-') {\n          _sign = -1;\n        }\n        lexState = 'sign';\n        return;\n      case '.':\n        buffer = read();\n        lexState = 'decimalPointLeading';\n        return;\n      case '0':\n        buffer = read();\n        lexState = 'zero';\n        return;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        buffer = read();\n        lexState = 'decimalInteger';\n        return;\n      case 'I':\n        read();\n        literal('nfinity');\n        return newToken('numeric', Infinity);\n      case 'N':\n        read();\n        literal('aN');\n        return newToken('numeric', NaN);\n      case '\"':\n      case \"'\":\n        doubleQuote = read() === '\"';\n        buffer = '';\n        lexState = 'string';\n        return;\n    }\n    throw invalidChar(read());\n  },\n  identifierNameStartEscape: function identifierNameStartEscape() {\n    if (c !== 'u') {\n      throw invalidChar(read());\n    }\n    read();\n    var u = unicodeEscape();\n    switch (u) {\n      case '$':\n      case '_':\n        break;\n      default:\n        if (!util.isIdStartChar(u)) {\n          throw invalidIdentifier();\n        }\n        break;\n    }\n    buffer += u;\n    lexState = 'identifierName';\n  },\n  identifierName: function identifierName() {\n    switch (c) {\n      case '$':\n      case '_':\n      case \"\\u200C\":\n      case \"\\u200D\":\n        buffer += read();\n        return;\n      case '\\\\':\n        read();\n        lexState = 'identifierNameEscape';\n        return;\n    }\n    if (util.isIdContinueChar(c)) {\n      buffer += read();\n      return;\n    }\n    return newToken('identifier', buffer);\n  },\n  identifierNameEscape: function identifierNameEscape() {\n    if (c !== 'u') {\n      throw invalidChar(read());\n    }\n    read();\n    var u = unicodeEscape();\n    switch (u) {\n      case '$':\n      case '_':\n      case \"\\u200C\":\n      case \"\\u200D\":\n        break;\n      default:\n        if (!util.isIdContinueChar(u)) {\n          throw invalidIdentifier();\n        }\n        break;\n    }\n    buffer += u;\n    lexState = 'identifierName';\n  },\n  sign: function sign() {\n    switch (c) {\n      case '.':\n        buffer = read();\n        lexState = 'decimalPointLeading';\n        return;\n      case '0':\n        buffer = read();\n        lexState = 'zero';\n        return;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        buffer = read();\n        lexState = 'decimalInteger';\n        return;\n      case 'I':\n        read();\n        literal('nfinity');\n        return newToken('numeric', _sign * Infinity);\n      case 'N':\n        read();\n        literal('aN');\n        return newToken('numeric', NaN);\n    }\n    throw invalidChar(read());\n  },\n  zero: function zero() {\n    switch (c) {\n      case '.':\n        buffer += read();\n        lexState = 'decimalPoint';\n        return;\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n      case 'x':\n      case 'X':\n        buffer += read();\n        lexState = 'hexadecimal';\n        return;\n    }\n    return newToken('numeric', _sign * 0);\n  },\n  decimalInteger: function decimalInteger() {\n    switch (c) {\n      case '.':\n        buffer += read();\n        lexState = 'decimalPoint';\n        return;\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n    return newToken('numeric', _sign * Number(buffer));\n  },\n  decimalPointLeading: function decimalPointLeading() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalFraction';\n      return;\n    }\n    throw invalidChar(read());\n  },\n  decimalPoint: function decimalPoint() {\n    switch (c) {\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalFraction';\n      return;\n    }\n    return newToken('numeric', _sign * Number(buffer));\n  },\n  decimalFraction: function decimalFraction() {\n    switch (c) {\n      case 'e':\n      case 'E':\n        buffer += read();\n        lexState = 'decimalExponent';\n        return;\n    }\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n    return newToken('numeric', _sign * Number(buffer));\n  },\n  decimalExponent: function decimalExponent() {\n    switch (c) {\n      case '+':\n      case '-':\n        buffer += read();\n        lexState = 'decimalExponentSign';\n        return;\n    }\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalExponentInteger';\n      return;\n    }\n    throw invalidChar(read());\n  },\n  decimalExponentSign: function decimalExponentSign() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      lexState = 'decimalExponentInteger';\n      return;\n    }\n    throw invalidChar(read());\n  },\n  decimalExponentInteger: function decimalExponentInteger() {\n    if (util.isDigit(c)) {\n      buffer += read();\n      return;\n    }\n    return newToken('numeric', _sign * Number(buffer));\n  },\n  hexadecimal: function hexadecimal() {\n    if (util.isHexDigit(c)) {\n      buffer += read();\n      lexState = 'hexadecimalInteger';\n      return;\n    }\n    throw invalidChar(read());\n  },\n  hexadecimalInteger: function hexadecimalInteger() {\n    if (util.isHexDigit(c)) {\n      buffer += read();\n      return;\n    }\n    return newToken('numeric', _sign * Number(buffer));\n  },\n  string: function string() {\n    switch (c) {\n      case '\\\\':\n        read();\n        buffer += escape();\n        return;\n      case '\"':\n        if (doubleQuote) {\n          read();\n          return newToken('string', buffer);\n        }\n        buffer += read();\n        return;\n      case \"'\":\n        if (!doubleQuote) {\n          read();\n          return newToken('string', buffer);\n        }\n        buffer += read();\n        return;\n      case '\\n':\n      case '\\r':\n        throw invalidChar(read());\n      case \"\\u2028\":\n      case \"\\u2029\":\n        separatorChar(c);\n        break;\n      case undefined:\n        throw invalidChar(read());\n    }\n    buffer += read();\n  },\n  start: function start() {\n    switch (c) {\n      case '{':\n      case '[':\n        return newToken('punctuator', read());\n    }\n    lexState = 'value';\n  },\n  beforePropertyName: function beforePropertyName() {\n    switch (c) {\n      case '$':\n      case '_':\n        buffer = read();\n        lexState = 'identifierName';\n        return;\n      case '\\\\':\n        read();\n        lexState = 'identifierNameStartEscape';\n        return;\n      case '}':\n        return newToken('punctuator', read());\n      case '\"':\n      case \"'\":\n        doubleQuote = read() === '\"';\n        lexState = 'string';\n        return;\n    }\n    if (util.isIdStartChar(c)) {\n      buffer += read();\n      lexState = 'identifierName';\n      return;\n    }\n    throw invalidChar(read());\n  },\n  afterPropertyName: function afterPropertyName() {\n    if (c === ':') {\n      return newToken('punctuator', read());\n    }\n    throw invalidChar(read());\n  },\n  beforePropertyValue: function beforePropertyValue() {\n    lexState = 'value';\n  },\n  afterPropertyValue: function afterPropertyValue() {\n    switch (c) {\n      case ',':\n      case '}':\n        return newToken('punctuator', read());\n    }\n    throw invalidChar(read());\n  },\n  beforeArrayValue: function beforeArrayValue() {\n    if (c === ']') {\n      return newToken('punctuator', read());\n    }\n    lexState = 'value';\n  },\n  afterArrayValue: function afterArrayValue() {\n    switch (c) {\n      case ',':\n      case ']':\n        return newToken('punctuator', read());\n    }\n    throw invalidChar(read());\n  },\n  end: function end() {\n    throw invalidChar(read());\n  }\n};\nfunction newToken(type, value) {\n  return {\n    type: type,\n    value: value,\n    line: line,\n    column: column\n  };\n}\nfunction literal(s) {\n  var _iterator = _createForOfIteratorHelper(s),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _c = _step.value;\n      var p = peek();\n      if (p !== _c) {\n        throw invalidChar(read());\n      }\n      read();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction escape() {\n  var c = peek();\n  switch (c) {\n    case 'b':\n      read();\n      return '\\b';\n    case 'f':\n      read();\n      return '\\f';\n    case 'n':\n      read();\n      return '\\n';\n    case 'r':\n      read();\n      return '\\r';\n    case 't':\n      read();\n      return '\\t';\n    case 'v':\n      read();\n      return '\\v';\n    case '0':\n      read();\n      if (util.isDigit(peek())) {\n        throw invalidChar(read());\n      }\n      return '\\0';\n    case 'x':\n      read();\n      return hexEscape();\n    case 'u':\n      read();\n      return unicodeEscape();\n    case '\\n':\n    case \"\\u2028\":\n    case \"\\u2029\":\n      read();\n      return '';\n    case '\\r':\n      read();\n      if (peek() === '\\n') {\n        read();\n      }\n      return '';\n    case '1':\n    case '2':\n    case '3':\n    case '4':\n    case '5':\n    case '6':\n    case '7':\n    case '8':\n    case '9':\n      throw invalidChar(read());\n    case undefined:\n      throw invalidChar(read());\n  }\n  return read();\n}\nfunction hexEscape() {\n  var buffer = '';\n  var c = peek();\n  if (!util.isHexDigit(c)) {\n    throw invalidChar(read());\n  }\n  buffer += read();\n  c = peek();\n  if (!util.isHexDigit(c)) {\n    throw invalidChar(read());\n  }\n  buffer += read();\n  return String.fromCodePoint(parseInt(buffer, 16));\n}\nfunction unicodeEscape() {\n  var buffer = '';\n  var count = 4;\n  while (count-- > 0) {\n    var _c2 = peek();\n    if (!util.isHexDigit(_c2)) {\n      throw invalidChar(read());\n    }\n    buffer += read();\n  }\n  return String.fromCodePoint(parseInt(buffer, 16));\n}\nvar parseStates = {\n  start: function start() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n    push();\n  },\n  beforePropertyName: function beforePropertyName() {\n    switch (token.type) {\n      case 'identifier':\n      case 'string':\n        key = token.value;\n        parseState = 'afterPropertyName';\n        return;\n      case 'punctuator':\n        pop();\n        return;\n      case 'eof':\n        throw invalidEOF();\n    }\n  },\n  afterPropertyName: function afterPropertyName() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n    parseState = 'beforePropertyValue';\n  },\n  beforePropertyValue: function beforePropertyValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n    push();\n  },\n  beforeArrayValue: function beforeArrayValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n    if (token.type === 'punctuator' && token.value === ']') {\n      pop();\n      return;\n    }\n    push();\n  },\n  afterPropertyValue: function afterPropertyValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n    switch (token.value) {\n      case ',':\n        parseState = 'beforePropertyName';\n        return;\n      case '}':\n        pop();\n    }\n  },\n  afterArrayValue: function afterArrayValue() {\n    if (token.type === 'eof') {\n      throw invalidEOF();\n    }\n    switch (token.value) {\n      case ',':\n        parseState = 'beforeArrayValue';\n        return;\n      case ']':\n        pop();\n    }\n  },\n  end: function end() {}\n};\nfunction push() {\n  var value;\n  switch (token.type) {\n    case 'punctuator':\n      switch (token.value) {\n        case '{':\n          value = {};\n          break;\n        case '[':\n          value = [];\n          break;\n      }\n      break;\n    case 'null':\n    case 'boolean':\n    case 'numeric':\n    case 'string':\n      value = token.value;\n      break;\n  }\n  if (root === undefined) {\n    root = value;\n  } else {\n    var parent = stack[stack.length - 1];\n    if (Array.isArray(parent)) {\n      parent.push(value);\n    } else {\n      Object.defineProperty(parent, key, {\n        value: value,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      });\n    }\n  }\n  if (value !== null && _typeof(value) === 'object') {\n    stack.push(value);\n    if (Array.isArray(value)) {\n      parseState = 'beforeArrayValue';\n    } else {\n      parseState = 'beforePropertyName';\n    }\n  } else {\n    var current = stack[stack.length - 1];\n    if (current == null) {\n      parseState = 'end';\n    } else if (Array.isArray(current)) {\n      parseState = 'afterArrayValue';\n    } else {\n      parseState = 'afterPropertyValue';\n    }\n  }\n}\nfunction pop() {\n  stack.pop();\n  var current = stack[stack.length - 1];\n  if (current == null) {\n    parseState = 'end';\n  } else if (Array.isArray(current)) {\n    parseState = 'afterArrayValue';\n  } else {\n    parseState = 'afterPropertyValue';\n  }\n}\nfunction invalidChar(c) {\n  if (c === undefined) {\n    return syntaxError(\"JSON5: invalid end of input at \".concat(line, \":\").concat(column));\n  }\n  return syntaxError(\"JSON5: invalid character '\".concat(formatChar(c), \"' at \").concat(line, \":\").concat(column));\n}\nfunction invalidEOF() {\n  return syntaxError(\"JSON5: invalid end of input at \".concat(line, \":\").concat(column));\n}\nfunction invalidIdentifier() {\n  column -= 5;\n  return syntaxError(\"JSON5: invalid identifier character at \".concat(line, \":\").concat(column));\n}\nfunction separatorChar(c) {\n  console.warn(\"JSON5: '\".concat(formatChar(c), \"' in strings is not valid ECMAScript; consider escaping\"));\n}\nfunction formatChar(c) {\n  var replacements = {\n    \"'\": \"\\\\'\",\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',\n    '\\v': '\\\\v',\n    '\\0': '\\\\0',\n    \"\\u2028\": \"\\\\u2028\",\n    \"\\u2029\": \"\\\\u2029\"\n  };\n  if (replacements[c]) {\n    return replacements[c];\n  }\n  if (c < ' ') {\n    var hexString = c.charCodeAt(0).toString(16);\n    return '\\\\x' + ('00' + hexString).substring(hexString.length);\n  }\n  return c;\n}\nfunction syntaxError(message) {\n  var err = new SyntaxError(message);\n  err.lineNumber = line;\n  err.columnNumber = column;\n  return err;\n}\nvar stringify = function stringify(value, replacer, space) {\n  var stack = [];\n  var indent = '';\n  var propertyList;\n  var replacerFunc;\n  var gap = '';\n  var quote;\n  if (replacer != null && _typeof(replacer) === 'object' && !Array.isArray(replacer)) {\n    space = replacer.space;\n    quote = replacer.quote;\n    replacer = replacer.replacer;\n  }\n  if (typeof replacer === 'function') {\n    replacerFunc = replacer;\n  } else if (Array.isArray(replacer)) {\n    propertyList = [];\n    var _iterator2 = _createForOfIteratorHelper(replacer),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var v = _step2.value;\n        var item = void 0;\n        if (typeof v === 'string') {\n          item = v;\n        } else if (typeof v === 'number' || v instanceof String || v instanceof Number) {\n          item = String(v);\n        }\n        if (item !== undefined && propertyList.indexOf(item) < 0) {\n          propertyList.push(item);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  if (space instanceof Number) {\n    space = Number(space);\n  } else if (space instanceof String) {\n    space = String(space);\n  }\n  if (typeof space === 'number') {\n    if (space > 0) {\n      space = Math.min(10, Math.floor(space));\n      gap = '          '.substr(0, space);\n    }\n  } else if (typeof space === 'string') {\n    gap = space.substr(0, 10);\n  }\n  return serializeProperty('', {\n    '': value\n  });\n  function serializeProperty(key, holder) {\n    var value = holder[key];\n    if (value != null) {\n      if (typeof value.toJSON5 === 'function') {\n        value = value.toJSON5(key);\n      } else if (typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n      }\n    }\n    if (replacerFunc) {\n      value = replacerFunc.call(holder, key, value);\n    }\n    if (value instanceof Number) {\n      value = Number(value);\n    } else if (value instanceof String) {\n      value = String(value);\n    } else if (value instanceof Boolean) {\n      value = value.valueOf();\n    }\n    switch (value) {\n      case null:\n        return 'null';\n      case true:\n        return 'true';\n      case false:\n        return 'false';\n    }\n    if (typeof value === 'string') {\n      return quoteString(value, false);\n    }\n    if (typeof value === 'number') {\n      return String(value);\n    }\n    if (_typeof(value) === 'object') {\n      return Array.isArray(value) ? serializeArray(value) : serializeObject(value);\n    }\n    return undefined;\n  }\n  function quoteString(value) {\n    var quotes = {\n      \"'\": 0.1,\n      '\"': 0.2\n    };\n    var replacements = {\n      \"'\": \"\\\\'\",\n      '\"': '\\\\\"',\n      '\\\\': '\\\\\\\\',\n      '\\b': '\\\\b',\n      '\\f': '\\\\f',\n      '\\n': '\\\\n',\n      '\\r': '\\\\r',\n      '\\t': '\\\\t',\n      '\\v': '\\\\v',\n      '\\0': '\\\\0',\n      \"\\u2028\": \"\\\\u2028\",\n      \"\\u2029\": \"\\\\u2029\"\n    };\n    var product = '';\n    for (var i = 0; i < value.length; i++) {\n      var _c3 = value[i];\n      switch (_c3) {\n        case \"'\":\n        case '\"':\n          quotes[_c3]++;\n          product += _c3;\n          continue;\n        case '\\0':\n          if (util.isDigit(value[i + 1])) {\n            product += '\\\\x00';\n            continue;\n          }\n      }\n      if (replacements[_c3]) {\n        product += replacements[_c3];\n        continue;\n      }\n      if (_c3 < ' ') {\n        var hexString = _c3.charCodeAt(0).toString(16);\n        product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n        continue;\n      }\n      product += _c3;\n    }\n    var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) {\n      return quotes[a] < quotes[b] ? a : b;\n    });\n    product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n    return quoteChar + product + quoteChar;\n  }\n  function serializeObject(value) {\n    if (stack.indexOf(value) >= 0) {\n      throw TypeError('Converting circular structure to JSON5');\n    }\n    stack.push(value);\n    var stepback = indent;\n    indent = indent + gap;\n    var keys = propertyList || Object.keys(value);\n    var partial = [];\n    var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _key3 = _step3.value;\n        var propertyString = serializeProperty(_key3, value);\n        if (propertyString !== undefined) {\n          var member = serializeKey(_key3) + ':';\n          if (gap !== '') {\n            member += ' ';\n          }\n          member += propertyString;\n          partial.push(member);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    var final;\n    if (partial.length === 0) {\n      final = '{}';\n    } else {\n      var properties;\n      if (gap === '') {\n        properties = partial.join(',');\n        final = '{' + properties + '}';\n      } else {\n        var separator = ',\\n' + indent;\n        properties = partial.join(separator);\n        final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n      }\n    }\n    stack.pop();\n    indent = stepback;\n    return final;\n  }\n  function serializeKey(key) {\n    if (key.length === 0) {\n      return quoteString(key, true);\n    }\n    var firstChar = String.fromCodePoint(key.codePointAt(0));\n    if (!util.isIdStartChar(firstChar)) {\n      return quoteString(key, true);\n    }\n    for (var i = firstChar.length; i < key.length; i++) {\n      if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n        return quoteString(key, true);\n      }\n    }\n    return key;\n  }\n  function serializeArray(value) {\n    if (stack.indexOf(value) >= 0) {\n      throw TypeError('Converting circular structure to JSON5');\n    }\n    stack.push(value);\n    var stepback = indent;\n    indent = indent + gap;\n    var partial = [];\n    for (var i = 0; i < value.length; i++) {\n      var propertyString = serializeProperty(String(i), value);\n      partial.push(propertyString !== undefined ? propertyString : 'null');\n    }\n    var final;\n    if (partial.length === 0) {\n      final = '[]';\n    } else {\n      if (gap === '') {\n        var properties = partial.join(',');\n        final = '[' + properties + ']';\n      } else {\n        var separator = ',\\n' + indent;\n        var _properties = partial.join(separator);\n        final = '[\\n' + indent + _properties + ',\\n' + stepback + ']';\n      }\n    }\n    stack.pop();\n    indent = stepback;\n    return final;\n  }\n};\nvar JSON5 = {\n  parse: parse,\n  stringify: stringify\n};\nvar lib = JSON5;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lib);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/formats/jsonc.js":
/*!**************************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/formats/jsonc.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParseErrorCode: () => (/* binding */ ParseErrorCode),\n/* harmony export */   ScanError: () => (/* binding */ ScanError),\n/* harmony export */   SyntaxKind: () => (/* binding */ SyntaxKind),\n/* harmony export */   applyEdits: () => (/* binding */ applyEdits),\n/* harmony export */   createScanner: () => (/* binding */ createScanner2),\n/* harmony export */   findNodeAtLocation: () => (/* binding */ findNodeAtLocation2),\n/* harmony export */   findNodeAtOffset: () => (/* binding */ findNodeAtOffset2),\n/* harmony export */   format: () => (/* binding */ format2),\n/* harmony export */   getLocation: () => (/* binding */ getLocation2),\n/* harmony export */   getNodePath: () => (/* binding */ getNodePath2),\n/* harmony export */   getNodeValue: () => (/* binding */ getNodeValue2),\n/* harmony export */   modify: () => (/* binding */ modify),\n/* harmony export */   parse: () => (/* binding */ parse2),\n/* harmony export */   parseTree: () => (/* binding */ parseTree2),\n/* harmony export */   printParseErrorCode: () => (/* binding */ printParseErrorCode),\n/* harmony export */   stripComments: () => (/* binding */ stripComments2),\n/* harmony export */   visit: () => (/* binding */ visit2)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction createScanner(text) {\n  var ignoreTrivia = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var len = text.length;\n  var pos = 0,\n    value = \"\",\n    tokenOffset = 0,\n    token = 16,\n    lineNumber = 0,\n    lineStartOffset = 0,\n    tokenLineStartOffset = 0,\n    prevTokenLineStartOffset = 0,\n    scanError = 0;\n  function scanHexDigits(count, exact) {\n    var digits = 0;\n    var value2 = 0;\n    while (digits < count || !exact) {\n      var ch = text.charCodeAt(pos);\n      if (ch >= 48 && ch <= 57) {\n        value2 = value2 * 16 + ch - 48;\n      } else if (ch >= 65 && ch <= 70) {\n        value2 = value2 * 16 + ch - 65 + 10;\n      } else if (ch >= 97 && ch <= 102) {\n        value2 = value2 * 16 + ch - 97 + 10;\n      } else {\n        break;\n      }\n      pos++;\n      digits++;\n    }\n    if (digits < count) {\n      value2 = -1;\n    }\n    return value2;\n  }\n  function setPosition(newPosition) {\n    pos = newPosition;\n    value = \"\";\n    tokenOffset = 0;\n    token = 16;\n    scanError = 0;\n  }\n  function scanNumber() {\n    var start = pos;\n    if (text.charCodeAt(pos) === 48) {\n      pos++;\n    } else {\n      pos++;\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n    }\n    if (pos < text.length && text.charCodeAt(pos) === 46) {\n      pos++;\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n      } else {\n        scanError = 3;\n        return text.substring(start, pos);\n      }\n    }\n    var end = pos;\n    if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {\n      pos++;\n      if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {\n        pos++;\n      }\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n        end = pos;\n      } else {\n        scanError = 3;\n      }\n    }\n    return text.substring(start, end);\n  }\n  function scanString() {\n    var result = \"\",\n      start = pos;\n    while (true) {\n      if (pos >= len) {\n        result += text.substring(start, pos);\n        scanError = 2;\n        break;\n      }\n      var ch = text.charCodeAt(pos);\n      if (ch === 34) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92) {\n        result += text.substring(start, pos);\n        pos++;\n        if (pos >= len) {\n          scanError = 2;\n          break;\n        }\n        var ch2 = text.charCodeAt(pos++);\n        switch (ch2) {\n          case 34:\n            result += '\"';\n            break;\n          case 92:\n            result += \"\\\\\";\n            break;\n          case 47:\n            result += \"/\";\n            break;\n          case 98:\n            result += \"\\b\";\n            break;\n          case 102:\n            result += \"\\f\";\n            break;\n          case 110:\n            result += \"\\n\";\n            break;\n          case 114:\n            result += \"\\r\";\n            break;\n          case 116:\n            result += \"\t\";\n            break;\n          case 117:\n            var ch3 = scanHexDigits(4, true);\n            if (ch3 >= 0) {\n              result += String.fromCharCode(ch3);\n            } else {\n              scanError = 4;\n            }\n            break;\n          default:\n            scanError = 5;\n        }\n        start = pos;\n        continue;\n      }\n      if (ch >= 0 && ch <= 31) {\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          scanError = 2;\n          break;\n        } else {\n          scanError = 6;\n        }\n      }\n      pos++;\n    }\n    return result;\n  }\n  function scanNext() {\n    value = \"\";\n    scanError = 0;\n    tokenOffset = pos;\n    lineStartOffset = lineNumber;\n    prevTokenLineStartOffset = tokenLineStartOffset;\n    if (pos >= len) {\n      tokenOffset = len;\n      return token = 17;\n    }\n    var code = text.charCodeAt(pos);\n    if (isWhiteSpace(code)) {\n      do {\n        pos++;\n        value += String.fromCharCode(code);\n        code = text.charCodeAt(pos);\n      } while (isWhiteSpace(code));\n      return token = 15;\n    }\n    if (isLineBreak(code)) {\n      pos++;\n      value += String.fromCharCode(code);\n      if (code === 13 && text.charCodeAt(pos) === 10) {\n        pos++;\n        value += \"\\n\";\n      }\n      lineNumber++;\n      tokenLineStartOffset = pos;\n      return token = 14;\n    }\n    switch (code) {\n      case 123:\n        pos++;\n        return token = 1;\n      case 125:\n        pos++;\n        return token = 2;\n      case 91:\n        pos++;\n        return token = 3;\n      case 93:\n        pos++;\n        return token = 4;\n      case 58:\n        pos++;\n        return token = 6;\n      case 44:\n        pos++;\n        return token = 5;\n      case 34:\n        pos++;\n        value = scanString();\n        return token = 10;\n      case 47:\n        var start = pos - 1;\n        if (text.charCodeAt(pos + 1) === 47) {\n          pos += 2;\n          while (pos < len) {\n            if (isLineBreak(text.charCodeAt(pos))) {\n              break;\n            }\n            pos++;\n          }\n          value = text.substring(start, pos);\n          return token = 12;\n        }\n        if (text.charCodeAt(pos + 1) === 42) {\n          pos += 2;\n          var safeLength = len - 1;\n          var commentClosed = false;\n          while (pos < safeLength) {\n            var ch = text.charCodeAt(pos);\n            if (ch === 42 && text.charCodeAt(pos + 1) === 47) {\n              pos += 2;\n              commentClosed = true;\n              break;\n            }\n            pos++;\n            if (isLineBreak(ch)) {\n              if (ch === 13 && text.charCodeAt(pos) === 10) {\n                pos++;\n              }\n              lineNumber++;\n              tokenLineStartOffset = pos;\n            }\n          }\n          if (!commentClosed) {\n            pos++;\n            scanError = 1;\n          }\n          value = text.substring(start, pos);\n          return token = 13;\n        }\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16;\n      case 45:\n        value += String.fromCharCode(code);\n        pos++;\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\n          return token = 16;\n        }\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        value += scanNumber();\n        return token = 11;\n      default:\n        while (pos < len && isUnknownContentCharacter(code)) {\n          pos++;\n          code = text.charCodeAt(pos);\n        }\n        if (tokenOffset !== pos) {\n          value = text.substring(tokenOffset, pos);\n          switch (value) {\n            case \"true\":\n              return token = 8;\n            case \"false\":\n              return token = 9;\n            case \"null\":\n              return token = 7;\n          }\n          return token = 16;\n        }\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16;\n    }\n  }\n  function isUnknownContentCharacter(code) {\n    if (isWhiteSpace(code) || isLineBreak(code)) {\n      return false;\n    }\n    switch (code) {\n      case 125:\n      case 93:\n      case 123:\n      case 91:\n      case 34:\n      case 58:\n      case 44:\n      case 47:\n        return false;\n    }\n    return true;\n  }\n  function scanNextNonTrivia() {\n    var result;\n    do {\n      result = scanNext();\n    } while (result >= 12 && result <= 15);\n    return result;\n  }\n  return {\n    setPosition: setPosition,\n    getPosition: function getPosition() {\n      return pos;\n    },\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n    getToken: function getToken() {\n      return token;\n    },\n    getTokenValue: function getTokenValue() {\n      return value;\n    },\n    getTokenOffset: function getTokenOffset() {\n      return tokenOffset;\n    },\n    getTokenLength: function getTokenLength() {\n      return pos - tokenOffset;\n    },\n    getTokenStartLine: function getTokenStartLine() {\n      return lineStartOffset;\n    },\n    getTokenStartCharacter: function getTokenStartCharacter() {\n      return tokenOffset - prevTokenLineStartOffset;\n    },\n    getTokenError: function getTokenError() {\n      return scanError;\n    }\n  };\n}\nfunction isWhiteSpace(ch) {\n  return ch === 32 || ch === 9;\n}\nfunction isLineBreak(ch) {\n  return ch === 10 || ch === 13;\n}\nfunction isDigit(ch) {\n  return ch >= 48 && ch <= 57;\n}\nvar CharacterCodes;\n(function (CharacterCodes2) {\n  CharacterCodes2[CharacterCodes2[\"lineFeed\"] = 10] = \"lineFeed\";\n  CharacterCodes2[CharacterCodes2[\"carriageReturn\"] = 13] = \"carriageReturn\";\n  CharacterCodes2[CharacterCodes2[\"space\"] = 32] = \"space\";\n  CharacterCodes2[CharacterCodes2[\"_0\"] = 48] = \"_0\";\n  CharacterCodes2[CharacterCodes2[\"_1\"] = 49] = \"_1\";\n  CharacterCodes2[CharacterCodes2[\"_2\"] = 50] = \"_2\";\n  CharacterCodes2[CharacterCodes2[\"_3\"] = 51] = \"_3\";\n  CharacterCodes2[CharacterCodes2[\"_4\"] = 52] = \"_4\";\n  CharacterCodes2[CharacterCodes2[\"_5\"] = 53] = \"_5\";\n  CharacterCodes2[CharacterCodes2[\"_6\"] = 54] = \"_6\";\n  CharacterCodes2[CharacterCodes2[\"_7\"] = 55] = \"_7\";\n  CharacterCodes2[CharacterCodes2[\"_8\"] = 56] = \"_8\";\n  CharacterCodes2[CharacterCodes2[\"_9\"] = 57] = \"_9\";\n  CharacterCodes2[CharacterCodes2[\"a\"] = 97] = \"a\";\n  CharacterCodes2[CharacterCodes2[\"b\"] = 98] = \"b\";\n  CharacterCodes2[CharacterCodes2[\"c\"] = 99] = \"c\";\n  CharacterCodes2[CharacterCodes2[\"d\"] = 100] = \"d\";\n  CharacterCodes2[CharacterCodes2[\"e\"] = 101] = \"e\";\n  CharacterCodes2[CharacterCodes2[\"f\"] = 102] = \"f\";\n  CharacterCodes2[CharacterCodes2[\"g\"] = 103] = \"g\";\n  CharacterCodes2[CharacterCodes2[\"h\"] = 104] = \"h\";\n  CharacterCodes2[CharacterCodes2[\"i\"] = 105] = \"i\";\n  CharacterCodes2[CharacterCodes2[\"j\"] = 106] = \"j\";\n  CharacterCodes2[CharacterCodes2[\"k\"] = 107] = \"k\";\n  CharacterCodes2[CharacterCodes2[\"l\"] = 108] = \"l\";\n  CharacterCodes2[CharacterCodes2[\"m\"] = 109] = \"m\";\n  CharacterCodes2[CharacterCodes2[\"n\"] = 110] = \"n\";\n  CharacterCodes2[CharacterCodes2[\"o\"] = 111] = \"o\";\n  CharacterCodes2[CharacterCodes2[\"p\"] = 112] = \"p\";\n  CharacterCodes2[CharacterCodes2[\"q\"] = 113] = \"q\";\n  CharacterCodes2[CharacterCodes2[\"r\"] = 114] = \"r\";\n  CharacterCodes2[CharacterCodes2[\"s\"] = 115] = \"s\";\n  CharacterCodes2[CharacterCodes2[\"t\"] = 116] = \"t\";\n  CharacterCodes2[CharacterCodes2[\"u\"] = 117] = \"u\";\n  CharacterCodes2[CharacterCodes2[\"v\"] = 118] = \"v\";\n  CharacterCodes2[CharacterCodes2[\"w\"] = 119] = \"w\";\n  CharacterCodes2[CharacterCodes2[\"x\"] = 120] = \"x\";\n  CharacterCodes2[CharacterCodes2[\"y\"] = 121] = \"y\";\n  CharacterCodes2[CharacterCodes2[\"z\"] = 122] = \"z\";\n  CharacterCodes2[CharacterCodes2[\"A\"] = 65] = \"A\";\n  CharacterCodes2[CharacterCodes2[\"B\"] = 66] = \"B\";\n  CharacterCodes2[CharacterCodes2[\"C\"] = 67] = \"C\";\n  CharacterCodes2[CharacterCodes2[\"D\"] = 68] = \"D\";\n  CharacterCodes2[CharacterCodes2[\"E\"] = 69] = \"E\";\n  CharacterCodes2[CharacterCodes2[\"F\"] = 70] = \"F\";\n  CharacterCodes2[CharacterCodes2[\"G\"] = 71] = \"G\";\n  CharacterCodes2[CharacterCodes2[\"H\"] = 72] = \"H\";\n  CharacterCodes2[CharacterCodes2[\"I\"] = 73] = \"I\";\n  CharacterCodes2[CharacterCodes2[\"J\"] = 74] = \"J\";\n  CharacterCodes2[CharacterCodes2[\"K\"] = 75] = \"K\";\n  CharacterCodes2[CharacterCodes2[\"L\"] = 76] = \"L\";\n  CharacterCodes2[CharacterCodes2[\"M\"] = 77] = \"M\";\n  CharacterCodes2[CharacterCodes2[\"N\"] = 78] = \"N\";\n  CharacterCodes2[CharacterCodes2[\"O\"] = 79] = \"O\";\n  CharacterCodes2[CharacterCodes2[\"P\"] = 80] = \"P\";\n  CharacterCodes2[CharacterCodes2[\"Q\"] = 81] = \"Q\";\n  CharacterCodes2[CharacterCodes2[\"R\"] = 82] = \"R\";\n  CharacterCodes2[CharacterCodes2[\"S\"] = 83] = \"S\";\n  CharacterCodes2[CharacterCodes2[\"T\"] = 84] = \"T\";\n  CharacterCodes2[CharacterCodes2[\"U\"] = 85] = \"U\";\n  CharacterCodes2[CharacterCodes2[\"V\"] = 86] = \"V\";\n  CharacterCodes2[CharacterCodes2[\"W\"] = 87] = \"W\";\n  CharacterCodes2[CharacterCodes2[\"X\"] = 88] = \"X\";\n  CharacterCodes2[CharacterCodes2[\"Y\"] = 89] = \"Y\";\n  CharacterCodes2[CharacterCodes2[\"Z\"] = 90] = \"Z\";\n  CharacterCodes2[CharacterCodes2[\"asterisk\"] = 42] = \"asterisk\";\n  CharacterCodes2[CharacterCodes2[\"backslash\"] = 92] = \"backslash\";\n  CharacterCodes2[CharacterCodes2[\"closeBrace\"] = 125] = \"closeBrace\";\n  CharacterCodes2[CharacterCodes2[\"closeBracket\"] = 93] = \"closeBracket\";\n  CharacterCodes2[CharacterCodes2[\"colon\"] = 58] = \"colon\";\n  CharacterCodes2[CharacterCodes2[\"comma\"] = 44] = \"comma\";\n  CharacterCodes2[CharacterCodes2[\"dot\"] = 46] = \"dot\";\n  CharacterCodes2[CharacterCodes2[\"doubleQuote\"] = 34] = \"doubleQuote\";\n  CharacterCodes2[CharacterCodes2[\"minus\"] = 45] = \"minus\";\n  CharacterCodes2[CharacterCodes2[\"openBrace\"] = 123] = \"openBrace\";\n  CharacterCodes2[CharacterCodes2[\"openBracket\"] = 91] = \"openBracket\";\n  CharacterCodes2[CharacterCodes2[\"plus\"] = 43] = \"plus\";\n  CharacterCodes2[CharacterCodes2[\"slash\"] = 47] = \"slash\";\n  CharacterCodes2[CharacterCodes2[\"formFeed\"] = 12] = \"formFeed\";\n  CharacterCodes2[CharacterCodes2[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));\nvar cachedSpaces = new Array(20).fill(0).map(function (_, index) {\n  return \" \".repeat(index);\n});\nvar maxCachedValues = 200;\nvar cachedBreakLinesWithSpaces = {\n  \" \": {\n    \"\\n\": new Array(maxCachedValues).fill(0).map(function (_, index) {\n      return \"\\n\" + \" \".repeat(index);\n    }),\n    \"\\r\": new Array(maxCachedValues).fill(0).map(function (_, index) {\n      return \"\\r\" + \" \".repeat(index);\n    }),\n    \"\\r\\n\": new Array(maxCachedValues).fill(0).map(function (_, index) {\n      return \"\\r\\n\" + \" \".repeat(index);\n    })\n  },\n  \"\t\": {\n    \"\\n\": new Array(maxCachedValues).fill(0).map(function (_, index) {\n      return \"\\n\" + \"\t\".repeat(index);\n    }),\n    \"\\r\": new Array(maxCachedValues).fill(0).map(function (_, index) {\n      return \"\\r\" + \"\t\".repeat(index);\n    }),\n    \"\\r\\n\": new Array(maxCachedValues).fill(0).map(function (_, index) {\n      return \"\\r\\n\" + \"\t\".repeat(index);\n    })\n  }\n};\nvar supportedEols = [\"\\n\", \"\\r\", \"\\r\\n\"];\nfunction format(documentText, range, options) {\n  var initialIndentLevel;\n  var formatText;\n  var formatTextStart;\n  var rangeStart;\n  var rangeEnd;\n  if (range) {\n    rangeStart = range.offset;\n    rangeEnd = rangeStart + range.length;\n    formatTextStart = rangeStart;\n    while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n      formatTextStart--;\n    }\n    var endOffset = rangeEnd;\n    while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n      endOffset++;\n    }\n    formatText = documentText.substring(formatTextStart, endOffset);\n    initialIndentLevel = computeIndentLevel(formatText, options);\n  } else {\n    formatText = documentText;\n    initialIndentLevel = 0;\n    formatTextStart = 0;\n    rangeStart = 0;\n    rangeEnd = documentText.length;\n  }\n  var eol = getEOL(options, documentText);\n  var eolFastPathSupported = supportedEols.includes(eol);\n  var numberLineBreaks = 0;\n  var indentLevel = 0;\n  var indentValue;\n  if (options.insertSpaces) {\n    var _cachedSpaces;\n    indentValue = (_cachedSpaces = cachedSpaces[options.tabSize || 4]) !== null && _cachedSpaces !== void 0 ? _cachedSpaces : repeat(cachedSpaces[1], options.tabSize || 4);\n  } else {\n    indentValue = \"\t\";\n  }\n  var indentType = indentValue === \"\t\" ? \"\t\" : \" \";\n  var scanner = createScanner(formatText, false);\n  var hasError = false;\n  function newLinesAndIndent() {\n    if (numberLineBreaks > 1) {\n      return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    var amountOfSpaces = indentValue.length * (initialIndentLevel + indentLevel);\n    if (!eolFastPathSupported || amountOfSpaces > cachedBreakLinesWithSpaces[indentType][eol].length) {\n      return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    if (amountOfSpaces <= 0) {\n      return eol;\n    }\n    return cachedBreakLinesWithSpaces[indentType][eol][amountOfSpaces];\n  }\n  function scanNext() {\n    var token = scanner.scan();\n    numberLineBreaks = 0;\n    while (token === 15 || token === 14) {\n      if (token === 14 && options.keepLines) {\n        numberLineBreaks += 1;\n      } else if (token === 14) {\n        numberLineBreaks = 1;\n      }\n      token = scanner.scan();\n    }\n    hasError = token === 16 || scanner.getTokenError() !== 0;\n    return token;\n  }\n  var editOperations = [];\n  function addEdit(text, startOffset, endOffset) {\n    if (!hasError && (!range || startOffset < rangeEnd && endOffset > rangeStart) && documentText.substring(startOffset, endOffset) !== text) {\n      editOperations.push({\n        offset: startOffset,\n        length: endOffset - startOffset,\n        content: text\n      });\n    }\n  }\n  var firstToken = scanNext();\n  if (options.keepLines && numberLineBreaks > 0) {\n    addEdit(repeat(eol, numberLineBreaks), 0, 0);\n  }\n  if (firstToken !== 17) {\n    var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n    var initialIndent = indentValue.length * initialIndentLevel < 20 && options.insertSpaces ? cachedSpaces[indentValue.length * initialIndentLevel] : repeat(indentValue, initialIndentLevel);\n    addEdit(initialIndent, formatTextStart, firstTokenStart);\n  }\n  while (firstToken !== 17) {\n    var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n    var secondToken = scanNext();\n    var replaceContent = \"\";\n    var needsLineBreak = false;\n    while (numberLineBreaks === 0 && (secondToken === 12 || secondToken === 13)) {\n      var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n      addEdit(cachedSpaces[1], firstTokenEnd, commentTokenStart);\n      firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n      needsLineBreak = secondToken === 12;\n      replaceContent = needsLineBreak ? newLinesAndIndent() : \"\";\n      secondToken = scanNext();\n    }\n    if (secondToken === 2) {\n      if (firstToken !== 1) {\n        indentLevel--;\n      }\n      ;\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = cachedSpaces[1];\n      }\n    } else if (secondToken === 4) {\n      if (firstToken !== 3) {\n        indentLevel--;\n      }\n      ;\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = cachedSpaces[1];\n      }\n    } else {\n      switch (firstToken) {\n        case 3:\n        case 1:\n          indentLevel++;\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = cachedSpaces[1];\n          }\n          break;\n        case 5:\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = cachedSpaces[1];\n          }\n          break;\n        case 12:\n          replaceContent = newLinesAndIndent();\n          break;\n        case 13:\n          if (numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = cachedSpaces[1];\n          }\n          break;\n        case 6:\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = cachedSpaces[1];\n          }\n          break;\n        case 10:\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (secondToken === 6 && !needsLineBreak) {\n            replaceContent = \"\";\n          }\n          break;\n        case 7:\n        case 8:\n        case 9:\n        case 11:\n        case 2:\n        case 4:\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            if ((secondToken === 12 || secondToken === 13) && !needsLineBreak) {\n              replaceContent = cachedSpaces[1];\n            } else if (secondToken !== 5 && secondToken !== 17) {\n              hasError = true;\n            }\n          }\n          break;\n        case 16:\n          hasError = true;\n          break;\n      }\n      if (numberLineBreaks > 0 && (secondToken === 12 || secondToken === 13)) {\n        replaceContent = newLinesAndIndent();\n      }\n    }\n    if (secondToken === 17) {\n      if (options.keepLines && numberLineBreaks > 0) {\n        replaceContent = newLinesAndIndent();\n      } else {\n        replaceContent = options.insertFinalNewline ? eol : \"\";\n      }\n    }\n    var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n    addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n    firstToken = secondToken;\n  }\n  return editOperations;\n}\nfunction repeat(s, count) {\n  var result = \"\";\n  for (var i = 0; i < count; i++) {\n    result += s;\n  }\n  return result;\n}\nfunction computeIndentLevel(content, options) {\n  var i = 0;\n  var nChars = 0;\n  var tabSize = options.tabSize || 4;\n  while (i < content.length) {\n    var ch = content.charAt(i);\n    if (ch === cachedSpaces[1]) {\n      nChars++;\n    } else if (ch === \"\t\") {\n      nChars += tabSize;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n  for (var i = 0; i < text.length; i++) {\n    var ch = text.charAt(i);\n    if (ch === \"\\r\") {\n      if (i + 1 < text.length && text.charAt(i + 1) === \"\\n\") {\n        return \"\\r\\n\";\n      }\n      return \"\\r\";\n    } else if (ch === \"\\n\") {\n      return \"\\n\";\n    }\n  }\n  return options && options.eol || \"\\n\";\n}\nfunction isEOL(text, offset) {\n  return \"\\r\\n\".indexOf(text.charAt(offset)) !== -1;\n}\nvar ParseOptions;\n(function (ParseOptions2) {\n  ParseOptions2.DEFAULT = {\n    allowTrailingComma: false\n  };\n})(ParseOptions || (ParseOptions = {}));\nfunction getLocation(text, position) {\n  var segments = [];\n  var earlyReturnException = new Object();\n  var previousNode = void 0;\n  var previousNodeInst = {\n    value: {},\n    offset: 0,\n    length: 0,\n    type: \"object\",\n    parent: void 0\n  };\n  var isAtPropertyKey = false;\n  function setPreviousNode(value, offset, length, type) {\n    previousNodeInst.value = value;\n    previousNodeInst.offset = offset;\n    previousNodeInst.length = length;\n    previousNodeInst.type = type;\n    previousNodeInst.colonOffset = void 0;\n    previousNode = previousNodeInst;\n  }\n  try {\n    visit(text, {\n      onObjectBegin: function onObjectBegin(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n        previousNode = void 0;\n        isAtPropertyKey = position > offset;\n        segments.push(\"\");\n      },\n      onObjectProperty: function onObjectProperty(name, offset, length) {\n        if (position < offset) {\n          throw earlyReturnException;\n        }\n        setPreviousNode(name, offset, length, \"property\");\n        segments[segments.length - 1] = name;\n        if (position <= offset + length) {\n          throw earlyReturnException;\n        }\n      },\n      onObjectEnd: function onObjectEnd(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n        previousNode = void 0;\n        segments.pop();\n      },\n      onArrayBegin: function onArrayBegin(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n        previousNode = void 0;\n        segments.push(0);\n      },\n      onArrayEnd: function onArrayEnd(offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n        previousNode = void 0;\n        segments.pop();\n      },\n      onLiteralValue: function onLiteralValue(value, offset, length) {\n        if (position < offset) {\n          throw earlyReturnException;\n        }\n        setPreviousNode(value, offset, length, getNodeType(value));\n        if (position <= offset + length) {\n          throw earlyReturnException;\n        }\n      },\n      onSeparator: function onSeparator(sep, offset, length) {\n        if (position <= offset) {\n          throw earlyReturnException;\n        }\n        if (sep === \":\" && previousNode && previousNode.type === \"property\") {\n          previousNode.colonOffset = offset;\n          isAtPropertyKey = false;\n          previousNode = void 0;\n        } else if (sep === \",\") {\n          var last = segments[segments.length - 1];\n          if (typeof last === \"number\") {\n            segments[segments.length - 1] = last + 1;\n          } else {\n            isAtPropertyKey = true;\n            segments[segments.length - 1] = \"\";\n          }\n          previousNode = void 0;\n        }\n      }\n    });\n  } catch (e) {\n    if (e !== earlyReturnException) {\n      throw e;\n    }\n  }\n  return {\n    path: segments,\n    previousNode: previousNode,\n    isAtPropertyKey: isAtPropertyKey,\n    matches: function matches(pattern) {\n      var k = 0;\n      for (var i = 0; k < pattern.length && i < segments.length; i++) {\n        if (pattern[k] === segments[i] || pattern[k] === \"*\") {\n          k++;\n        } else if (pattern[k] !== \"**\") {\n          return false;\n        }\n      }\n      return k === pattern.length;\n    }\n  };\n}\nfunction parse(text) {\n  var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseOptions.DEFAULT;\n  var currentProperty = null;\n  var currentParent = [];\n  var previousParents = [];\n  function onValue(value) {\n    if (Array.isArray(currentParent)) {\n      currentParent.push(value);\n    } else if (currentProperty !== null) {\n      currentParent[currentProperty] = value;\n    }\n  }\n  var visitor = {\n    onObjectBegin: function onObjectBegin() {\n      var object = {};\n      onValue(object);\n      previousParents.push(currentParent);\n      currentParent = object;\n      currentProperty = null;\n    },\n    onObjectProperty: function onObjectProperty(name) {\n      currentProperty = name;\n    },\n    onObjectEnd: function onObjectEnd() {\n      currentParent = previousParents.pop();\n    },\n    onArrayBegin: function onArrayBegin() {\n      var array = [];\n      onValue(array);\n      previousParents.push(currentParent);\n      currentParent = array;\n      currentProperty = null;\n    },\n    onArrayEnd: function onArrayEnd() {\n      currentParent = previousParents.pop();\n    },\n    onLiteralValue: onValue,\n    onError: function onError(error, offset, length) {\n      errors.push({\n        error: error,\n        offset: offset,\n        length: length\n      });\n    }\n  };\n  visit(text, visitor, options);\n  return currentParent[0];\n}\nfunction parseTree(text) {\n  var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseOptions.DEFAULT;\n  var currentParent = {\n    type: \"array\",\n    offset: -1,\n    length: -1,\n    children: [],\n    parent: void 0\n  };\n  function ensurePropertyComplete(endOffset) {\n    if (currentParent.type === \"property\") {\n      currentParent.length = endOffset - currentParent.offset;\n      currentParent = currentParent.parent;\n    }\n  }\n  function onValue(valueNode) {\n    currentParent.children.push(valueNode);\n    return valueNode;\n  }\n  var visitor = {\n    onObjectBegin: function onObjectBegin(offset) {\n      currentParent = onValue({\n        type: \"object\",\n        offset: offset,\n        length: -1,\n        parent: currentParent,\n        children: []\n      });\n    },\n    onObjectProperty: function onObjectProperty(name, offset, length) {\n      currentParent = onValue({\n        type: \"property\",\n        offset: offset,\n        length: -1,\n        parent: currentParent,\n        children: []\n      });\n      currentParent.children.push({\n        type: \"string\",\n        value: name,\n        offset: offset,\n        length: length,\n        parent: currentParent\n      });\n    },\n    onObjectEnd: function onObjectEnd(offset, length) {\n      ensurePropertyComplete(offset + length);\n      currentParent.length = offset + length - currentParent.offset;\n      currentParent = currentParent.parent;\n      ensurePropertyComplete(offset + length);\n    },\n    onArrayBegin: function onArrayBegin(offset, length) {\n      currentParent = onValue({\n        type: \"array\",\n        offset: offset,\n        length: -1,\n        parent: currentParent,\n        children: []\n      });\n    },\n    onArrayEnd: function onArrayEnd(offset, length) {\n      currentParent.length = offset + length - currentParent.offset;\n      currentParent = currentParent.parent;\n      ensurePropertyComplete(offset + length);\n    },\n    onLiteralValue: function onLiteralValue(value, offset, length) {\n      onValue({\n        type: getNodeType(value),\n        offset: offset,\n        length: length,\n        parent: currentParent,\n        value: value\n      });\n      ensurePropertyComplete(offset + length);\n    },\n    onSeparator: function onSeparator(sep, offset, length) {\n      if (currentParent.type === \"property\") {\n        if (sep === \":\") {\n          currentParent.colonOffset = offset;\n        } else if (sep === \",\") {\n          ensurePropertyComplete(offset);\n        }\n      }\n    },\n    onError: function onError(error, offset, length) {\n      errors.push({\n        error: error,\n        offset: offset,\n        length: length\n      });\n    }\n  };\n  visit(text, visitor, options);\n  var result = currentParent.children[0];\n  if (result) {\n    delete result.parent;\n  }\n  return result;\n}\nfunction findNodeAtLocation(root, path) {\n  if (!root) {\n    return void 0;\n  }\n  var node = root;\n  var _iterator = _createForOfIteratorHelper(path),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var segment = _step.value;\n      if (typeof segment === \"string\") {\n        if (node.type !== \"object\" || !Array.isArray(node.children)) {\n          return void 0;\n        }\n        var found = false;\n        var _iterator2 = _createForOfIteratorHelper(node.children),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var propertyNode = _step2.value;\n            if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment && propertyNode.children.length === 2) {\n              node = propertyNode.children[1];\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        if (!found) {\n          return void 0;\n        }\n      } else {\n        var index = segment;\n        if (node.type !== \"array\" || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n          return void 0;\n        }\n        node = node.children[index];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return node;\n}\nfunction getNodePath(node) {\n  if (!node.parent || !node.parent.children) {\n    return [];\n  }\n  var path = getNodePath(node.parent);\n  if (node.parent.type === \"property\") {\n    var key = node.parent.children[0].value;\n    path.push(key);\n  } else if (node.parent.type === \"array\") {\n    var index = node.parent.children.indexOf(node);\n    if (index !== -1) {\n      path.push(index);\n    }\n  }\n  return path;\n}\nfunction getNodeValue(node) {\n  switch (node.type) {\n    case \"array\":\n      return node.children.map(getNodeValue);\n    case \"object\":\n      var obj = Object.create(null);\n      var _iterator3 = _createForOfIteratorHelper(node.children),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var prop = _step3.value;\n          var valueNode = prop.children[1];\n          if (valueNode) {\n            obj[prop.children[0].value] = getNodeValue(valueNode);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return obj;\n    case \"null\":\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n      return node.value;\n    default:\n      return void 0;\n  }\n}\nfunction contains(node, offset) {\n  var includeRightBound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;\n}\nfunction findNodeAtOffset(node, offset) {\n  var includeRightBound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (contains(node, offset, includeRightBound)) {\n    var children = node.children;\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n        var item = findNodeAtOffset(children[i], offset, includeRightBound);\n        if (item) {\n          return item;\n        }\n      }\n    }\n    return node;\n  }\n  return void 0;\n}\nfunction visit(text, visitor) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseOptions.DEFAULT;\n  var _scanner = createScanner(text, false);\n  var _jsonPath = [];\n  var suppressedCallbacks = 0;\n  function toNoArgVisit(visitFunction) {\n    return visitFunction ? function () {\n      return suppressedCallbacks === 0 && visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());\n    } : function () {\n      return true;\n    };\n  }\n  function toOneArgVisit(visitFunction) {\n    return visitFunction ? function (arg) {\n      return suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());\n    } : function () {\n      return true;\n    };\n  }\n  function toOneArgVisitWithPath(visitFunction) {\n    return visitFunction ? function (arg) {\n      return suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), function () {\n        return _jsonPath.slice();\n      });\n    } : function () {\n      return true;\n    };\n  }\n  function toBeginVisit(visitFunction) {\n    return visitFunction ? function () {\n      if (suppressedCallbacks > 0) {\n        suppressedCallbacks++;\n      } else {\n        var cbReturn = visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), function () {\n          return _jsonPath.slice();\n        });\n        if (cbReturn === false) {\n          suppressedCallbacks = 1;\n        }\n      }\n    } : function () {\n      return true;\n    };\n  }\n  function toEndVisit(visitFunction) {\n    return visitFunction ? function () {\n      if (suppressedCallbacks > 0) {\n        suppressedCallbacks--;\n      }\n      if (suppressedCallbacks === 0) {\n        visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());\n      }\n    } : function () {\n      return true;\n    };\n  }\n  var onObjectBegin = toBeginVisit(visitor.onObjectBegin),\n    onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty),\n    onObjectEnd = toEndVisit(visitor.onObjectEnd),\n    onArrayBegin = toBeginVisit(visitor.onArrayBegin),\n    onArrayEnd = toEndVisit(visitor.onArrayEnd),\n    onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue),\n    onSeparator = toOneArgVisit(visitor.onSeparator),\n    onComment = toNoArgVisit(visitor.onComment),\n    onError = toOneArgVisit(visitor.onError);\n  var disallowComments = options && options.disallowComments;\n  var allowTrailingComma = options && options.allowTrailingComma;\n  function scanNext() {\n    while (true) {\n      var token = _scanner.scan();\n      switch (_scanner.getTokenError()) {\n        case 4:\n          handleError(14);\n          break;\n        case 5:\n          handleError(15);\n          break;\n        case 3:\n          handleError(13);\n          break;\n        case 1:\n          if (!disallowComments) {\n            handleError(11);\n          }\n          break;\n        case 2:\n          handleError(12);\n          break;\n        case 6:\n          handleError(16);\n          break;\n      }\n      switch (token) {\n        case 12:\n        case 13:\n          if (disallowComments) {\n            handleError(10);\n          } else {\n            onComment();\n          }\n          break;\n        case 16:\n          handleError(1);\n          break;\n        case 15:\n        case 14:\n          break;\n        default:\n          return token;\n      }\n    }\n  }\n  function handleError(error) {\n    var skipUntilAfter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var skipUntil = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    onError(error);\n    if (skipUntilAfter.length + skipUntil.length > 0) {\n      var token = _scanner.getToken();\n      while (token !== 17) {\n        if (skipUntilAfter.indexOf(token) !== -1) {\n          scanNext();\n          break;\n        } else if (skipUntil.indexOf(token) !== -1) {\n          break;\n        }\n        token = scanNext();\n      }\n    }\n  }\n  function parseString(isValue) {\n    var value = _scanner.getTokenValue();\n    if (isValue) {\n      onLiteralValue(value);\n    } else {\n      onObjectProperty(value);\n      _jsonPath.push(value);\n    }\n    scanNext();\n    return true;\n  }\n  function parseLiteral() {\n    switch (_scanner.getToken()) {\n      case 11:\n        var tokenValue = _scanner.getTokenValue();\n        var value = Number(tokenValue);\n        if (isNaN(value)) {\n          handleError(2);\n          value = 0;\n        }\n        onLiteralValue(value);\n        break;\n      case 7:\n        onLiteralValue(null);\n        break;\n      case 8:\n        onLiteralValue(true);\n        break;\n      case 9:\n        onLiteralValue(false);\n        break;\n      default:\n        return false;\n    }\n    scanNext();\n    return true;\n  }\n  function parseProperty() {\n    if (_scanner.getToken() !== 10) {\n      handleError(3, [], [2, 5]);\n      return false;\n    }\n    parseString(false);\n    if (_scanner.getToken() === 6) {\n      onSeparator(\":\");\n      scanNext();\n      if (!parseValue()) {\n        handleError(4, [], [2, 5]);\n      }\n    } else {\n      handleError(5, [], [2, 5]);\n    }\n    _jsonPath.pop();\n    return true;\n  }\n  function parseObject() {\n    onObjectBegin();\n    scanNext();\n    var needsComma = false;\n    while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {\n      if (_scanner.getToken() === 5) {\n        if (!needsComma) {\n          handleError(4, [], []);\n        }\n        onSeparator(\",\");\n        scanNext();\n        if (_scanner.getToken() === 2 && allowTrailingComma) {\n          break;\n        }\n      } else if (needsComma) {\n        handleError(6, [], []);\n      }\n      if (!parseProperty()) {\n        handleError(4, [], [2, 5]);\n      }\n      needsComma = true;\n    }\n    onObjectEnd();\n    if (_scanner.getToken() !== 2) {\n      handleError(7, [2], []);\n    } else {\n      scanNext();\n    }\n    return true;\n  }\n  function parseArray() {\n    onArrayBegin();\n    scanNext();\n    var isFirstElement = true;\n    var needsComma = false;\n    while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {\n      if (_scanner.getToken() === 5) {\n        if (!needsComma) {\n          handleError(4, [], []);\n        }\n        onSeparator(\",\");\n        scanNext();\n        if (_scanner.getToken() === 4 && allowTrailingComma) {\n          break;\n        }\n      } else if (needsComma) {\n        handleError(6, [], []);\n      }\n      if (isFirstElement) {\n        _jsonPath.push(0);\n        isFirstElement = false;\n      } else {\n        _jsonPath[_jsonPath.length - 1]++;\n      }\n      if (!parseValue()) {\n        handleError(4, [], [4, 5]);\n      }\n      needsComma = true;\n    }\n    onArrayEnd();\n    if (!isFirstElement) {\n      _jsonPath.pop();\n    }\n    if (_scanner.getToken() !== 4) {\n      handleError(8, [4], []);\n    } else {\n      scanNext();\n    }\n    return true;\n  }\n  function parseValue() {\n    switch (_scanner.getToken()) {\n      case 3:\n        return parseArray();\n      case 1:\n        return parseObject();\n      case 10:\n        return parseString(true);\n      default:\n        return parseLiteral();\n    }\n  }\n  scanNext();\n  if (_scanner.getToken() === 17) {\n    if (options.allowEmptyContent) {\n      return true;\n    }\n    handleError(4, [], []);\n    return false;\n  }\n  if (!parseValue()) {\n    handleError(4, [], []);\n    return false;\n  }\n  if (_scanner.getToken() !== 17) {\n    handleError(9, [], []);\n  }\n  return true;\n}\nfunction stripComments(text, replaceCh) {\n  var _scanner = createScanner(text),\n    parts = [],\n    kind,\n    offset = 0,\n    pos;\n  do {\n    pos = _scanner.getPosition();\n    kind = _scanner.scan();\n    switch (kind) {\n      case 12:\n      case 13:\n      case 17:\n        if (offset !== pos) {\n          parts.push(text.substring(offset, pos));\n        }\n        if (replaceCh !== void 0) {\n          parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n        }\n        offset = _scanner.getPosition();\n        break;\n    }\n  } while (kind !== 17);\n  return parts.join(\"\");\n}\nfunction getNodeType(value) {\n  switch (_typeof(value)) {\n    case \"boolean\":\n      return \"boolean\";\n    case \"number\":\n      return \"number\";\n    case \"string\":\n      return \"string\";\n    case \"object\":\n      {\n        if (!value) {\n          return \"null\";\n        } else if (Array.isArray(value)) {\n          return \"array\";\n        }\n        return \"object\";\n      }\n    default:\n      return \"null\";\n  }\n}\nfunction setProperty(text, originalPath, value, options) {\n  var path = originalPath.slice();\n  var errors = [];\n  var root = parseTree(text, errors);\n  var parent = void 0;\n  var lastSegment = void 0;\n  while (path.length > 0) {\n    lastSegment = path.pop();\n    parent = findNodeAtLocation(root, path);\n    if (parent === void 0 && value !== void 0) {\n      if (typeof lastSegment === \"string\") {\n        value = _defineProperty({}, lastSegment, value);\n      } else {\n        value = [value];\n      }\n    } else {\n      break;\n    }\n  }\n  if (!parent) {\n    if (value === void 0) {\n      throw new Error(\"Can not delete in empty document\");\n    }\n    return withFormatting(text, {\n      offset: root ? root.offset : 0,\n      length: root ? root.length : 0,\n      content: JSON.stringify(value)\n    }, options);\n  } else if (parent.type === \"object\" && typeof lastSegment === \"string\" && Array.isArray(parent.children)) {\n    var existing = findNodeAtLocation(parent, [lastSegment]);\n    if (existing !== void 0) {\n      if (value === void 0) {\n        if (!existing.parent) {\n          throw new Error(\"Malformed AST\");\n        }\n        var propertyIndex = parent.children.indexOf(existing.parent);\n        var removeBegin;\n        var removeEnd = existing.parent.offset + existing.parent.length;\n        if (propertyIndex > 0) {\n          var previous = parent.children[propertyIndex - 1];\n          removeBegin = previous.offset + previous.length;\n        } else {\n          removeBegin = parent.offset + 1;\n          if (parent.children.length > 1) {\n            var next = parent.children[1];\n            removeEnd = next.offset;\n          }\n        }\n        return withFormatting(text, {\n          offset: removeBegin,\n          length: removeEnd - removeBegin,\n          content: \"\"\n        }, options);\n      } else {\n        return withFormatting(text, {\n          offset: existing.offset,\n          length: existing.length,\n          content: JSON.stringify(value)\n        }, options);\n      }\n    } else {\n      if (value === void 0) {\n        return [];\n      }\n      var newProperty = \"\".concat(JSON.stringify(lastSegment), \": \").concat(JSON.stringify(value));\n      var index = options.getInsertionIndex ? options.getInsertionIndex(parent.children.map(function (p) {\n        return p.children[0].value;\n      })) : parent.children.length;\n      var edit;\n      if (index > 0) {\n        var _previous = parent.children[index - 1];\n        edit = {\n          offset: _previous.offset + _previous.length,\n          length: 0,\n          content: \",\" + newProperty\n        };\n      } else if (parent.children.length === 0) {\n        edit = {\n          offset: parent.offset + 1,\n          length: 0,\n          content: newProperty\n        };\n      } else {\n        edit = {\n          offset: parent.offset + 1,\n          length: 0,\n          content: newProperty + \",\"\n        };\n      }\n      return withFormatting(text, edit, options);\n    }\n  } else if (parent.type === \"array\" && typeof lastSegment === \"number\" && Array.isArray(parent.children)) {\n    var insertIndex = lastSegment;\n    if (insertIndex === -1) {\n      var _newProperty = \"\".concat(JSON.stringify(value));\n      var _edit;\n      if (parent.children.length === 0) {\n        _edit = {\n          offset: parent.offset + 1,\n          length: 0,\n          content: _newProperty\n        };\n      } else {\n        var _previous2 = parent.children[parent.children.length - 1];\n        _edit = {\n          offset: _previous2.offset + _previous2.length,\n          length: 0,\n          content: \",\" + _newProperty\n        };\n      }\n      return withFormatting(text, _edit, options);\n    } else if (value === void 0 && parent.children.length >= 0) {\n      var removalIndex = lastSegment;\n      var toRemove = parent.children[removalIndex];\n      var _edit2;\n      if (parent.children.length === 1) {\n        _edit2 = {\n          offset: parent.offset + 1,\n          length: parent.length - 2,\n          content: \"\"\n        };\n      } else if (parent.children.length - 1 === removalIndex) {\n        var _previous3 = parent.children[removalIndex - 1];\n        var offset = _previous3.offset + _previous3.length;\n        var parentEndOffset = parent.offset + parent.length;\n        _edit2 = {\n          offset: offset,\n          length: parentEndOffset - 2 - offset,\n          content: \"\"\n        };\n      } else {\n        _edit2 = {\n          offset: toRemove.offset,\n          length: parent.children[removalIndex + 1].offset - toRemove.offset,\n          content: \"\"\n        };\n      }\n      return withFormatting(text, _edit2, options);\n    } else if (value !== void 0) {\n      var _edit3;\n      var _newProperty2 = \"\".concat(JSON.stringify(value));\n      if (!options.isArrayInsertion && parent.children.length > lastSegment) {\n        var toModify = parent.children[lastSegment];\n        _edit3 = {\n          offset: toModify.offset,\n          length: toModify.length,\n          content: _newProperty2\n        };\n      } else if (parent.children.length === 0 || lastSegment === 0) {\n        _edit3 = {\n          offset: parent.offset + 1,\n          length: 0,\n          content: parent.children.length === 0 ? _newProperty2 : _newProperty2 + \",\"\n        };\n      } else {\n        var _index = lastSegment > parent.children.length ? parent.children.length : lastSegment;\n        var _previous4 = parent.children[_index - 1];\n        _edit3 = {\n          offset: _previous4.offset + _previous4.length,\n          length: 0,\n          content: \",\" + _newProperty2\n        };\n      }\n      return withFormatting(text, _edit3, options);\n    } else {\n      throw new Error(\"Can not \".concat(value === void 0 ? \"remove\" : options.isArrayInsertion ? \"insert\" : \"modify\", \" Array index \").concat(insertIndex, \" as length is not sufficient\"));\n    }\n  } else {\n    throw new Error(\"Can not add \".concat(typeof lastSegment !== \"number\" ? \"index\" : \"property\", \" to parent of type \").concat(parent.type));\n  }\n}\nfunction withFormatting(text, edit, options) {\n  if (!options.formattingOptions) {\n    return [edit];\n  }\n  var newText = applyEdit(text, edit);\n  var begin = edit.offset;\n  var end = edit.offset + edit.content.length;\n  if (edit.length === 0 || edit.content.length === 0) {\n    while (begin > 0 && !isEOL(newText, begin - 1)) {\n      begin--;\n    }\n    while (end < newText.length && !isEOL(newText, end)) {\n      end++;\n    }\n  }\n  var edits = format(newText, {\n    offset: begin,\n    length: end - begin\n  }, _objectSpread(_objectSpread({}, options.formattingOptions), {}, {\n    keepLines: false\n  }));\n  for (var i = edits.length - 1; i >= 0; i--) {\n    var edit2 = edits[i];\n    newText = applyEdit(newText, edit2);\n    begin = Math.min(begin, edit2.offset);\n    end = Math.max(end, edit2.offset + edit2.length);\n    end += edit2.content.length - edit2.length;\n  }\n  var editLength = text.length - (newText.length - end) - begin;\n  return [{\n    offset: begin,\n    length: editLength,\n    content: newText.substring(begin, end)\n  }];\n}\nfunction applyEdit(text, edit) {\n  return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nvar createScanner2 = createScanner;\nvar ScanError;\n(function (ScanError2) {\n  ScanError2[ScanError2[\"None\"] = 0] = \"None\";\n  ScanError2[ScanError2[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\n  ScanError2[ScanError2[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\n  ScanError2[ScanError2[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\n  ScanError2[ScanError2[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\n  ScanError2[ScanError2[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\n  ScanError2[ScanError2[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\n})(ScanError || (ScanError = {}));\nvar SyntaxKind;\n(function (SyntaxKind2) {\n  SyntaxKind2[SyntaxKind2[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\n  SyntaxKind2[SyntaxKind2[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\n  SyntaxKind2[SyntaxKind2[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\n  SyntaxKind2[SyntaxKind2[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\n  SyntaxKind2[SyntaxKind2[\"CommaToken\"] = 5] = \"CommaToken\";\n  SyntaxKind2[SyntaxKind2[\"ColonToken\"] = 6] = \"ColonToken\";\n  SyntaxKind2[SyntaxKind2[\"NullKeyword\"] = 7] = \"NullKeyword\";\n  SyntaxKind2[SyntaxKind2[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\n  SyntaxKind2[SyntaxKind2[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\n  SyntaxKind2[SyntaxKind2[\"StringLiteral\"] = 10] = \"StringLiteral\";\n  SyntaxKind2[SyntaxKind2[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\n  SyntaxKind2[SyntaxKind2[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\n  SyntaxKind2[SyntaxKind2[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\n  SyntaxKind2[SyntaxKind2[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\n  SyntaxKind2[SyntaxKind2[\"Trivia\"] = 15] = \"Trivia\";\n  SyntaxKind2[SyntaxKind2[\"Unknown\"] = 16] = \"Unknown\";\n  SyntaxKind2[SyntaxKind2[\"EOF\"] = 17] = \"EOF\";\n})(SyntaxKind || (SyntaxKind = {}));\nvar getLocation2 = getLocation;\nvar parse2 = parse;\nvar parseTree2 = parseTree;\nvar findNodeAtLocation2 = findNodeAtLocation;\nvar findNodeAtOffset2 = findNodeAtOffset;\nvar getNodePath2 = getNodePath;\nvar getNodeValue2 = getNodeValue;\nvar visit2 = visit;\nvar stripComments2 = stripComments;\nvar ParseErrorCode;\n(function (ParseErrorCode2) {\n  ParseErrorCode2[ParseErrorCode2[\"InvalidSymbol\"] = 1] = \"InvalidSymbol\";\n  ParseErrorCode2[ParseErrorCode2[\"InvalidNumberFormat\"] = 2] = \"InvalidNumberFormat\";\n  ParseErrorCode2[ParseErrorCode2[\"PropertyNameExpected\"] = 3] = \"PropertyNameExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"ValueExpected\"] = 4] = \"ValueExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"ColonExpected\"] = 5] = \"ColonExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"CommaExpected\"] = 6] = \"CommaExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"CloseBraceExpected\"] = 7] = \"CloseBraceExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"CloseBracketExpected\"] = 8] = \"CloseBracketExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"EndOfFileExpected\"] = 9] = \"EndOfFileExpected\";\n  ParseErrorCode2[ParseErrorCode2[\"InvalidCommentToken\"] = 10] = \"InvalidCommentToken\";\n  ParseErrorCode2[ParseErrorCode2[\"UnexpectedEndOfComment\"] = 11] = \"UnexpectedEndOfComment\";\n  ParseErrorCode2[ParseErrorCode2[\"UnexpectedEndOfString\"] = 12] = \"UnexpectedEndOfString\";\n  ParseErrorCode2[ParseErrorCode2[\"UnexpectedEndOfNumber\"] = 13] = \"UnexpectedEndOfNumber\";\n  ParseErrorCode2[ParseErrorCode2[\"InvalidUnicode\"] = 14] = \"InvalidUnicode\";\n  ParseErrorCode2[ParseErrorCode2[\"InvalidEscapeCharacter\"] = 15] = \"InvalidEscapeCharacter\";\n  ParseErrorCode2[ParseErrorCode2[\"InvalidCharacter\"] = 16] = \"InvalidCharacter\";\n})(ParseErrorCode || (ParseErrorCode = {}));\nfunction printParseErrorCode(code) {\n  switch (code) {\n    case 1:\n      return \"InvalidSymbol\";\n    case 2:\n      return \"InvalidNumberFormat\";\n    case 3:\n      return \"PropertyNameExpected\";\n    case 4:\n      return \"ValueExpected\";\n    case 5:\n      return \"ColonExpected\";\n    case 6:\n      return \"CommaExpected\";\n    case 7:\n      return \"CloseBraceExpected\";\n    case 8:\n      return \"CloseBracketExpected\";\n    case 9:\n      return \"EndOfFileExpected\";\n    case 10:\n      return \"InvalidCommentToken\";\n    case 11:\n      return \"UnexpectedEndOfComment\";\n    case 12:\n      return \"UnexpectedEndOfString\";\n    case 13:\n      return \"UnexpectedEndOfNumber\";\n    case 14:\n      return \"InvalidUnicode\";\n    case 15:\n      return \"InvalidEscapeCharacter\";\n    case 16:\n      return \"InvalidCharacter\";\n  }\n  return \"<unknown ParseErrorCode>\";\n}\nfunction format2(documentText, range, options) {\n  return format(documentText, range, options);\n}\nfunction modify(text, path, value, options) {\n  return setProperty(text, path, value, options);\n}\nfunction applyEdits(text, edits) {\n  var sortedEdits = edits.slice(0).sort(function (a, b) {\n    var diff = a.offset - b.offset;\n    if (diff === 0) {\n      return a.length - b.length;\n    }\n    return diff;\n  });\n  var lastModifiedOffset = text.length;\n  for (var i = sortedEdits.length - 1; i >= 0; i--) {\n    var e = sortedEdits[i];\n    if (e.offset + e.length <= lastModifiedOffset) {\n      text = applyEdit(text, e);\n    } else {\n      throw new Error(\"Overlapping edit\");\n    }\n    lastModifiedOffset = e.offset;\n  }\n  return text;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9mb3JtYXRzL2pzb25jLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUJBQXlCLHdCQUF3QixvQ0FBb0MseUNBQXlDLGtDQUFrQywwREFBMEQsMEJBQTBCO0FBQ3BQLDRCQUE0QixnQkFBZ0Isc0JBQXNCLE9BQU8sa0RBQWtELHNEQUFzRCw4QkFBOEIsbUpBQW1KLHFFQUFxRSxLQUFLO0FBQzVhLG9DQUFvQyxvRUFBb0UsMERBQTBEO0FBQ2xLLDZCQUE2QixtQ0FBbUM7QUFDaEUsOEJBQThCLDRDQUE0QywrQkFBK0Isb0JBQW9CLG1DQUFtQyxzQ0FBc0MsdUVBQXVFO0FBQzdRLHNCQUFzQiwyQkFBMkIsb0dBQW9HLG1CQUFtQixpQkFBaUIsc0hBQXNIO0FBQy9TLDRDQUE0QywrRUFBK0UsVUFBVSx5R0FBeUcsY0FBYyxpQ0FBaUMsU0FBUyx3QkFBd0IsMEJBQTBCLFdBQVcsSUFBSSw2QkFBNkIscUJBQXFCLFVBQVUsWUFBWSxnS0FBZ0ssdUJBQXVCLFNBQVMsa0JBQWtCLGdCQUFnQixvQkFBb0Isa0JBQWtCLHVCQUF1QixxQkFBcUIsZ0JBQWdCLG9CQUFvQixNQUFNLHVDQUF1QyxVQUFVO0FBQzl6Qiw2Q0FBNkMsU0FBUywwREFBMEQsVUFBVSxnQ0FBZ0M7QUFDMUosbUNBQW1DLCtDQUErQyw4QkFBOEIsT0FBTyxrQkFBa0I7QUFDekk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDekM7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDJDQUEyQztBQUNqRTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnQ0FBZ0M7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0NBQWdDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQXFEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsZ0NBQWdDLGdDQUFnQztBQUNuRTtBQUNBLEdBQUc7QUFDSCxpQ0FBaUMsUUFBUTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2xhemUvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9mb3JtYXRzL2pzb25jLmpzPzYxZWUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSwgciwgdCkgeyByZXR1cm4gKHIgPSBfdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7IHZhbHVlOiB0LCBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwIH0pIDogZVtyXSA9IHQsIGU7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyLCBlKSB7IHZhciB0ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKCF0KSB7IGlmIChBcnJheS5pc0FycmF5KHIpIHx8ICh0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpKSB8fCBlICYmIHIgJiYgXCJudW1iZXJcIiA9PSB0eXBlb2Ygci5sZW5ndGgpIHsgdCAmJiAociA9IHQpOyB2YXIgX24gPSAwLCBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyByZXR1cm4gX24gPj0gci5sZW5ndGggPyB7IGRvbmU6ICEwIH0gOiB7IGRvbmU6ICExLCB2YWx1ZTogcltfbisrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKHIpIHsgdGhyb3cgcjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbywgYSA9ICEwLCB1ID0gITE7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IHQgPSB0LmNhbGwocik7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciByID0gdC5uZXh0KCk7IHJldHVybiBhID0gci5kb25lLCByOyB9LCBlOiBmdW5jdGlvbiBlKHIpIHsgdSA9ICEwLCBvID0gcjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgYSB8fCBudWxsID09IHQucmV0dXJuIHx8IHQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmICh1KSB0aHJvdyBvOyB9IH0gfTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgOiB2b2lkIDA7IH0gfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgeyAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7IGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdOyByZXR1cm4gbjsgfVxuZnVuY3Rpb24gY3JlYXRlU2Nhbm5lcih0ZXh0KSB7XG4gIHZhciBpZ25vcmVUcml2aWEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICB2YXIgbGVuID0gdGV4dC5sZW5ndGg7XG4gIHZhciBwb3MgPSAwLFxuICAgIHZhbHVlID0gXCJcIixcbiAgICB0b2tlbk9mZnNldCA9IDAsXG4gICAgdG9rZW4gPSAxNixcbiAgICBsaW5lTnVtYmVyID0gMCxcbiAgICBsaW5lU3RhcnRPZmZzZXQgPSAwLFxuICAgIHRva2VuTGluZVN0YXJ0T2Zmc2V0ID0gMCxcbiAgICBwcmV2VG9rZW5MaW5lU3RhcnRPZmZzZXQgPSAwLFxuICAgIHNjYW5FcnJvciA9IDA7XG4gIGZ1bmN0aW9uIHNjYW5IZXhEaWdpdHMoY291bnQsIGV4YWN0KSB7XG4gICAgdmFyIGRpZ2l0cyA9IDA7XG4gICAgdmFyIHZhbHVlMiA9IDA7XG4gICAgd2hpbGUgKGRpZ2l0cyA8IGNvdW50IHx8ICFleGFjdCkge1xuICAgICAgdmFyIGNoID0gdGV4dC5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICBpZiAoY2ggPj0gNDggJiYgY2ggPD0gNTcpIHtcbiAgICAgICAgdmFsdWUyID0gdmFsdWUyICogMTYgKyBjaCAtIDQ4O1xuICAgICAgfSBlbHNlIGlmIChjaCA+PSA2NSAmJiBjaCA8PSA3MCkge1xuICAgICAgICB2YWx1ZTIgPSB2YWx1ZTIgKiAxNiArIGNoIC0gNjUgKyAxMDtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPj0gOTcgJiYgY2ggPD0gMTAyKSB7XG4gICAgICAgIHZhbHVlMiA9IHZhbHVlMiAqIDE2ICsgY2ggLSA5NyArIDEwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwb3MrKztcbiAgICAgIGRpZ2l0cysrO1xuICAgIH1cbiAgICBpZiAoZGlnaXRzIDwgY291bnQpIHtcbiAgICAgIHZhbHVlMiA9IC0xO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUyO1xuICB9XG4gIGZ1bmN0aW9uIHNldFBvc2l0aW9uKG5ld1Bvc2l0aW9uKSB7XG4gICAgcG9zID0gbmV3UG9zaXRpb247XG4gICAgdmFsdWUgPSBcIlwiO1xuICAgIHRva2VuT2Zmc2V0ID0gMDtcbiAgICB0b2tlbiA9IDE2O1xuICAgIHNjYW5FcnJvciA9IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2Nhbk51bWJlcigpIHtcbiAgICB2YXIgc3RhcnQgPSBwb3M7XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChwb3MpID09PSA0OCkge1xuICAgICAgcG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvcysrO1xuICAgICAgd2hpbGUgKHBvcyA8IHRleHQubGVuZ3RoICYmIGlzRGlnaXQodGV4dC5jaGFyQ29kZUF0KHBvcykpKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocG9zIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDQ2KSB7XG4gICAgICBwb3MrKztcbiAgICAgIGlmIChwb3MgPCB0ZXh0Lmxlbmd0aCAmJiBpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChwb3MpKSkge1xuICAgICAgICBwb3MrKztcbiAgICAgICAgd2hpbGUgKHBvcyA8IHRleHQubGVuZ3RoICYmIGlzRGlnaXQodGV4dC5jaGFyQ29kZUF0KHBvcykpKSB7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYW5FcnJvciA9IDM7XG4gICAgICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyhzdGFydCwgcG9zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGVuZCA9IHBvcztcbiAgICBpZiAocG9zIDwgdGV4dC5sZW5ndGggJiYgKHRleHQuY2hhckNvZGVBdChwb3MpID09PSA2OSB8fCB0ZXh0LmNoYXJDb2RlQXQocG9zKSA9PT0gMTAxKSkge1xuICAgICAgcG9zKys7XG4gICAgICBpZiAocG9zIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDQzIHx8IHRleHQuY2hhckNvZGVBdChwb3MpID09PSA0NSkge1xuICAgICAgICBwb3MrKztcbiAgICAgIH1cbiAgICAgIGlmIChwb3MgPCB0ZXh0Lmxlbmd0aCAmJiBpc0RpZ2l0KHRleHQuY2hhckNvZGVBdChwb3MpKSkge1xuICAgICAgICBwb3MrKztcbiAgICAgICAgd2hpbGUgKHBvcyA8IHRleHQubGVuZ3RoICYmIGlzRGlnaXQodGV4dC5jaGFyQ29kZUF0KHBvcykpKSB7XG4gICAgICAgICAgcG9zKys7XG4gICAgICAgIH1cbiAgICAgICAgZW5kID0gcG9zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NhbkVycm9yID0gMztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICB9XG4gIGZ1bmN0aW9uIHNjYW5TdHJpbmcoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBzdGFydCA9IHBvcztcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKHBvcyA+PSBsZW4pIHtcbiAgICAgICAgcmVzdWx0ICs9IHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBwb3MpO1xuICAgICAgICBzY2FuRXJyb3IgPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhciBjaCA9IHRleHQuY2hhckNvZGVBdChwb3MpO1xuICAgICAgaWYgKGNoID09PSAzNCkge1xuICAgICAgICByZXN1bHQgKz0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgIHBvcysrO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChjaCA9PT0gOTIpIHtcbiAgICAgICAgcmVzdWx0ICs9IHRleHQuc3Vic3RyaW5nKHN0YXJ0LCBwb3MpO1xuICAgICAgICBwb3MrKztcbiAgICAgICAgaWYgKHBvcyA+PSBsZW4pIHtcbiAgICAgICAgICBzY2FuRXJyb3IgPSAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaDIgPSB0ZXh0LmNoYXJDb2RlQXQocG9zKyspO1xuICAgICAgICBzd2l0Y2ggKGNoMikge1xuICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1wiJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgOTI6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXFxcXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgcmVzdWx0ICs9IFwiL1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIlxcYlwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXGZcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTEwOlxuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFxuXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDExNDpcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIlxcclwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMTY6XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcdFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMTc6XG4gICAgICAgICAgICB2YXIgY2gzID0gc2NhbkhleERpZ2l0cyg0LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChjaDMgPj0gMCkge1xuICAgICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaDMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NhbkVycm9yID0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzY2FuRXJyb3IgPSA1O1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ID0gcG9zO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaCA+PSAwICYmIGNoIDw9IDMxKSB7XG4gICAgICAgIGlmIChpc0xpbmVCcmVhayhjaCkpIHtcbiAgICAgICAgICByZXN1bHQgKz0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgc2NhbkVycm9yID0gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FuRXJyb3IgPSA2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3MrKztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiBzY2FuTmV4dCgpIHtcbiAgICB2YWx1ZSA9IFwiXCI7XG4gICAgc2NhbkVycm9yID0gMDtcbiAgICB0b2tlbk9mZnNldCA9IHBvcztcbiAgICBsaW5lU3RhcnRPZmZzZXQgPSBsaW5lTnVtYmVyO1xuICAgIHByZXZUb2tlbkxpbmVTdGFydE9mZnNldCA9IHRva2VuTGluZVN0YXJ0T2Zmc2V0O1xuICAgIGlmIChwb3MgPj0gbGVuKSB7XG4gICAgICB0b2tlbk9mZnNldCA9IGxlbjtcbiAgICAgIHJldHVybiB0b2tlbiA9IDE3O1xuICAgIH1cbiAgICB2YXIgY29kZSA9IHRleHQuY2hhckNvZGVBdChwb3MpO1xuICAgIGlmIChpc1doaXRlU3BhY2UoY29kZSkpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgIGNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgIH0gd2hpbGUgKGlzV2hpdGVTcGFjZShjb2RlKSk7XG4gICAgICByZXR1cm4gdG9rZW4gPSAxNTtcbiAgICB9XG4gICAgaWYgKGlzTGluZUJyZWFrKGNvZGUpKSB7XG4gICAgICBwb3MrKztcbiAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICBpZiAoY29kZSA9PT0gMTMgJiYgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDEwKSB7XG4gICAgICAgIHBvcysrO1xuICAgICAgICB2YWx1ZSArPSBcIlxcblwiO1xuICAgICAgfVxuICAgICAgbGluZU51bWJlcisrO1xuICAgICAgdG9rZW5MaW5lU3RhcnRPZmZzZXQgPSBwb3M7XG4gICAgICByZXR1cm4gdG9rZW4gPSAxNDtcbiAgICB9XG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIDEyMzpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDE7XG4gICAgICBjYXNlIDEyNTpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDI7XG4gICAgICBjYXNlIDkxOlxuICAgICAgICBwb3MrKztcbiAgICAgICAgcmV0dXJuIHRva2VuID0gMztcbiAgICAgIGNhc2UgOTM6XG4gICAgICAgIHBvcysrO1xuICAgICAgICByZXR1cm4gdG9rZW4gPSA0O1xuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDY7XG4gICAgICBjYXNlIDQ0OlxuICAgICAgICBwb3MrKztcbiAgICAgICAgcmV0dXJuIHRva2VuID0gNTtcbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIHBvcysrO1xuICAgICAgICB2YWx1ZSA9IHNjYW5TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRva2VuID0gMTA7XG4gICAgICBjYXNlIDQ3OlxuICAgICAgICB2YXIgc3RhcnQgPSBwb3MgLSAxO1xuICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KHBvcyArIDEpID09PSA0Nykge1xuICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChpc0xpbmVCcmVhayh0ZXh0LmNoYXJDb2RlQXQocG9zKSkpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWUgPSB0ZXh0LnN1YnN0cmluZyhzdGFydCwgcG9zKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW4gPSAxMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KHBvcyArIDEpID09PSA0Mikge1xuICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgIHZhciBzYWZlTGVuZ3RoID0gbGVuIC0gMTtcbiAgICAgICAgICB2YXIgY29tbWVudENsb3NlZCA9IGZhbHNlO1xuICAgICAgICAgIHdoaWxlIChwb3MgPCBzYWZlTGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gNDIgJiYgdGV4dC5jaGFyQ29kZUF0KHBvcyArIDEpID09PSA0Nykge1xuICAgICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICAgICAgY29tbWVudENsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICBpZiAoaXNMaW5lQnJlYWsoY2gpKSB7XG4gICAgICAgICAgICAgIGlmIChjaCA9PT0gMTMgJiYgdGV4dC5jaGFyQ29kZUF0KHBvcykgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGluZU51bWJlcisrO1xuICAgICAgICAgICAgICB0b2tlbkxpbmVTdGFydE9mZnNldCA9IHBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb21tZW50Q2xvc2VkKSB7XG4gICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIHNjYW5FcnJvciA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gdGV4dC5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuID0gMTM7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDE2O1xuICAgICAgY2FzZSA0NTpcbiAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIGlmIChwb3MgPT09IGxlbiB8fCAhaXNEaWdpdCh0ZXh0LmNoYXJDb2RlQXQocG9zKSkpIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW4gPSAxNjtcbiAgICAgICAgfVxuICAgICAgY2FzZSA0ODpcbiAgICAgIGNhc2UgNDk6XG4gICAgICBjYXNlIDUwOlxuICAgICAgY2FzZSA1MTpcbiAgICAgIGNhc2UgNTI6XG4gICAgICBjYXNlIDUzOlxuICAgICAgY2FzZSA1NDpcbiAgICAgIGNhc2UgNTU6XG4gICAgICBjYXNlIDU2OlxuICAgICAgY2FzZSA1NzpcbiAgICAgICAgdmFsdWUgKz0gc2Nhbk51bWJlcigpO1xuICAgICAgICByZXR1cm4gdG9rZW4gPSAxMTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHdoaWxlIChwb3MgPCBsZW4gJiYgaXNVbmtub3duQ29udGVudENoYXJhY3Rlcihjb2RlKSkge1xuICAgICAgICAgIHBvcysrO1xuICAgICAgICAgIGNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5PZmZzZXQgIT09IHBvcykge1xuICAgICAgICAgIHZhbHVlID0gdGV4dC5zdWJzdHJpbmcodG9rZW5PZmZzZXQsIHBvcyk7XG4gICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInRydWVcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRva2VuID0gODtcbiAgICAgICAgICAgIGNhc2UgXCJmYWxzZVwiOlxuICAgICAgICAgICAgICByZXR1cm4gdG9rZW4gPSA5O1xuICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRva2VuID0gNztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRva2VuID0gMTY7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgcG9zKys7XG4gICAgICAgIHJldHVybiB0b2tlbiA9IDE2O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpc1Vua25vd25Db250ZW50Q2hhcmFjdGVyKGNvZGUpIHtcbiAgICBpZiAoaXNXaGl0ZVNwYWNlKGNvZGUpIHx8IGlzTGluZUJyZWFrKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSAxMjU6XG4gICAgICBjYXNlIDkzOlxuICAgICAgY2FzZSAxMjM6XG4gICAgICBjYXNlIDkxOlxuICAgICAgY2FzZSAzNDpcbiAgICAgIGNhc2UgNTg6XG4gICAgICBjYXNlIDQ0OlxuICAgICAgY2FzZSA0NzpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBzY2FuTmV4dE5vblRyaXZpYSgpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGRvIHtcbiAgICAgIHJlc3VsdCA9IHNjYW5OZXh0KCk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID49IDEyICYmIHJlc3VsdCA8PSAxNSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNldFBvc2l0aW9uOiBzZXRQb3NpdGlvbixcbiAgICBnZXRQb3NpdGlvbjogZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7XG4gICAgICByZXR1cm4gcG9zO1xuICAgIH0sXG4gICAgc2NhbjogaWdub3JlVHJpdmlhID8gc2Nhbk5leHROb25Ucml2aWEgOiBzY2FuTmV4dCxcbiAgICBnZXRUb2tlbjogZnVuY3Rpb24gZ2V0VG9rZW4oKSB7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSxcbiAgICBnZXRUb2tlblZhbHVlOiBmdW5jdGlvbiBnZXRUb2tlblZhbHVlKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0VG9rZW5PZmZzZXQ6IGZ1bmN0aW9uIGdldFRva2VuT2Zmc2V0KCkge1xuICAgICAgcmV0dXJuIHRva2VuT2Zmc2V0O1xuICAgIH0sXG4gICAgZ2V0VG9rZW5MZW5ndGg6IGZ1bmN0aW9uIGdldFRva2VuTGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHBvcyAtIHRva2VuT2Zmc2V0O1xuICAgIH0sXG4gICAgZ2V0VG9rZW5TdGFydExpbmU6IGZ1bmN0aW9uIGdldFRva2VuU3RhcnRMaW5lKCkge1xuICAgICAgcmV0dXJuIGxpbmVTdGFydE9mZnNldDtcbiAgICB9LFxuICAgIGdldFRva2VuU3RhcnRDaGFyYWN0ZXI6IGZ1bmN0aW9uIGdldFRva2VuU3RhcnRDaGFyYWN0ZXIoKSB7XG4gICAgICByZXR1cm4gdG9rZW5PZmZzZXQgLSBwcmV2VG9rZW5MaW5lU3RhcnRPZmZzZXQ7XG4gICAgfSxcbiAgICBnZXRUb2tlbkVycm9yOiBmdW5jdGlvbiBnZXRUb2tlbkVycm9yKCkge1xuICAgICAgcmV0dXJuIHNjYW5FcnJvcjtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpc1doaXRlU3BhY2UoY2gpIHtcbiAgcmV0dXJuIGNoID09PSAzMiB8fCBjaCA9PT0gOTtcbn1cbmZ1bmN0aW9uIGlzTGluZUJyZWFrKGNoKSB7XG4gIHJldHVybiBjaCA9PT0gMTAgfHwgY2ggPT09IDEzO1xufVxuZnVuY3Rpb24gaXNEaWdpdChjaCkge1xuICByZXR1cm4gY2ggPj0gNDggJiYgY2ggPD0gNTc7XG59XG52YXIgQ2hhcmFjdGVyQ29kZXM7XG4oZnVuY3Rpb24gKENoYXJhY3RlckNvZGVzMikge1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wibGluZUZlZWRcIl0gPSAxMF0gPSBcImxpbmVGZWVkXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjYXJyaWFnZVJldHVyblwiXSA9IDEzXSA9IFwiY2FycmlhZ2VSZXR1cm5cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInNwYWNlXCJdID0gMzJdID0gXCJzcGFjZVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzBcIl0gPSA0OF0gPSBcIl8wXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJfMVwiXSA9IDQ5XSA9IFwiXzFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIl8yXCJdID0gNTBdID0gXCJfMlwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzNcIl0gPSA1MV0gPSBcIl8zXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJfNFwiXSA9IDUyXSA9IFwiXzRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIl81XCJdID0gNTNdID0gXCJfNVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzZcIl0gPSA1NF0gPSBcIl82XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJfN1wiXSA9IDU1XSA9IFwiXzdcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIl84XCJdID0gNTZdID0gXCJfOFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiXzlcIl0gPSA1N10gPSBcIl85XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJhXCJdID0gOTddID0gXCJhXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJiXCJdID0gOThdID0gXCJiXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjXCJdID0gOTldID0gXCJjXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJkXCJdID0gMTAwXSA9IFwiZFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiZVwiXSA9IDEwMV0gPSBcImVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImZcIl0gPSAxMDJdID0gXCJmXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJnXCJdID0gMTAzXSA9IFwiZ1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiaFwiXSA9IDEwNF0gPSBcImhcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImlcIl0gPSAxMDVdID0gXCJpXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJqXCJdID0gMTA2XSA9IFwialwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wia1wiXSA9IDEwN10gPSBcImtcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImxcIl0gPSAxMDhdID0gXCJsXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJtXCJdID0gMTA5XSA9IFwibVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiblwiXSA9IDExMF0gPSBcIm5cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIm9cIl0gPSAxMTFdID0gXCJvXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJwXCJdID0gMTEyXSA9IFwicFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wicVwiXSA9IDExM10gPSBcInFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInJcIl0gPSAxMTRdID0gXCJyXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJzXCJdID0gMTE1XSA9IFwic1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1widFwiXSA9IDExNl0gPSBcInRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInVcIl0gPSAxMTddID0gXCJ1XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJ2XCJdID0gMTE4XSA9IFwidlwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wid1wiXSA9IDExOV0gPSBcIndcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInhcIl0gPSAxMjBdID0gXCJ4XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJ5XCJdID0gMTIxXSA9IFwieVwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wielwiXSA9IDEyMl0gPSBcInpcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkFcIl0gPSA2NV0gPSBcIkFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkJcIl0gPSA2Nl0gPSBcIkJcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkNcIl0gPSA2N10gPSBcIkNcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkRcIl0gPSA2OF0gPSBcIkRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkVcIl0gPSA2OV0gPSBcIkVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkZcIl0gPSA3MF0gPSBcIkZcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkdcIl0gPSA3MV0gPSBcIkdcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkhcIl0gPSA3Ml0gPSBcIkhcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIklcIl0gPSA3M10gPSBcIklcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkpcIl0gPSA3NF0gPSBcIkpcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIktcIl0gPSA3NV0gPSBcIktcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIkxcIl0gPSA3Nl0gPSBcIkxcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIk1cIl0gPSA3N10gPSBcIk1cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIk5cIl0gPSA3OF0gPSBcIk5cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIk9cIl0gPSA3OV0gPSBcIk9cIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlBcIl0gPSA4MF0gPSBcIlBcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlFcIl0gPSA4MV0gPSBcIlFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlJcIl0gPSA4Ml0gPSBcIlJcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlNcIl0gPSA4M10gPSBcIlNcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlRcIl0gPSA4NF0gPSBcIlRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlVcIl0gPSA4NV0gPSBcIlVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlZcIl0gPSA4Nl0gPSBcIlZcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIldcIl0gPSA4N10gPSBcIldcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlhcIl0gPSA4OF0gPSBcIlhcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIllcIl0gPSA4OV0gPSBcIllcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIlpcIl0gPSA5MF0gPSBcIlpcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImFzdGVyaXNrXCJdID0gNDJdID0gXCJhc3Rlcmlza1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiYmFja3NsYXNoXCJdID0gOTJdID0gXCJiYWNrc2xhc2hcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImNsb3NlQnJhY2VcIl0gPSAxMjVdID0gXCJjbG9zZUJyYWNlXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjbG9zZUJyYWNrZXRcIl0gPSA5M10gPSBcImNsb3NlQnJhY2tldFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiY29sb25cIl0gPSA1OF0gPSBcImNvbG9uXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJjb21tYVwiXSA9IDQ0XSA9IFwiY29tbWFcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcImRvdFwiXSA9IDQ2XSA9IFwiZG90XCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJkb3VibGVRdW90ZVwiXSA9IDM0XSA9IFwiZG91YmxlUXVvdGVcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcIm1pbnVzXCJdID0gNDVdID0gXCJtaW51c1wiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wib3BlbkJyYWNlXCJdID0gMTIzXSA9IFwib3BlbkJyYWNlXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJvcGVuQnJhY2tldFwiXSA9IDkxXSA9IFwib3BlbkJyYWNrZXRcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInBsdXNcIl0gPSA0M10gPSBcInBsdXNcIjtcbiAgQ2hhcmFjdGVyQ29kZXMyW0NoYXJhY3RlckNvZGVzMltcInNsYXNoXCJdID0gNDddID0gXCJzbGFzaFwiO1xuICBDaGFyYWN0ZXJDb2RlczJbQ2hhcmFjdGVyQ29kZXMyW1wiZm9ybUZlZWRcIl0gPSAxMl0gPSBcImZvcm1GZWVkXCI7XG4gIENoYXJhY3RlckNvZGVzMltDaGFyYWN0ZXJDb2RlczJbXCJ0YWJcIl0gPSA5XSA9IFwidGFiXCI7XG59KShDaGFyYWN0ZXJDb2RlcyB8fCAoQ2hhcmFjdGVyQ29kZXMgPSB7fSkpO1xudmFyIGNhY2hlZFNwYWNlcyA9IG5ldyBBcnJheSgyMCkuZmlsbCgwKS5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gIHJldHVybiBcIiBcIi5yZXBlYXQoaW5kZXgpO1xufSk7XG52YXIgbWF4Q2FjaGVkVmFsdWVzID0gMjAwO1xudmFyIGNhY2hlZEJyZWFrTGluZXNXaXRoU3BhY2VzID0ge1xuICBcIiBcIjoge1xuICAgIFwiXFxuXCI6IG5ldyBBcnJheShtYXhDYWNoZWRWYWx1ZXMpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgICAgcmV0dXJuIFwiXFxuXCIgKyBcIiBcIi5yZXBlYXQoaW5kZXgpO1xuICAgIH0pLFxuICAgIFwiXFxyXCI6IG5ldyBBcnJheShtYXhDYWNoZWRWYWx1ZXMpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgICAgcmV0dXJuIFwiXFxyXCIgKyBcIiBcIi5yZXBlYXQoaW5kZXgpO1xuICAgIH0pLFxuICAgIFwiXFxyXFxuXCI6IG5ldyBBcnJheShtYXhDYWNoZWRWYWx1ZXMpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgICAgcmV0dXJuIFwiXFxyXFxuXCIgKyBcIiBcIi5yZXBlYXQoaW5kZXgpO1xuICAgIH0pXG4gIH0sXG4gIFwiXHRcIjoge1xuICAgIFwiXFxuXCI6IG5ldyBBcnJheShtYXhDYWNoZWRWYWx1ZXMpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfLCBpbmRleCkge1xuICAgICAgcmV0dXJuIFwiXFxuXCIgKyBcIlx0XCIucmVwZWF0KGluZGV4KTtcbiAgICB9KSxcbiAgICBcIlxcclwiOiBuZXcgQXJyYXkobWF4Q2FjaGVkVmFsdWVzKS5maWxsKDApLm1hcChmdW5jdGlvbiAoXywgaW5kZXgpIHtcbiAgICAgIHJldHVybiBcIlxcclwiICsgXCJcdFwiLnJlcGVhdChpbmRleCk7XG4gICAgfSksXG4gICAgXCJcXHJcXG5cIjogbmV3IEFycmF5KG1heENhY2hlZFZhbHVlcykuZmlsbCgwKS5tYXAoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgICByZXR1cm4gXCJcXHJcXG5cIiArIFwiXHRcIi5yZXBlYXQoaW5kZXgpO1xuICAgIH0pXG4gIH1cbn07XG52YXIgc3VwcG9ydGVkRW9scyA9IFtcIlxcblwiLCBcIlxcclwiLCBcIlxcclxcblwiXTtcbmZ1bmN0aW9uIGZvcm1hdChkb2N1bWVudFRleHQsIHJhbmdlLCBvcHRpb25zKSB7XG4gIHZhciBpbml0aWFsSW5kZW50TGV2ZWw7XG4gIHZhciBmb3JtYXRUZXh0O1xuICB2YXIgZm9ybWF0VGV4dFN0YXJ0O1xuICB2YXIgcmFuZ2VTdGFydDtcbiAgdmFyIHJhbmdlRW5kO1xuICBpZiAocmFuZ2UpIHtcbiAgICByYW5nZVN0YXJ0ID0gcmFuZ2Uub2Zmc2V0O1xuICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIHJhbmdlLmxlbmd0aDtcbiAgICBmb3JtYXRUZXh0U3RhcnQgPSByYW5nZVN0YXJ0O1xuICAgIHdoaWxlIChmb3JtYXRUZXh0U3RhcnQgPiAwICYmICFpc0VPTChkb2N1bWVudFRleHQsIGZvcm1hdFRleHRTdGFydCAtIDEpKSB7XG4gICAgICBmb3JtYXRUZXh0U3RhcnQtLTtcbiAgICB9XG4gICAgdmFyIGVuZE9mZnNldCA9IHJhbmdlRW5kO1xuICAgIHdoaWxlIChlbmRPZmZzZXQgPCBkb2N1bWVudFRleHQubGVuZ3RoICYmICFpc0VPTChkb2N1bWVudFRleHQsIGVuZE9mZnNldCkpIHtcbiAgICAgIGVuZE9mZnNldCsrO1xuICAgIH1cbiAgICBmb3JtYXRUZXh0ID0gZG9jdW1lbnRUZXh0LnN1YnN0cmluZyhmb3JtYXRUZXh0U3RhcnQsIGVuZE9mZnNldCk7XG4gICAgaW5pdGlhbEluZGVudExldmVsID0gY29tcHV0ZUluZGVudExldmVsKGZvcm1hdFRleHQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdFRleHQgPSBkb2N1bWVudFRleHQ7XG4gICAgaW5pdGlhbEluZGVudExldmVsID0gMDtcbiAgICBmb3JtYXRUZXh0U3RhcnQgPSAwO1xuICAgIHJhbmdlU3RhcnQgPSAwO1xuICAgIHJhbmdlRW5kID0gZG9jdW1lbnRUZXh0Lmxlbmd0aDtcbiAgfVxuICB2YXIgZW9sID0gZ2V0RU9MKG9wdGlvbnMsIGRvY3VtZW50VGV4dCk7XG4gIHZhciBlb2xGYXN0UGF0aFN1cHBvcnRlZCA9IHN1cHBvcnRlZEVvbHMuaW5jbHVkZXMoZW9sKTtcbiAgdmFyIG51bWJlckxpbmVCcmVha3MgPSAwO1xuICB2YXIgaW5kZW50TGV2ZWwgPSAwO1xuICB2YXIgaW5kZW50VmFsdWU7XG4gIGlmIChvcHRpb25zLmluc2VydFNwYWNlcykge1xuICAgIHZhciBfY2FjaGVkU3BhY2VzO1xuICAgIGluZGVudFZhbHVlID0gKF9jYWNoZWRTcGFjZXMgPSBjYWNoZWRTcGFjZXNbb3B0aW9ucy50YWJTaXplIHx8IDRdKSAhPT0gbnVsbCAmJiBfY2FjaGVkU3BhY2VzICE9PSB2b2lkIDAgPyBfY2FjaGVkU3BhY2VzIDogcmVwZWF0KGNhY2hlZFNwYWNlc1sxXSwgb3B0aW9ucy50YWJTaXplIHx8IDQpO1xuICB9IGVsc2Uge1xuICAgIGluZGVudFZhbHVlID0gXCJcdFwiO1xuICB9XG4gIHZhciBpbmRlbnRUeXBlID0gaW5kZW50VmFsdWUgPT09IFwiXHRcIiA/IFwiXHRcIiA6IFwiIFwiO1xuICB2YXIgc2Nhbm5lciA9IGNyZWF0ZVNjYW5uZXIoZm9ybWF0VGV4dCwgZmFsc2UpO1xuICB2YXIgaGFzRXJyb3IgPSBmYWxzZTtcbiAgZnVuY3Rpb24gbmV3TGluZXNBbmRJbmRlbnQoKSB7XG4gICAgaWYgKG51bWJlckxpbmVCcmVha3MgPiAxKSB7XG4gICAgICByZXR1cm4gcmVwZWF0KGVvbCwgbnVtYmVyTGluZUJyZWFrcykgKyByZXBlYXQoaW5kZW50VmFsdWUsIGluaXRpYWxJbmRlbnRMZXZlbCArIGluZGVudExldmVsKTtcbiAgICB9XG4gICAgdmFyIGFtb3VudE9mU3BhY2VzID0gaW5kZW50VmFsdWUubGVuZ3RoICogKGluaXRpYWxJbmRlbnRMZXZlbCArIGluZGVudExldmVsKTtcbiAgICBpZiAoIWVvbEZhc3RQYXRoU3VwcG9ydGVkIHx8IGFtb3VudE9mU3BhY2VzID4gY2FjaGVkQnJlYWtMaW5lc1dpdGhTcGFjZXNbaW5kZW50VHlwZV1bZW9sXS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBlb2wgKyByZXBlYXQoaW5kZW50VmFsdWUsIGluaXRpYWxJbmRlbnRMZXZlbCArIGluZGVudExldmVsKTtcbiAgICB9XG4gICAgaWYgKGFtb3VudE9mU3BhY2VzIDw9IDApIHtcbiAgICAgIHJldHVybiBlb2w7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWRCcmVha0xpbmVzV2l0aFNwYWNlc1tpbmRlbnRUeXBlXVtlb2xdW2Ftb3VudE9mU3BhY2VzXTtcbiAgfVxuICBmdW5jdGlvbiBzY2FuTmV4dCgpIHtcbiAgICB2YXIgdG9rZW4gPSBzY2FubmVyLnNjYW4oKTtcbiAgICBudW1iZXJMaW5lQnJlYWtzID0gMDtcbiAgICB3aGlsZSAodG9rZW4gPT09IDE1IHx8IHRva2VuID09PSAxNCkge1xuICAgICAgaWYgKHRva2VuID09PSAxNCAmJiBvcHRpb25zLmtlZXBMaW5lcykge1xuICAgICAgICBudW1iZXJMaW5lQnJlYWtzICs9IDE7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuID09PSAxNCkge1xuICAgICAgICBudW1iZXJMaW5lQnJlYWtzID0gMTtcbiAgICAgIH1cbiAgICAgIHRva2VuID0gc2Nhbm5lci5zY2FuKCk7XG4gICAgfVxuICAgIGhhc0Vycm9yID0gdG9rZW4gPT09IDE2IHx8IHNjYW5uZXIuZ2V0VG9rZW5FcnJvcigpICE9PSAwO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuICB2YXIgZWRpdE9wZXJhdGlvbnMgPSBbXTtcbiAgZnVuY3Rpb24gYWRkRWRpdCh0ZXh0LCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSB7XG4gICAgaWYgKCFoYXNFcnJvciAmJiAoIXJhbmdlIHx8IHN0YXJ0T2Zmc2V0IDwgcmFuZ2VFbmQgJiYgZW5kT2Zmc2V0ID4gcmFuZ2VTdGFydCkgJiYgZG9jdW1lbnRUZXh0LnN1YnN0cmluZyhzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSAhPT0gdGV4dCkge1xuICAgICAgZWRpdE9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgIG9mZnNldDogc3RhcnRPZmZzZXQsXG4gICAgICAgIGxlbmd0aDogZW5kT2Zmc2V0IC0gc3RhcnRPZmZzZXQsXG4gICAgICAgIGNvbnRlbnQ6IHRleHRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB2YXIgZmlyc3RUb2tlbiA9IHNjYW5OZXh0KCk7XG4gIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCkge1xuICAgIGFkZEVkaXQocmVwZWF0KGVvbCwgbnVtYmVyTGluZUJyZWFrcyksIDAsIDApO1xuICB9XG4gIGlmIChmaXJzdFRva2VuICE9PSAxNykge1xuICAgIHZhciBmaXJzdFRva2VuU3RhcnQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBmb3JtYXRUZXh0U3RhcnQ7XG4gICAgdmFyIGluaXRpYWxJbmRlbnQgPSBpbmRlbnRWYWx1ZS5sZW5ndGggKiBpbml0aWFsSW5kZW50TGV2ZWwgPCAyMCAmJiBvcHRpb25zLmluc2VydFNwYWNlcyA/IGNhY2hlZFNwYWNlc1tpbmRlbnRWYWx1ZS5sZW5ndGggKiBpbml0aWFsSW5kZW50TGV2ZWxdIDogcmVwZWF0KGluZGVudFZhbHVlLCBpbml0aWFsSW5kZW50TGV2ZWwpO1xuICAgIGFkZEVkaXQoaW5pdGlhbEluZGVudCwgZm9ybWF0VGV4dFN0YXJ0LCBmaXJzdFRva2VuU3RhcnQpO1xuICB9XG4gIHdoaWxlIChmaXJzdFRva2VuICE9PSAxNykge1xuICAgIHZhciBmaXJzdFRva2VuRW5kID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgc2Nhbm5lci5nZXRUb2tlbkxlbmd0aCgpICsgZm9ybWF0VGV4dFN0YXJ0O1xuICAgIHZhciBzZWNvbmRUb2tlbiA9IHNjYW5OZXh0KCk7XG4gICAgdmFyIHJlcGxhY2VDb250ZW50ID0gXCJcIjtcbiAgICB2YXIgbmVlZHNMaW5lQnJlYWsgPSBmYWxzZTtcbiAgICB3aGlsZSAobnVtYmVyTGluZUJyZWFrcyA9PT0gMCAmJiAoc2Vjb25kVG9rZW4gPT09IDEyIHx8IHNlY29uZFRva2VuID09PSAxMykpIHtcbiAgICAgIHZhciBjb21tZW50VG9rZW5TdGFydCA9IHNjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSArIGZvcm1hdFRleHRTdGFydDtcbiAgICAgIGFkZEVkaXQoY2FjaGVkU3BhY2VzWzFdLCBmaXJzdFRva2VuRW5kLCBjb21tZW50VG9rZW5TdGFydCk7XG4gICAgICBmaXJzdFRva2VuRW5kID0gc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpICsgc2Nhbm5lci5nZXRUb2tlbkxlbmd0aCgpICsgZm9ybWF0VGV4dFN0YXJ0O1xuICAgICAgbmVlZHNMaW5lQnJlYWsgPSBzZWNvbmRUb2tlbiA9PT0gMTI7XG4gICAgICByZXBsYWNlQ29udGVudCA9IG5lZWRzTGluZUJyZWFrID8gbmV3TGluZXNBbmRJbmRlbnQoKSA6IFwiXCI7XG4gICAgICBzZWNvbmRUb2tlbiA9IHNjYW5OZXh0KCk7XG4gICAgfVxuICAgIGlmIChzZWNvbmRUb2tlbiA9PT0gMikge1xuICAgICAgaWYgKGZpcnN0VG9rZW4gIT09IDEpIHtcbiAgICAgICAgaW5kZW50TGV2ZWwtLTtcbiAgICAgIH1cbiAgICAgIDtcbiAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCB8fCAhb3B0aW9ucy5rZWVwTGluZXMgJiYgZmlyc3RUb2tlbiAhPT0gMSkge1xuICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMua2VlcExpbmVzKSB7XG4gICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2Vjb25kVG9rZW4gPT09IDQpIHtcbiAgICAgIGlmIChmaXJzdFRva2VuICE9PSAzKSB7XG4gICAgICAgIGluZGVudExldmVsLS07XG4gICAgICB9XG4gICAgICA7XG4gICAgICBpZiAob3B0aW9ucy5rZWVwTGluZXMgJiYgbnVtYmVyTGluZUJyZWFrcyA+IDAgfHwgIW9wdGlvbnMua2VlcExpbmVzICYmIGZpcnN0VG9rZW4gIT09IDMpIHtcbiAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBuZXdMaW5lc0FuZEluZGVudCgpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmtlZXBMaW5lcykge1xuICAgICAgICByZXBsYWNlQ29udGVudCA9IGNhY2hlZFNwYWNlc1sxXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChmaXJzdFRva2VuKSB7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGluZGVudExldmVsKys7XG4gICAgICAgICAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwIHx8ICFvcHRpb25zLmtlZXBMaW5lcykge1xuICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBuZXdMaW5lc0FuZEluZGVudCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IGNhY2hlZFNwYWNlc1sxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBpZiAob3B0aW9ucy5rZWVwTGluZXMgJiYgbnVtYmVyTGluZUJyZWFrcyA+IDAgfHwgIW9wdGlvbnMua2VlcExpbmVzKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgaWYgKG51bWJlckxpbmVCcmVha3MgPiAwKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghbmVlZHNMaW5lQnJlYWspIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gY2FjaGVkU3BhY2VzWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCkge1xuICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBuZXdMaW5lc0FuZEluZGVudCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIW5lZWRzTGluZUJyZWFrKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IGNhY2hlZFNwYWNlc1sxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgaWYgKG9wdGlvbnMua2VlcExpbmVzICYmIG51bWJlckxpbmVCcmVha3MgPiAwKSB7XG4gICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzZWNvbmRUb2tlbiA9PT0gNiAmJiAhbmVlZHNMaW5lQnJlYWspIHtcbiAgICAgICAgICAgIHJlcGxhY2VDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICBjYXNlIDk6XG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCkge1xuICAgICAgICAgICAgcmVwbGFjZUNvbnRlbnQgPSBuZXdMaW5lc0FuZEluZGVudCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoKHNlY29uZFRva2VuID09PSAxMiB8fCBzZWNvbmRUb2tlbiA9PT0gMTMpICYmICFuZWVkc0xpbmVCcmVhaykge1xuICAgICAgICAgICAgICByZXBsYWNlQ29udGVudCA9IGNhY2hlZFNwYWNlc1sxXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2Vjb25kVG9rZW4gIT09IDUgJiYgc2Vjb25kVG9rZW4gIT09IDE3KSB7XG4gICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKG51bWJlckxpbmVCcmVha3MgPiAwICYmIChzZWNvbmRUb2tlbiA9PT0gMTIgfHwgc2Vjb25kVG9rZW4gPT09IDEzKSkge1xuICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzZWNvbmRUb2tlbiA9PT0gMTcpIHtcbiAgICAgIGlmIChvcHRpb25zLmtlZXBMaW5lcyAmJiBudW1iZXJMaW5lQnJlYWtzID4gMCkge1xuICAgICAgICByZXBsYWNlQ29udGVudCA9IG5ld0xpbmVzQW5kSW5kZW50KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXBsYWNlQ29udGVudCA9IG9wdGlvbnMuaW5zZXJ0RmluYWxOZXdsaW5lID8gZW9sIDogXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHNlY29uZFRva2VuU3RhcnQgPSBzY2FubmVyLmdldFRva2VuT2Zmc2V0KCkgKyBmb3JtYXRUZXh0U3RhcnQ7XG4gICAgYWRkRWRpdChyZXBsYWNlQ29udGVudCwgZmlyc3RUb2tlbkVuZCwgc2Vjb25kVG9rZW5TdGFydCk7XG4gICAgZmlyc3RUb2tlbiA9IHNlY29uZFRva2VuO1xuICB9XG4gIHJldHVybiBlZGl0T3BlcmF0aW9ucztcbn1cbmZ1bmN0aW9uIHJlcGVhdChzLCBjb3VudCkge1xuICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IHM7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVJbmRlbnRMZXZlbChjb250ZW50LCBvcHRpb25zKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIG5DaGFycyA9IDA7XG4gIHZhciB0YWJTaXplID0gb3B0aW9ucy50YWJTaXplIHx8IDQ7XG4gIHdoaWxlIChpIDwgY29udGVudC5sZW5ndGgpIHtcbiAgICB2YXIgY2ggPSBjb250ZW50LmNoYXJBdChpKTtcbiAgICBpZiAoY2ggPT09IGNhY2hlZFNwYWNlc1sxXSkge1xuICAgICAgbkNoYXJzKys7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCJcdFwiKSB7XG4gICAgICBuQ2hhcnMgKz0gdGFiU2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcihuQ2hhcnMgLyB0YWJTaXplKTtcbn1cbmZ1bmN0aW9uIGdldEVPTChvcHRpb25zLCB0ZXh0KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaCA9IHRleHQuY2hhckF0KGkpO1xuICAgIGlmIChjaCA9PT0gXCJcXHJcIikge1xuICAgICAgaWYgKGkgKyAxIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQXQoaSArIDEpID09PSBcIlxcblwiKSB7XG4gICAgICAgIHJldHVybiBcIlxcclxcblwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwiXFxyXCI7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCJcXG5cIikge1xuICAgICAgcmV0dXJuIFwiXFxuXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuZW9sIHx8IFwiXFxuXCI7XG59XG5mdW5jdGlvbiBpc0VPTCh0ZXh0LCBvZmZzZXQpIHtcbiAgcmV0dXJuIFwiXFxyXFxuXCIuaW5kZXhPZih0ZXh0LmNoYXJBdChvZmZzZXQpKSAhPT0gLTE7XG59XG52YXIgUGFyc2VPcHRpb25zO1xuKGZ1bmN0aW9uIChQYXJzZU9wdGlvbnMyKSB7XG4gIFBhcnNlT3B0aW9uczIuREVGQVVMVCA9IHtcbiAgICBhbGxvd1RyYWlsaW5nQ29tbWE6IGZhbHNlXG4gIH07XG59KShQYXJzZU9wdGlvbnMgfHwgKFBhcnNlT3B0aW9ucyA9IHt9KSk7XG5mdW5jdGlvbiBnZXRMb2NhdGlvbih0ZXh0LCBwb3NpdGlvbikge1xuICB2YXIgc2VnbWVudHMgPSBbXTtcbiAgdmFyIGVhcmx5UmV0dXJuRXhjZXB0aW9uID0gbmV3IE9iamVjdCgpO1xuICB2YXIgcHJldmlvdXNOb2RlID0gdm9pZCAwO1xuICB2YXIgcHJldmlvdXNOb2RlSW5zdCA9IHtcbiAgICB2YWx1ZToge30sXG4gICAgb2Zmc2V0OiAwLFxuICAgIGxlbmd0aDogMCxcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHBhcmVudDogdm9pZCAwXG4gIH07XG4gIHZhciBpc0F0UHJvcGVydHlLZXkgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2V0UHJldmlvdXNOb2RlKHZhbHVlLCBvZmZzZXQsIGxlbmd0aCwgdHlwZSkge1xuICAgIHByZXZpb3VzTm9kZUluc3QudmFsdWUgPSB2YWx1ZTtcbiAgICBwcmV2aW91c05vZGVJbnN0Lm9mZnNldCA9IG9mZnNldDtcbiAgICBwcmV2aW91c05vZGVJbnN0Lmxlbmd0aCA9IGxlbmd0aDtcbiAgICBwcmV2aW91c05vZGVJbnN0LnR5cGUgPSB0eXBlO1xuICAgIHByZXZpb3VzTm9kZUluc3QuY29sb25PZmZzZXQgPSB2b2lkIDA7XG4gICAgcHJldmlvdXNOb2RlID0gcHJldmlvdXNOb2RlSW5zdDtcbiAgfVxuICB0cnkge1xuICAgIHZpc2l0KHRleHQsIHtcbiAgICAgIG9uT2JqZWN0QmVnaW46IGZ1bmN0aW9uIG9uT2JqZWN0QmVnaW4ob2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IG9mZnNldCkge1xuICAgICAgICAgIHRocm93IGVhcmx5UmV0dXJuRXhjZXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTm9kZSA9IHZvaWQgMDtcbiAgICAgICAgaXNBdFByb3BlcnR5S2V5ID0gcG9zaXRpb24gPiBvZmZzZXQ7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goXCJcIik7XG4gICAgICB9LFxuICAgICAgb25PYmplY3RQcm9wZXJ0eTogZnVuY3Rpb24gb25PYmplY3RQcm9wZXJ0eShuYW1lLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICBpZiAocG9zaXRpb24gPCBvZmZzZXQpIHtcbiAgICAgICAgICB0aHJvdyBlYXJseVJldHVybkV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBzZXRQcmV2aW91c05vZGUobmFtZSwgb2Zmc2V0LCBsZW5ndGgsIFwicHJvcGVydHlcIik7XG4gICAgICAgIHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdID0gbmFtZTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IG9mZnNldCArIGxlbmd0aCkge1xuICAgICAgICAgIHRocm93IGVhcmx5UmV0dXJuRXhjZXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25PYmplY3RFbmQ6IGZ1bmN0aW9uIG9uT2JqZWN0RW5kKG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBvZmZzZXQpIHtcbiAgICAgICAgICB0aHJvdyBlYXJseVJldHVybkV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c05vZGUgPSB2b2lkIDA7XG4gICAgICAgIHNlZ21lbnRzLnBvcCgpO1xuICAgICAgfSxcbiAgICAgIG9uQXJyYXlCZWdpbjogZnVuY3Rpb24gb25BcnJheUJlZ2luKG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBvZmZzZXQpIHtcbiAgICAgICAgICB0aHJvdyBlYXJseVJldHVybkV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c05vZGUgPSB2b2lkIDA7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goMCk7XG4gICAgICB9LFxuICAgICAgb25BcnJheUVuZDogZnVuY3Rpb24gb25BcnJheUVuZChvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgICBpZiAocG9zaXRpb24gPD0gb2Zmc2V0KSB7XG4gICAgICAgICAgdGhyb3cgZWFybHlSZXR1cm5FeGNlcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNOb2RlID0gdm9pZCAwO1xuICAgICAgICBzZWdtZW50cy5wb3AoKTtcbiAgICAgIH0sXG4gICAgICBvbkxpdGVyYWxWYWx1ZTogZnVuY3Rpb24gb25MaXRlcmFsVmFsdWUodmFsdWUsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IG9mZnNldCkge1xuICAgICAgICAgIHRocm93IGVhcmx5UmV0dXJuRXhjZXB0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHNldFByZXZpb3VzTm9kZSh2YWx1ZSwgb2Zmc2V0LCBsZW5ndGgsIGdldE5vZGVUeXBlKHZhbHVlKSk7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBvZmZzZXQgKyBsZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBlYXJseVJldHVybkV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uU2VwYXJhdG9yOiBmdW5jdGlvbiBvblNlcGFyYXRvcihzZXAsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBvZmZzZXQpIHtcbiAgICAgICAgICB0aHJvdyBlYXJseVJldHVybkV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwID09PSBcIjpcIiAmJiBwcmV2aW91c05vZGUgJiYgcHJldmlvdXNOb2RlLnR5cGUgPT09IFwicHJvcGVydHlcIikge1xuICAgICAgICAgIHByZXZpb3VzTm9kZS5jb2xvbk9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICBpc0F0UHJvcGVydHlLZXkgPSBmYWxzZTtcbiAgICAgICAgICBwcmV2aW91c05vZGUgPSB2b2lkIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VwID09PSBcIixcIikge1xuICAgICAgICAgIHZhciBsYXN0ID0gc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBsYXN0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSA9IGxhc3QgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc0F0UHJvcGVydHlLZXkgPSB0cnVlO1xuICAgICAgICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0gPSBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2aW91c05vZGUgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlICE9PSBlYXJseVJldHVybkV4Y2VwdGlvbikge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBzZWdtZW50cyxcbiAgICBwcmV2aW91c05vZGU6IHByZXZpb3VzTm9kZSxcbiAgICBpc0F0UHJvcGVydHlLZXk6IGlzQXRQcm9wZXJ0eUtleSxcbiAgICBtYXRjaGVzOiBmdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4pIHtcbiAgICAgIHZhciBrID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBrIDwgcGF0dGVybi5sZW5ndGggJiYgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXR0ZXJuW2tdID09PSBzZWdtZW50c1tpXSB8fCBwYXR0ZXJuW2tdID09PSBcIipcIikge1xuICAgICAgICAgIGsrKztcbiAgICAgICAgfSBlbHNlIGlmIChwYXR0ZXJuW2tdICE9PSBcIioqXCIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBrID09PSBwYXR0ZXJuLmxlbmd0aDtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZSh0ZXh0KSB7XG4gIHZhciBlcnJvcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogUGFyc2VPcHRpb25zLkRFRkFVTFQ7XG4gIHZhciBjdXJyZW50UHJvcGVydHkgPSBudWxsO1xuICB2YXIgY3VycmVudFBhcmVudCA9IFtdO1xuICB2YXIgcHJldmlvdXNQYXJlbnRzID0gW107XG4gIGZ1bmN0aW9uIG9uVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50UGFyZW50KSkge1xuICAgICAgY3VycmVudFBhcmVudC5wdXNoKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQcm9wZXJ0eSAhPT0gbnVsbCkge1xuICAgICAgY3VycmVudFBhcmVudFtjdXJyZW50UHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHZhciB2aXNpdG9yID0ge1xuICAgIG9uT2JqZWN0QmVnaW46IGZ1bmN0aW9uIG9uT2JqZWN0QmVnaW4oKSB7XG4gICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICBvblZhbHVlKG9iamVjdCk7XG4gICAgICBwcmV2aW91c1BhcmVudHMucHVzaChjdXJyZW50UGFyZW50KTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBvYmplY3Q7XG4gICAgICBjdXJyZW50UHJvcGVydHkgPSBudWxsO1xuICAgIH0sXG4gICAgb25PYmplY3RQcm9wZXJ0eTogZnVuY3Rpb24gb25PYmplY3RQcm9wZXJ0eShuYW1lKSB7XG4gICAgICBjdXJyZW50UHJvcGVydHkgPSBuYW1lO1xuICAgIH0sXG4gICAgb25PYmplY3RFbmQ6IGZ1bmN0aW9uIG9uT2JqZWN0RW5kKCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IHByZXZpb3VzUGFyZW50cy5wb3AoKTtcbiAgICB9LFxuICAgIG9uQXJyYXlCZWdpbjogZnVuY3Rpb24gb25BcnJheUJlZ2luKCkge1xuICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICBvblZhbHVlKGFycmF5KTtcbiAgICAgIHByZXZpb3VzUGFyZW50cy5wdXNoKGN1cnJlbnRQYXJlbnQpO1xuICAgICAgY3VycmVudFBhcmVudCA9IGFycmF5O1xuICAgICAgY3VycmVudFByb3BlcnR5ID0gbnVsbDtcbiAgICB9LFxuICAgIG9uQXJyYXlFbmQ6IGZ1bmN0aW9uIG9uQXJyYXlFbmQoKSB7XG4gICAgICBjdXJyZW50UGFyZW50ID0gcHJldmlvdXNQYXJlbnRzLnBvcCgpO1xuICAgIH0sXG4gICAgb25MaXRlcmFsVmFsdWU6IG9uVmFsdWUsXG4gICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlcnJvciwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgdmlzaXQodGV4dCwgdmlzaXRvciwgb3B0aW9ucyk7XG4gIHJldHVybiBjdXJyZW50UGFyZW50WzBdO1xufVxuZnVuY3Rpb24gcGFyc2VUcmVlKHRleHQpIHtcbiAgdmFyIGVycm9ycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBQYXJzZU9wdGlvbnMuREVGQVVMVDtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSB7XG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIG9mZnNldDogLTEsXG4gICAgbGVuZ3RoOiAtMSxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgcGFyZW50OiB2b2lkIDBcbiAgfTtcbiAgZnVuY3Rpb24gZW5zdXJlUHJvcGVydHlDb21wbGV0ZShlbmRPZmZzZXQpIHtcbiAgICBpZiAoY3VycmVudFBhcmVudC50eXBlID09PSBcInByb3BlcnR5XCIpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQubGVuZ3RoID0gZW5kT2Zmc2V0IC0gY3VycmVudFBhcmVudC5vZmZzZXQ7XG4gICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uVmFsdWUodmFsdWVOb2RlKSB7XG4gICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKHZhbHVlTm9kZSk7XG4gICAgcmV0dXJuIHZhbHVlTm9kZTtcbiAgfVxuICB2YXIgdmlzaXRvciA9IHtcbiAgICBvbk9iamVjdEJlZ2luOiBmdW5jdGlvbiBvbk9iamVjdEJlZ2luKG9mZnNldCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IG9uVmFsdWUoe1xuICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgbGVuZ3RoOiAtMSxcbiAgICAgICAgcGFyZW50OiBjdXJyZW50UGFyZW50LFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25PYmplY3RQcm9wZXJ0eTogZnVuY3Rpb24gb25PYmplY3RQcm9wZXJ0eShuYW1lLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IG9uVmFsdWUoe1xuICAgICAgICB0eXBlOiBcInByb3BlcnR5XCIsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBsZW5ndGg6IC0xLFxuICAgICAgICBwYXJlbnQ6IGN1cnJlbnRQYXJlbnQsXG4gICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgfSk7XG4gICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goe1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICB2YWx1ZTogbmFtZSxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIGxlbmd0aDogbGVuZ3RoLFxuICAgICAgICBwYXJlbnQ6IGN1cnJlbnRQYXJlbnRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25PYmplY3RFbmQ6IGZ1bmN0aW9uIG9uT2JqZWN0RW5kKG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBlbnN1cmVQcm9wZXJ0eUNvbXBsZXRlKG9mZnNldCArIGxlbmd0aCk7XG4gICAgICBjdXJyZW50UGFyZW50Lmxlbmd0aCA9IG9mZnNldCArIGxlbmd0aCAtIGN1cnJlbnRQYXJlbnQub2Zmc2V0O1xuICAgICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQucGFyZW50O1xuICAgICAgZW5zdXJlUHJvcGVydHlDb21wbGV0ZShvZmZzZXQgKyBsZW5ndGgpO1xuICAgIH0sXG4gICAgb25BcnJheUJlZ2luOiBmdW5jdGlvbiBvbkFycmF5QmVnaW4ob2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBvblZhbHVlKHtcbiAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgbGVuZ3RoOiAtMSxcbiAgICAgICAgcGFyZW50OiBjdXJyZW50UGFyZW50LFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25BcnJheUVuZDogZnVuY3Rpb24gb25BcnJheUVuZChvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgY3VycmVudFBhcmVudC5sZW5ndGggPSBvZmZzZXQgKyBsZW5ndGggLSBjdXJyZW50UGFyZW50Lm9mZnNldDtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBjdXJyZW50UGFyZW50LnBhcmVudDtcbiAgICAgIGVuc3VyZVByb3BlcnR5Q29tcGxldGUob2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICB9LFxuICAgIG9uTGl0ZXJhbFZhbHVlOiBmdW5jdGlvbiBvbkxpdGVyYWxWYWx1ZSh2YWx1ZSwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIG9uVmFsdWUoe1xuICAgICAgICB0eXBlOiBnZXROb2RlVHlwZSh2YWx1ZSksXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgcGFyZW50OiBjdXJyZW50UGFyZW50LFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgICAgZW5zdXJlUHJvcGVydHlDb21wbGV0ZShvZmZzZXQgKyBsZW5ndGgpO1xuICAgIH0sXG4gICAgb25TZXBhcmF0b3I6IGZ1bmN0aW9uIG9uU2VwYXJhdG9yKHNlcCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGlmIChjdXJyZW50UGFyZW50LnR5cGUgPT09IFwicHJvcGVydHlcIikge1xuICAgICAgICBpZiAoc2VwID09PSBcIjpcIikge1xuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY29sb25PZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VwID09PSBcIixcIikge1xuICAgICAgICAgIGVuc3VyZVByb3BlcnR5Q29tcGxldGUob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlcnJvciwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgdmlzaXQodGV4dCwgdmlzaXRvciwgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuWzBdO1xuICBpZiAocmVzdWx0KSB7XG4gICAgZGVsZXRlIHJlc3VsdC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZpbmROb2RlQXRMb2NhdGlvbihyb290LCBwYXRoKSB7XG4gIGlmICghcm9vdCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgdmFyIG5vZGUgPSByb290O1xuICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocGF0aCksXG4gICAgX3N0ZXA7XG4gIHRyeSB7XG4gICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgIHZhciBzZWdtZW50ID0gX3N0ZXAudmFsdWU7XG4gICAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSAhPT0gXCJvYmplY3RcIiB8fCAhQXJyYXkuaXNBcnJheShub2RlLmNoaWxkcmVuKSkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm9kZS5jaGlsZHJlbiksXG4gICAgICAgICAgX3N0ZXAyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgcHJvcGVydHlOb2RlID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHlOb2RlLmNoaWxkcmVuKSAmJiBwcm9wZXJ0eU5vZGUuY2hpbGRyZW5bMF0udmFsdWUgPT09IHNlZ21lbnQgJiYgcHJvcGVydHlOb2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICBub2RlID0gcHJvcGVydHlOb2RlLmNoaWxkcmVuWzFdO1xuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbmRleCA9IHNlZ21lbnQ7XG4gICAgICAgIGlmIChub2RlLnR5cGUgIT09IFwiYXJyYXlcIiB8fCBpbmRleCA8IDAgfHwgIUFycmF5LmlzQXJyYXkobm9kZS5jaGlsZHJlbikgfHwgaW5kZXggPj0gbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVQYXRoKG5vZGUpIHtcbiAgaWYgKCFub2RlLnBhcmVudCB8fCAhbm9kZS5wYXJlbnQuY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHBhdGggPSBnZXROb2RlUGF0aChub2RlLnBhcmVudCk7XG4gIGlmIChub2RlLnBhcmVudC50eXBlID09PSBcInByb3BlcnR5XCIpIHtcbiAgICB2YXIga2V5ID0gbm9kZS5wYXJlbnQuY2hpbGRyZW5bMF0udmFsdWU7XG4gICAgcGF0aC5wdXNoKGtleSk7XG4gIH0gZWxzZSBpZiAobm9kZS5wYXJlbnQudHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgdmFyIGluZGV4ID0gbm9kZS5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBwYXRoLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmZ1bmN0aW9uIGdldE5vZGVWYWx1ZShub2RlKSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSBcImFycmF5XCI6XG4gICAgICByZXR1cm4gbm9kZS5jaGlsZHJlbi5tYXAoZ2V0Tm9kZVZhbHVlKTtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobm9kZS5jaGlsZHJlbiksXG4gICAgICAgIF9zdGVwMztcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIHByb3AgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgdmFyIHZhbHVlTm9kZSA9IHByb3AuY2hpbGRyZW5bMV07XG4gICAgICAgICAgaWYgKHZhbHVlTm9kZSkge1xuICAgICAgICAgICAgb2JqW3Byb3AuY2hpbGRyZW5bMF0udmFsdWVdID0gZ2V0Tm9kZVZhbHVlKHZhbHVlTm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IzLmYoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7XG4gICAgY2FzZSBcIm51bGxcIjpcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufVxuZnVuY3Rpb24gY29udGFpbnMobm9kZSwgb2Zmc2V0KSB7XG4gIHZhciBpbmNsdWRlUmlnaHRCb3VuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHJldHVybiBvZmZzZXQgPj0gbm9kZS5vZmZzZXQgJiYgb2Zmc2V0IDwgbm9kZS5vZmZzZXQgKyBub2RlLmxlbmd0aCB8fCBpbmNsdWRlUmlnaHRCb3VuZCAmJiBvZmZzZXQgPT09IG5vZGUub2Zmc2V0ICsgbm9kZS5sZW5ndGg7XG59XG5mdW5jdGlvbiBmaW5kTm9kZUF0T2Zmc2V0KG5vZGUsIG9mZnNldCkge1xuICB2YXIgaW5jbHVkZVJpZ2h0Qm91bmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICBpZiAoY29udGFpbnMobm9kZSwgb2Zmc2V0LCBpbmNsdWRlUmlnaHRCb3VuZCkpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGggJiYgY2hpbGRyZW5baV0ub2Zmc2V0IDw9IG9mZnNldDsgaSsrKSB7XG4gICAgICAgIHZhciBpdGVtID0gZmluZE5vZGVBdE9mZnNldChjaGlsZHJlbltpXSwgb2Zmc2V0LCBpbmNsdWRlUmlnaHRCb3VuZCk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHZpc2l0KHRleHQsIHZpc2l0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFBhcnNlT3B0aW9ucy5ERUZBVUxUO1xuICB2YXIgX3NjYW5uZXIgPSBjcmVhdGVTY2FubmVyKHRleHQsIGZhbHNlKTtcbiAgdmFyIF9qc29uUGF0aCA9IFtdO1xuICB2YXIgc3VwcHJlc3NlZENhbGxiYWNrcyA9IDA7XG4gIGZ1bmN0aW9uIHRvTm9BcmdWaXNpdCh2aXNpdEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHZpc2l0RnVuY3Rpb24gPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3VwcHJlc3NlZENhbGxiYWNrcyA9PT0gMCAmJiB2aXNpdEZ1bmN0aW9uKF9zY2FubmVyLmdldFRva2VuT2Zmc2V0KCksIF9zY2FubmVyLmdldFRva2VuTGVuZ3RoKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRDaGFyYWN0ZXIoKSk7XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gdG9PbmVBcmdWaXNpdCh2aXNpdEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHZpc2l0RnVuY3Rpb24gPyBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gc3VwcHJlc3NlZENhbGxiYWNrcyA9PT0gMCAmJiB2aXNpdEZ1bmN0aW9uKGFyZywgX3NjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgX3NjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydENoYXJhY3RlcigpKTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB0b09uZUFyZ1Zpc2l0V2l0aFBhdGgodmlzaXRGdW5jdGlvbikge1xuICAgIHJldHVybiB2aXNpdEZ1bmN0aW9uID8gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIHN1cHByZXNzZWRDYWxsYmFja3MgPT09IDAgJiYgdmlzaXRGdW5jdGlvbihhcmcsIF9zY2FubmVyLmdldFRva2VuT2Zmc2V0KCksIF9zY2FubmVyLmdldFRva2VuTGVuZ3RoKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRMaW5lKCksIF9zY2FubmVyLmdldFRva2VuU3RhcnRDaGFyYWN0ZXIoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX2pzb25QYXRoLnNsaWNlKCk7XG4gICAgICB9KTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB0b0JlZ2luVmlzaXQodmlzaXRGdW5jdGlvbikge1xuICAgIHJldHVybiB2aXNpdEZ1bmN0aW9uID8gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHN1cHByZXNzZWRDYWxsYmFja3MgPiAwKSB7XG4gICAgICAgIHN1cHByZXNzZWRDYWxsYmFja3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjYlJldHVybiA9IHZpc2l0RnVuY3Rpb24oX3NjYW5uZXIuZ2V0VG9rZW5PZmZzZXQoKSwgX3NjYW5uZXIuZ2V0VG9rZW5MZW5ndGgoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydExpbmUoKSwgX3NjYW5uZXIuZ2V0VG9rZW5TdGFydENoYXJhY3RlcigpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF9qc29uUGF0aC5zbGljZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNiUmV0dXJuID09PSBmYWxzZSkge1xuICAgICAgICAgIHN1cHByZXNzZWRDYWxsYmFja3MgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gdG9FbmRWaXNpdCh2aXNpdEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIHZpc2l0RnVuY3Rpb24gPyBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc3VwcHJlc3NlZENhbGxiYWNrcyA+IDApIHtcbiAgICAgICAgc3VwcHJlc3NlZENhbGxiYWNrcy0tO1xuICAgICAgfVxuICAgICAgaWYgKHN1cHByZXNzZWRDYWxsYmFja3MgPT09IDApIHtcbiAgICAgICAgdmlzaXRGdW5jdGlvbihfc2Nhbm5lci5nZXRUb2tlbk9mZnNldCgpLCBfc2Nhbm5lci5nZXRUb2tlbkxlbmd0aCgpLCBfc2Nhbm5lci5nZXRUb2tlblN0YXJ0TGluZSgpLCBfc2Nhbm5lci5nZXRUb2tlblN0YXJ0Q2hhcmFjdGVyKCkpO1xuICAgICAgfVxuICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9XG4gIHZhciBvbk9iamVjdEJlZ2luID0gdG9CZWdpblZpc2l0KHZpc2l0b3Iub25PYmplY3RCZWdpbiksXG4gICAgb25PYmplY3RQcm9wZXJ0eSA9IHRvT25lQXJnVmlzaXRXaXRoUGF0aCh2aXNpdG9yLm9uT2JqZWN0UHJvcGVydHkpLFxuICAgIG9uT2JqZWN0RW5kID0gdG9FbmRWaXNpdCh2aXNpdG9yLm9uT2JqZWN0RW5kKSxcbiAgICBvbkFycmF5QmVnaW4gPSB0b0JlZ2luVmlzaXQodmlzaXRvci5vbkFycmF5QmVnaW4pLFxuICAgIG9uQXJyYXlFbmQgPSB0b0VuZFZpc2l0KHZpc2l0b3Iub25BcnJheUVuZCksXG4gICAgb25MaXRlcmFsVmFsdWUgPSB0b09uZUFyZ1Zpc2l0V2l0aFBhdGgodmlzaXRvci5vbkxpdGVyYWxWYWx1ZSksXG4gICAgb25TZXBhcmF0b3IgPSB0b09uZUFyZ1Zpc2l0KHZpc2l0b3Iub25TZXBhcmF0b3IpLFxuICAgIG9uQ29tbWVudCA9IHRvTm9BcmdWaXNpdCh2aXNpdG9yLm9uQ29tbWVudCksXG4gICAgb25FcnJvciA9IHRvT25lQXJnVmlzaXQodmlzaXRvci5vbkVycm9yKTtcbiAgdmFyIGRpc2FsbG93Q29tbWVudHMgPSBvcHRpb25zICYmIG9wdGlvbnMuZGlzYWxsb3dDb21tZW50cztcbiAgdmFyIGFsbG93VHJhaWxpbmdDb21tYSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd1RyYWlsaW5nQ29tbWE7XG4gIGZ1bmN0aW9uIHNjYW5OZXh0KCkge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB2YXIgdG9rZW4gPSBfc2Nhbm5lci5zY2FuKCk7XG4gICAgICBzd2l0Y2ggKF9zY2FubmVyLmdldFRva2VuRXJyb3IoKSkge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoMTQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoMTUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoMTMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKCFkaXNhbGxvd0NvbW1lbnRzKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcigxMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoMTIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgaGFuZGxlRXJyb3IoMTYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIGlmIChkaXNhbGxvd0NvbW1lbnRzKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcigxMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICBoYW5kbGVFcnJvcigxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgdmFyIHNraXBVbnRpbEFmdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgICB2YXIgc2tpcFVudGlsID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICBvbkVycm9yKGVycm9yKTtcbiAgICBpZiAoc2tpcFVudGlsQWZ0ZXIubGVuZ3RoICsgc2tpcFVudGlsLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciB0b2tlbiA9IF9zY2FubmVyLmdldFRva2VuKCk7XG4gICAgICB3aGlsZSAodG9rZW4gIT09IDE3KSB7XG4gICAgICAgIGlmIChza2lwVW50aWxBZnRlci5pbmRleE9mKHRva2VuKSAhPT0gLTEpIHtcbiAgICAgICAgICBzY2FuTmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKHNraXBVbnRpbC5pbmRleE9mKHRva2VuKSAhPT0gLTEpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0b2tlbiA9IHNjYW5OZXh0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHBhcnNlU3RyaW5nKGlzVmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBfc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG4gICAgaWYgKGlzVmFsdWUpIHtcbiAgICAgIG9uTGl0ZXJhbFZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25PYmplY3RQcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICBfanNvblBhdGgucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHNjYW5OZXh0KCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VMaXRlcmFsKCkge1xuICAgIHN3aXRjaCAoX3NjYW5uZXIuZ2V0VG9rZW4oKSkge1xuICAgICAgY2FzZSAxMTpcbiAgICAgICAgdmFyIHRva2VuVmFsdWUgPSBfc2Nhbm5lci5nZXRUb2tlblZhbHVlKCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IE51bWJlcih0b2tlblZhbHVlKTtcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKDIpO1xuICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgICBvbkxpdGVyYWxWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA3OlxuICAgICAgICBvbkxpdGVyYWxWYWx1ZShudWxsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIG9uTGl0ZXJhbFZhbHVlKHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTpcbiAgICAgICAgb25MaXRlcmFsVmFsdWUoZmFsc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2Nhbk5leHQoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBwYXJzZVByb3BlcnR5KCkge1xuICAgIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpICE9PSAxMCkge1xuICAgICAgaGFuZGxlRXJyb3IoMywgW10sIFsyLCA1XSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHBhcnNlU3RyaW5nKGZhbHNlKTtcbiAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gNikge1xuICAgICAgb25TZXBhcmF0b3IoXCI6XCIpO1xuICAgICAgc2Nhbk5leHQoKTtcbiAgICAgIGlmICghcGFyc2VWYWx1ZSgpKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKDQsIFtdLCBbMiwgNV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVFcnJvcig1LCBbXSwgWzIsIDVdKTtcbiAgICB9XG4gICAgX2pzb25QYXRoLnBvcCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlT2JqZWN0KCkge1xuICAgIG9uT2JqZWN0QmVnaW4oKTtcbiAgICBzY2FuTmV4dCgpO1xuICAgIHZhciBuZWVkc0NvbW1hID0gZmFsc2U7XG4gICAgd2hpbGUgKF9zY2FubmVyLmdldFRva2VuKCkgIT09IDIgJiYgX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMTcpIHtcbiAgICAgIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpID09PSA1KSB7XG4gICAgICAgIGlmICghbmVlZHNDb21tYSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKDQsIFtdLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgb25TZXBhcmF0b3IoXCIsXCIpO1xuICAgICAgICBzY2FuTmV4dCgpO1xuICAgICAgICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSA9PT0gMiAmJiBhbGxvd1RyYWlsaW5nQ29tbWEpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZWVkc0NvbW1hKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKDYsIFtdLCBbXSk7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcnNlUHJvcGVydHkoKSkge1xuICAgICAgICBoYW5kbGVFcnJvcig0LCBbXSwgWzIsIDVdKTtcbiAgICAgIH1cbiAgICAgIG5lZWRzQ29tbWEgPSB0cnVlO1xuICAgIH1cbiAgICBvbk9iamVjdEVuZCgpO1xuICAgIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpICE9PSAyKSB7XG4gICAgICBoYW5kbGVFcnJvcig3LCBbMl0sIFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nhbk5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VBcnJheSgpIHtcbiAgICBvbkFycmF5QmVnaW4oKTtcbiAgICBzY2FuTmV4dCgpO1xuICAgIHZhciBpc0ZpcnN0RWxlbWVudCA9IHRydWU7XG4gICAgdmFyIG5lZWRzQ29tbWEgPSBmYWxzZTtcbiAgICB3aGlsZSAoX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gNCAmJiBfc2Nhbm5lci5nZXRUb2tlbigpICE9PSAxNykge1xuICAgICAgaWYgKF9zY2FubmVyLmdldFRva2VuKCkgPT09IDUpIHtcbiAgICAgICAgaWYgKCFuZWVkc0NvbW1hKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoNCwgW10sIFtdKTtcbiAgICAgICAgfVxuICAgICAgICBvblNlcGFyYXRvcihcIixcIik7XG4gICAgICAgIHNjYW5OZXh0KCk7XG4gICAgICAgIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpID09PSA0ICYmIGFsbG93VHJhaWxpbmdDb21tYSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5lZWRzQ29tbWEpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoNiwgW10sIFtdKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0ZpcnN0RWxlbWVudCkge1xuICAgICAgICBfanNvblBhdGgucHVzaCgwKTtcbiAgICAgICAgaXNGaXJzdEVsZW1lbnQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9qc29uUGF0aFtfanNvblBhdGgubGVuZ3RoIC0gMV0rKztcbiAgICAgIH1cbiAgICAgIGlmICghcGFyc2VWYWx1ZSgpKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKDQsIFtdLCBbNCwgNV0pO1xuICAgICAgfVxuICAgICAgbmVlZHNDb21tYSA9IHRydWU7XG4gICAgfVxuICAgIG9uQXJyYXlFbmQoKTtcbiAgICBpZiAoIWlzRmlyc3RFbGVtZW50KSB7XG4gICAgICBfanNvblBhdGgucG9wKCk7XG4gICAgfVxuICAgIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpICE9PSA0KSB7XG4gICAgICBoYW5kbGVFcnJvcig4LCBbNF0sIFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nhbk5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gcGFyc2VWYWx1ZSgpIHtcbiAgICBzd2l0Y2ggKF9zY2FubmVyLmdldFRva2VuKCkpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIHBhcnNlQXJyYXkoKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIHBhcnNlT2JqZWN0KCk7XG4gICAgICBjYXNlIDEwOlxuICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmcodHJ1ZSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcGFyc2VMaXRlcmFsKCk7XG4gICAgfVxuICB9XG4gIHNjYW5OZXh0KCk7XG4gIGlmIChfc2Nhbm5lci5nZXRUb2tlbigpID09PSAxNykge1xuICAgIGlmIChvcHRpb25zLmFsbG93RW1wdHlDb250ZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoNCwgW10sIFtdKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCFwYXJzZVZhbHVlKCkpIHtcbiAgICBoYW5kbGVFcnJvcig0LCBbXSwgW10pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoX3NjYW5uZXIuZ2V0VG9rZW4oKSAhPT0gMTcpIHtcbiAgICBoYW5kbGVFcnJvcig5LCBbXSwgW10pO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gc3RyaXBDb21tZW50cyh0ZXh0LCByZXBsYWNlQ2gpIHtcbiAgdmFyIF9zY2FubmVyID0gY3JlYXRlU2Nhbm5lcih0ZXh0KSxcbiAgICBwYXJ0cyA9IFtdLFxuICAgIGtpbmQsXG4gICAgb2Zmc2V0ID0gMCxcbiAgICBwb3M7XG4gIGRvIHtcbiAgICBwb3MgPSBfc2Nhbm5lci5nZXRQb3NpdGlvbigpO1xuICAgIGtpbmQgPSBfc2Nhbm5lci5zY2FuKCk7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIDEyOlxuICAgICAgY2FzZSAxMzpcbiAgICAgIGNhc2UgMTc6XG4gICAgICAgIGlmIChvZmZzZXQgIT09IHBvcykge1xuICAgICAgICAgIHBhcnRzLnB1c2godGV4dC5zdWJzdHJpbmcob2Zmc2V0LCBwb3MpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZUNoICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKF9zY2FubmVyLmdldFRva2VuVmFsdWUoKS5yZXBsYWNlKC9bXlxcclxcbl0vZywgcmVwbGFjZUNoKSk7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ID0gX3NjYW5uZXIuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9IHdoaWxlIChraW5kICE9PSAxNyk7XG4gIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZVR5cGUodmFsdWUpIHtcbiAgc3dpdGNoIChfdHlwZW9mKHZhbHVlKSkge1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gXCJib29sZWFuXCI7XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAge1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIFwiYXJyYXlcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJvYmplY3RcIjtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICB9XG59XG5mdW5jdGlvbiBzZXRQcm9wZXJ0eSh0ZXh0LCBvcmlnaW5hbFBhdGgsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciBwYXRoID0gb3JpZ2luYWxQYXRoLnNsaWNlKCk7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHJvb3QgPSBwYXJzZVRyZWUodGV4dCwgZXJyb3JzKTtcbiAgdmFyIHBhcmVudCA9IHZvaWQgMDtcbiAgdmFyIGxhc3RTZWdtZW50ID0gdm9pZCAwO1xuICB3aGlsZSAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgbGFzdFNlZ21lbnQgPSBwYXRoLnBvcCgpO1xuICAgIHBhcmVudCA9IGZpbmROb2RlQXRMb2NhdGlvbihyb290LCBwYXRoKTtcbiAgICBpZiAocGFyZW50ID09PSB2b2lkIDAgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgaWYgKHR5cGVvZiBsYXN0U2VnbWVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgbGFzdFNlZ21lbnQsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmICghcGFyZW50KSB7XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgZGVsZXRlIGluIGVtcHR5IGRvY3VtZW50XCIpO1xuICAgIH1cbiAgICByZXR1cm4gd2l0aEZvcm1hdHRpbmcodGV4dCwge1xuICAgICAgb2Zmc2V0OiByb290ID8gcm9vdC5vZmZzZXQgOiAwLFxuICAgICAgbGVuZ3RoOiByb290ID8gcm9vdC5sZW5ndGggOiAwLFxuICAgICAgY29udGVudDogSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgfSwgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAocGFyZW50LnR5cGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGxhc3RTZWdtZW50ID09PSBcInN0cmluZ1wiICYmIEFycmF5LmlzQXJyYXkocGFyZW50LmNoaWxkcmVuKSkge1xuICAgIHZhciBleGlzdGluZyA9IGZpbmROb2RlQXRMb2NhdGlvbihwYXJlbnQsIFtsYXN0U2VnbWVudF0pO1xuICAgIGlmIChleGlzdGluZyAhPT0gdm9pZCAwKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICBpZiAoIWV4aXN0aW5nLnBhcmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBBU1RcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BlcnR5SW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihleGlzdGluZy5wYXJlbnQpO1xuICAgICAgICB2YXIgcmVtb3ZlQmVnaW47XG4gICAgICAgIHZhciByZW1vdmVFbmQgPSBleGlzdGluZy5wYXJlbnQub2Zmc2V0ICsgZXhpc3RpbmcucGFyZW50Lmxlbmd0aDtcbiAgICAgICAgaWYgKHByb3BlcnR5SW5kZXggPiAwKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gcGFyZW50LmNoaWxkcmVuW3Byb3BlcnR5SW5kZXggLSAxXTtcbiAgICAgICAgICByZW1vdmVCZWdpbiA9IHByZXZpb3VzLm9mZnNldCArIHByZXZpb3VzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVCZWdpbiA9IHBhcmVudC5vZmZzZXQgKyAxO1xuICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIG5leHQgPSBwYXJlbnQuY2hpbGRyZW5bMV07XG4gICAgICAgICAgICByZW1vdmVFbmQgPSBuZXh0Lm9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpdGhGb3JtYXR0aW5nKHRleHQsIHtcbiAgICAgICAgICBvZmZzZXQ6IHJlbW92ZUJlZ2luLFxuICAgICAgICAgIGxlbmd0aDogcmVtb3ZlRW5kIC0gcmVtb3ZlQmVnaW4sXG4gICAgICAgICAgY29udGVudDogXCJcIlxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB3aXRoRm9ybWF0dGluZyh0ZXh0LCB7XG4gICAgICAgICAgb2Zmc2V0OiBleGlzdGluZy5vZmZzZXQsXG4gICAgICAgICAgbGVuZ3RoOiBleGlzdGluZy5sZW5ndGgsXG4gICAgICAgICAgY29udGVudDogSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbmV3UHJvcGVydHkgPSBcIlwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShsYXN0U2VnbWVudCksIFwiOiBcIikuY29uY2F0KEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICB2YXIgaW5kZXggPSBvcHRpb25zLmdldEluc2VydGlvbkluZGV4ID8gb3B0aW9ucy5nZXRJbnNlcnRpb25JbmRleChwYXJlbnQuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiBwLmNoaWxkcmVuWzBdLnZhbHVlO1xuICAgICAgfSkpIDogcGFyZW50LmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIHZhciBlZGl0O1xuICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICB2YXIgX3ByZXZpb3VzID0gcGFyZW50LmNoaWxkcmVuW2luZGV4IC0gMV07XG4gICAgICAgIGVkaXQgPSB7XG4gICAgICAgICAgb2Zmc2V0OiBfcHJldmlvdXMub2Zmc2V0ICsgX3ByZXZpb3VzLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgY29udGVudDogXCIsXCIgKyBuZXdQcm9wZXJ0eVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGVkaXQgPSB7XG4gICAgICAgICAgb2Zmc2V0OiBwYXJlbnQub2Zmc2V0ICsgMSxcbiAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgY29udGVudDogbmV3UHJvcGVydHlcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVkaXQgPSB7XG4gICAgICAgICAgb2Zmc2V0OiBwYXJlbnQub2Zmc2V0ICsgMSxcbiAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgY29udGVudDogbmV3UHJvcGVydHkgKyBcIixcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpdGhGb3JtYXR0aW5nKHRleHQsIGVkaXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJlbnQudHlwZSA9PT0gXCJhcnJheVwiICYmIHR5cGVvZiBsYXN0U2VnbWVudCA9PT0gXCJudW1iZXJcIiAmJiBBcnJheS5pc0FycmF5KHBhcmVudC5jaGlsZHJlbikpIHtcbiAgICB2YXIgaW5zZXJ0SW5kZXggPSBsYXN0U2VnbWVudDtcbiAgICBpZiAoaW5zZXJ0SW5kZXggPT09IC0xKSB7XG4gICAgICB2YXIgX25ld1Byb3BlcnR5ID0gXCJcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgIHZhciBfZWRpdDtcbiAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIF9lZGl0ID0ge1xuICAgICAgICAgIG9mZnNldDogcGFyZW50Lm9mZnNldCArIDEsXG4gICAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICAgIGNvbnRlbnQ6IF9uZXdQcm9wZXJ0eVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9wcmV2aW91czIgPSBwYXJlbnQuY2hpbGRyZW5bcGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgICBfZWRpdCA9IHtcbiAgICAgICAgICBvZmZzZXQ6IF9wcmV2aW91czIub2Zmc2V0ICsgX3ByZXZpb3VzMi5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICAgIGNvbnRlbnQ6IFwiLFwiICsgX25ld1Byb3BlcnR5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gd2l0aEZvcm1hdHRpbmcodGV4dCwgX2VkaXQsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IHZvaWQgMCAmJiBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID49IDApIHtcbiAgICAgIHZhciByZW1vdmFsSW5kZXggPSBsYXN0U2VnbWVudDtcbiAgICAgIHZhciB0b1JlbW92ZSA9IHBhcmVudC5jaGlsZHJlbltyZW1vdmFsSW5kZXhdO1xuICAgICAgdmFyIF9lZGl0MjtcbiAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIF9lZGl0MiA9IHtcbiAgICAgICAgICBvZmZzZXQ6IHBhcmVudC5vZmZzZXQgKyAxLFxuICAgICAgICAgIGxlbmd0aDogcGFyZW50Lmxlbmd0aCAtIDIsXG4gICAgICAgICAgY29udGVudDogXCJcIlxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSA9PT0gcmVtb3ZhbEluZGV4KSB7XG4gICAgICAgIHZhciBfcHJldmlvdXMzID0gcGFyZW50LmNoaWxkcmVuW3JlbW92YWxJbmRleCAtIDFdO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gX3ByZXZpb3VzMy5vZmZzZXQgKyBfcHJldmlvdXMzLmxlbmd0aDtcbiAgICAgICAgdmFyIHBhcmVudEVuZE9mZnNldCA9IHBhcmVudC5vZmZzZXQgKyBwYXJlbnQubGVuZ3RoO1xuICAgICAgICBfZWRpdDIgPSB7XG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgbGVuZ3RoOiBwYXJlbnRFbmRPZmZzZXQgLSAyIC0gb2Zmc2V0LFxuICAgICAgICAgIGNvbnRlbnQ6IFwiXCJcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9lZGl0MiA9IHtcbiAgICAgICAgICBvZmZzZXQ6IHRvUmVtb3ZlLm9mZnNldCxcbiAgICAgICAgICBsZW5ndGg6IHBhcmVudC5jaGlsZHJlbltyZW1vdmFsSW5kZXggKyAxXS5vZmZzZXQgLSB0b1JlbW92ZS5vZmZzZXQsXG4gICAgICAgICAgY29udGVudDogXCJcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpdGhGb3JtYXR0aW5nKHRleHQsIF9lZGl0Miwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICB2YXIgX2VkaXQzO1xuICAgICAgdmFyIF9uZXdQcm9wZXJ0eTIgPSBcIlwiLmNvbmNhdChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgaWYgKCFvcHRpb25zLmlzQXJyYXlJbnNlcnRpb24gJiYgcGFyZW50LmNoaWxkcmVuLmxlbmd0aCA+IGxhc3RTZWdtZW50KSB7XG4gICAgICAgIHZhciB0b01vZGlmeSA9IHBhcmVudC5jaGlsZHJlbltsYXN0U2VnbWVudF07XG4gICAgICAgIF9lZGl0MyA9IHtcbiAgICAgICAgICBvZmZzZXQ6IHRvTW9kaWZ5Lm9mZnNldCxcbiAgICAgICAgICBsZW5ndGg6IHRvTW9kaWZ5Lmxlbmd0aCxcbiAgICAgICAgICBjb250ZW50OiBfbmV3UHJvcGVydHkyXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHBhcmVudC5jaGlsZHJlbi5sZW5ndGggPT09IDAgfHwgbGFzdFNlZ21lbnQgPT09IDApIHtcbiAgICAgICAgX2VkaXQzID0ge1xuICAgICAgICAgIG9mZnNldDogcGFyZW50Lm9mZnNldCArIDEsXG4gICAgICAgICAgbGVuZ3RoOiAwLFxuICAgICAgICAgIGNvbnRlbnQ6IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggPT09IDAgPyBfbmV3UHJvcGVydHkyIDogX25ld1Byb3BlcnR5MiArIFwiLFwiXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX2luZGV4ID0gbGFzdFNlZ21lbnQgPiBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoID8gcGFyZW50LmNoaWxkcmVuLmxlbmd0aCA6IGxhc3RTZWdtZW50O1xuICAgICAgICB2YXIgX3ByZXZpb3VzNCA9IHBhcmVudC5jaGlsZHJlbltfaW5kZXggLSAxXTtcbiAgICAgICAgX2VkaXQzID0ge1xuICAgICAgICAgIG9mZnNldDogX3ByZXZpb3VzNC5vZmZzZXQgKyBfcHJldmlvdXM0Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGg6IDAsXG4gICAgICAgICAgY29udGVudDogXCIsXCIgKyBfbmV3UHJvcGVydHkyXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gd2l0aEZvcm1hdHRpbmcodGV4dCwgX2VkaXQzLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCBcIi5jb25jYXQodmFsdWUgPT09IHZvaWQgMCA/IFwicmVtb3ZlXCIgOiBvcHRpb25zLmlzQXJyYXlJbnNlcnRpb24gPyBcImluc2VydFwiIDogXCJtb2RpZnlcIiwgXCIgQXJyYXkgaW5kZXggXCIpLmNvbmNhdChpbnNlcnRJbmRleCwgXCIgYXMgbGVuZ3RoIGlzIG5vdCBzdWZmaWNpZW50XCIpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCBhZGQgXCIuY29uY2F0KHR5cGVvZiBsYXN0U2VnbWVudCAhPT0gXCJudW1iZXJcIiA/IFwiaW5kZXhcIiA6IFwicHJvcGVydHlcIiwgXCIgdG8gcGFyZW50IG9mIHR5cGUgXCIpLmNvbmNhdChwYXJlbnQudHlwZSkpO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoRm9ybWF0dGluZyh0ZXh0LCBlZGl0LCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucy5mb3JtYXR0aW5nT3B0aW9ucykge1xuICAgIHJldHVybiBbZWRpdF07XG4gIH1cbiAgdmFyIG5ld1RleHQgPSBhcHBseUVkaXQodGV4dCwgZWRpdCk7XG4gIHZhciBiZWdpbiA9IGVkaXQub2Zmc2V0O1xuICB2YXIgZW5kID0gZWRpdC5vZmZzZXQgKyBlZGl0LmNvbnRlbnQubGVuZ3RoO1xuICBpZiAoZWRpdC5sZW5ndGggPT09IDAgfHwgZWRpdC5jb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgIHdoaWxlIChiZWdpbiA+IDAgJiYgIWlzRU9MKG5ld1RleHQsIGJlZ2luIC0gMSkpIHtcbiAgICAgIGJlZ2luLS07XG4gICAgfVxuICAgIHdoaWxlIChlbmQgPCBuZXdUZXh0Lmxlbmd0aCAmJiAhaXNFT0wobmV3VGV4dCwgZW5kKSkge1xuICAgICAgZW5kKys7XG4gICAgfVxuICB9XG4gIHZhciBlZGl0cyA9IGZvcm1hdChuZXdUZXh0LCB7XG4gICAgb2Zmc2V0OiBiZWdpbixcbiAgICBsZW5ndGg6IGVuZCAtIGJlZ2luXG4gIH0sIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucy5mb3JtYXR0aW5nT3B0aW9ucyksIHt9LCB7XG4gICAga2VlcExpbmVzOiBmYWxzZVxuICB9KSk7XG4gIGZvciAodmFyIGkgPSBlZGl0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBlZGl0MiA9IGVkaXRzW2ldO1xuICAgIG5ld1RleHQgPSBhcHBseUVkaXQobmV3VGV4dCwgZWRpdDIpO1xuICAgIGJlZ2luID0gTWF0aC5taW4oYmVnaW4sIGVkaXQyLm9mZnNldCk7XG4gICAgZW5kID0gTWF0aC5tYXgoZW5kLCBlZGl0Mi5vZmZzZXQgKyBlZGl0Mi5sZW5ndGgpO1xuICAgIGVuZCArPSBlZGl0Mi5jb250ZW50Lmxlbmd0aCAtIGVkaXQyLmxlbmd0aDtcbiAgfVxuICB2YXIgZWRpdExlbmd0aCA9IHRleHQubGVuZ3RoIC0gKG5ld1RleHQubGVuZ3RoIC0gZW5kKSAtIGJlZ2luO1xuICByZXR1cm4gW3tcbiAgICBvZmZzZXQ6IGJlZ2luLFxuICAgIGxlbmd0aDogZWRpdExlbmd0aCxcbiAgICBjb250ZW50OiBuZXdUZXh0LnN1YnN0cmluZyhiZWdpbiwgZW5kKVxuICB9XTtcbn1cbmZ1bmN0aW9uIGFwcGx5RWRpdCh0ZXh0LCBlZGl0KSB7XG4gIHJldHVybiB0ZXh0LnN1YnN0cmluZygwLCBlZGl0Lm9mZnNldCkgKyBlZGl0LmNvbnRlbnQgKyB0ZXh0LnN1YnN0cmluZyhlZGl0Lm9mZnNldCArIGVkaXQubGVuZ3RoKTtcbn1cbnZhciBjcmVhdGVTY2FubmVyMiA9IGNyZWF0ZVNjYW5uZXI7XG52YXIgU2NhbkVycm9yO1xuKGZ1bmN0aW9uIChTY2FuRXJyb3IyKSB7XG4gIFNjYW5FcnJvcjJbU2NhbkVycm9yMltcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICBTY2FuRXJyb3IyW1NjYW5FcnJvcjJbXCJVbmV4cGVjdGVkRW5kT2ZDb21tZW50XCJdID0gMV0gPSBcIlVuZXhwZWN0ZWRFbmRPZkNvbW1lbnRcIjtcbiAgU2NhbkVycm9yMltTY2FuRXJyb3IyW1wiVW5leHBlY3RlZEVuZE9mU3RyaW5nXCJdID0gMl0gPSBcIlVuZXhwZWN0ZWRFbmRPZlN0cmluZ1wiO1xuICBTY2FuRXJyb3IyW1NjYW5FcnJvcjJbXCJVbmV4cGVjdGVkRW5kT2ZOdW1iZXJcIl0gPSAzXSA9IFwiVW5leHBlY3RlZEVuZE9mTnVtYmVyXCI7XG4gIFNjYW5FcnJvcjJbU2NhbkVycm9yMltcIkludmFsaWRVbmljb2RlXCJdID0gNF0gPSBcIkludmFsaWRVbmljb2RlXCI7XG4gIFNjYW5FcnJvcjJbU2NhbkVycm9yMltcIkludmFsaWRFc2NhcGVDaGFyYWN0ZXJcIl0gPSA1XSA9IFwiSW52YWxpZEVzY2FwZUNoYXJhY3RlclwiO1xuICBTY2FuRXJyb3IyW1NjYW5FcnJvcjJbXCJJbnZhbGlkQ2hhcmFjdGVyXCJdID0gNl0gPSBcIkludmFsaWRDaGFyYWN0ZXJcIjtcbn0pKFNjYW5FcnJvciB8fCAoU2NhbkVycm9yID0ge30pKTtcbnZhciBTeW50YXhLaW5kO1xuKGZ1bmN0aW9uIChTeW50YXhLaW5kMikge1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIk9wZW5CcmFjZVRva2VuXCJdID0gMV0gPSBcIk9wZW5CcmFjZVRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQ2xvc2VCcmFjZVRva2VuXCJdID0gMl0gPSBcIkNsb3NlQnJhY2VUb2tlblwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIk9wZW5CcmFja2V0VG9rZW5cIl0gPSAzXSA9IFwiT3BlbkJyYWNrZXRUb2tlblwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIkNsb3NlQnJhY2tldFRva2VuXCJdID0gNF0gPSBcIkNsb3NlQnJhY2tldFRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQ29tbWFUb2tlblwiXSA9IDVdID0gXCJDb21tYVRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQ29sb25Ub2tlblwiXSA9IDZdID0gXCJDb2xvblRva2VuXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiTnVsbEtleXdvcmRcIl0gPSA3XSA9IFwiTnVsbEtleXdvcmRcIjtcbiAgU3ludGF4S2luZDJbU3ludGF4S2luZDJbXCJUcnVlS2V5d29yZFwiXSA9IDhdID0gXCJUcnVlS2V5d29yZFwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIkZhbHNlS2V5d29yZFwiXSA9IDldID0gXCJGYWxzZUtleXdvcmRcIjtcbiAgU3ludGF4S2luZDJbU3ludGF4S2luZDJbXCJTdHJpbmdMaXRlcmFsXCJdID0gMTBdID0gXCJTdHJpbmdMaXRlcmFsXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiTnVtZXJpY0xpdGVyYWxcIl0gPSAxMV0gPSBcIk51bWVyaWNMaXRlcmFsXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiTGluZUNvbW1lbnRUcml2aWFcIl0gPSAxMl0gPSBcIkxpbmVDb21tZW50VHJpdmlhXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiQmxvY2tDb21tZW50VHJpdmlhXCJdID0gMTNdID0gXCJCbG9ja0NvbW1lbnRUcml2aWFcIjtcbiAgU3ludGF4S2luZDJbU3ludGF4S2luZDJbXCJMaW5lQnJlYWtUcml2aWFcIl0gPSAxNF0gPSBcIkxpbmVCcmVha1RyaXZpYVwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIlRyaXZpYVwiXSA9IDE1XSA9IFwiVHJpdmlhXCI7XG4gIFN5bnRheEtpbmQyW1N5bnRheEtpbmQyW1wiVW5rbm93blwiXSA9IDE2XSA9IFwiVW5rbm93blwiO1xuICBTeW50YXhLaW5kMltTeW50YXhLaW5kMltcIkVPRlwiXSA9IDE3XSA9IFwiRU9GXCI7XG59KShTeW50YXhLaW5kIHx8IChTeW50YXhLaW5kID0ge30pKTtcbnZhciBnZXRMb2NhdGlvbjIgPSBnZXRMb2NhdGlvbjtcbnZhciBwYXJzZTIgPSBwYXJzZTtcbnZhciBwYXJzZVRyZWUyID0gcGFyc2VUcmVlO1xudmFyIGZpbmROb2RlQXRMb2NhdGlvbjIgPSBmaW5kTm9kZUF0TG9jYXRpb247XG52YXIgZmluZE5vZGVBdE9mZnNldDIgPSBmaW5kTm9kZUF0T2Zmc2V0O1xudmFyIGdldE5vZGVQYXRoMiA9IGdldE5vZGVQYXRoO1xudmFyIGdldE5vZGVWYWx1ZTIgPSBnZXROb2RlVmFsdWU7XG52YXIgdmlzaXQyID0gdmlzaXQ7XG52YXIgc3RyaXBDb21tZW50czIgPSBzdHJpcENvbW1lbnRzO1xudmFyIFBhcnNlRXJyb3JDb2RlO1xuKGZ1bmN0aW9uIChQYXJzZUVycm9yQ29kZTIpIHtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkludmFsaWRTeW1ib2xcIl0gPSAxXSA9IFwiSW52YWxpZFN5bWJvbFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiSW52YWxpZE51bWJlckZvcm1hdFwiXSA9IDJdID0gXCJJbnZhbGlkTnVtYmVyRm9ybWF0XCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJQcm9wZXJ0eU5hbWVFeHBlY3RlZFwiXSA9IDNdID0gXCJQcm9wZXJ0eU5hbWVFeHBlY3RlZFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiVmFsdWVFeHBlY3RlZFwiXSA9IDRdID0gXCJWYWx1ZUV4cGVjdGVkXCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJDb2xvbkV4cGVjdGVkXCJdID0gNV0gPSBcIkNvbG9uRXhwZWN0ZWRcIjtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkNvbW1hRXhwZWN0ZWRcIl0gPSA2XSA9IFwiQ29tbWFFeHBlY3RlZFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiQ2xvc2VCcmFjZUV4cGVjdGVkXCJdID0gN10gPSBcIkNsb3NlQnJhY2VFeHBlY3RlZFwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiQ2xvc2VCcmFja2V0RXhwZWN0ZWRcIl0gPSA4XSA9IFwiQ2xvc2VCcmFja2V0RXhwZWN0ZWRcIjtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkVuZE9mRmlsZUV4cGVjdGVkXCJdID0gOV0gPSBcIkVuZE9mRmlsZUV4cGVjdGVkXCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJJbnZhbGlkQ29tbWVudFRva2VuXCJdID0gMTBdID0gXCJJbnZhbGlkQ29tbWVudFRva2VuXCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJVbmV4cGVjdGVkRW5kT2ZDb21tZW50XCJdID0gMTFdID0gXCJVbmV4cGVjdGVkRW5kT2ZDb21tZW50XCI7XG4gIFBhcnNlRXJyb3JDb2RlMltQYXJzZUVycm9yQ29kZTJbXCJVbmV4cGVjdGVkRW5kT2ZTdHJpbmdcIl0gPSAxMl0gPSBcIlVuZXhwZWN0ZWRFbmRPZlN0cmluZ1wiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiVW5leHBlY3RlZEVuZE9mTnVtYmVyXCJdID0gMTNdID0gXCJVbmV4cGVjdGVkRW5kT2ZOdW1iZXJcIjtcbiAgUGFyc2VFcnJvckNvZGUyW1BhcnNlRXJyb3JDb2RlMltcIkludmFsaWRVbmljb2RlXCJdID0gMTRdID0gXCJJbnZhbGlkVW5pY29kZVwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiSW52YWxpZEVzY2FwZUNoYXJhY3RlclwiXSA9IDE1XSA9IFwiSW52YWxpZEVzY2FwZUNoYXJhY3RlclwiO1xuICBQYXJzZUVycm9yQ29kZTJbUGFyc2VFcnJvckNvZGUyW1wiSW52YWxpZENoYXJhY3RlclwiXSA9IDE2XSA9IFwiSW52YWxpZENoYXJhY3RlclwiO1xufSkoUGFyc2VFcnJvckNvZGUgfHwgKFBhcnNlRXJyb3JDb2RlID0ge30pKTtcbmZ1bmN0aW9uIHByaW50UGFyc2VFcnJvckNvZGUoY29kZSkge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gXCJJbnZhbGlkU3ltYm9sXCI7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIFwiSW52YWxpZE51bWJlckZvcm1hdFwiO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBcIlByb3BlcnR5TmFtZUV4cGVjdGVkXCI7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIFwiVmFsdWVFeHBlY3RlZFwiO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBcIkNvbG9uRXhwZWN0ZWRcIjtcbiAgICBjYXNlIDY6XG4gICAgICByZXR1cm4gXCJDb21tYUV4cGVjdGVkXCI7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIFwiQ2xvc2VCcmFjZUV4cGVjdGVkXCI7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIFwiQ2xvc2VCcmFja2V0RXhwZWN0ZWRcIjtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gXCJFbmRPZkZpbGVFeHBlY3RlZFwiO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gXCJJbnZhbGlkQ29tbWVudFRva2VuXCI7XG4gICAgY2FzZSAxMTpcbiAgICAgIHJldHVybiBcIlVuZXhwZWN0ZWRFbmRPZkNvbW1lbnRcIjtcbiAgICBjYXNlIDEyOlxuICAgICAgcmV0dXJuIFwiVW5leHBlY3RlZEVuZE9mU3RyaW5nXCI7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiBcIlVuZXhwZWN0ZWRFbmRPZk51bWJlclwiO1xuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gXCJJbnZhbGlkVW5pY29kZVwiO1xuICAgIGNhc2UgMTU6XG4gICAgICByZXR1cm4gXCJJbnZhbGlkRXNjYXBlQ2hhcmFjdGVyXCI7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiBcIkludmFsaWRDaGFyYWN0ZXJcIjtcbiAgfVxuICByZXR1cm4gXCI8dW5rbm93biBQYXJzZUVycm9yQ29kZT5cIjtcbn1cbmZ1bmN0aW9uIGZvcm1hdDIoZG9jdW1lbnRUZXh0LCByYW5nZSwgb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0KGRvY3VtZW50VGV4dCwgcmFuZ2UsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gbW9kaWZ5KHRleHQsIHBhdGgsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBzZXRQcm9wZXJ0eSh0ZXh0LCBwYXRoLCB2YWx1ZSwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBhcHBseUVkaXRzKHRleHQsIGVkaXRzKSB7XG4gIHZhciBzb3J0ZWRFZGl0cyA9IGVkaXRzLnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGlmZiA9IGEub2Zmc2V0IC0gYi5vZmZzZXQ7XG4gICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gZGlmZjtcbiAgfSk7XG4gIHZhciBsYXN0TW9kaWZpZWRPZmZzZXQgPSB0ZXh0Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IHNvcnRlZEVkaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGUgPSBzb3J0ZWRFZGl0c1tpXTtcbiAgICBpZiAoZS5vZmZzZXQgKyBlLmxlbmd0aCA8PSBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgIHRleHQgPSBhcHBseUVkaXQodGV4dCwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk92ZXJsYXBwaW5nIGVkaXRcIik7XG4gICAgfVxuICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IGUub2Zmc2V0O1xuICB9XG4gIHJldHVybiB0ZXh0O1xufVxuZXhwb3J0IHsgUGFyc2VFcnJvckNvZGUsIFNjYW5FcnJvciwgU3ludGF4S2luZCwgYXBwbHlFZGl0cywgY3JlYXRlU2Nhbm5lcjIgYXMgY3JlYXRlU2Nhbm5lciwgZmluZE5vZGVBdExvY2F0aW9uMiBhcyBmaW5kTm9kZUF0TG9jYXRpb24sIGZpbmROb2RlQXRPZmZzZXQyIGFzIGZpbmROb2RlQXRPZmZzZXQsIGZvcm1hdDIgYXMgZm9ybWF0LCBnZXRMb2NhdGlvbjIgYXMgZ2V0TG9jYXRpb24sIGdldE5vZGVQYXRoMiBhcyBnZXROb2RlUGF0aCwgZ2V0Tm9kZVZhbHVlMiBhcyBnZXROb2RlVmFsdWUsIG1vZGlmeSwgcGFyc2UyIGFzIHBhcnNlLCBwYXJzZVRyZWUyIGFzIHBhcnNlVHJlZSwgcHJpbnRQYXJzZUVycm9yQ29kZSwgc3RyaXBDb21tZW50czIgYXMgc3RyaXBDb21tZW50cywgdmlzaXQyIGFzIHZpc2l0IH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/formats/jsonc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js":
/*!*************************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/formats/yaml.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_SCHEMA: () => (/* binding */ CORE_SCHEMA),\n/* harmony export */   DEFAULT_SCHEMA: () => (/* binding */ DEFAULT_SCHEMA),\n/* harmony export */   FAILSAFE_SCHEMA: () => (/* binding */ FAILSAFE_SCHEMA),\n/* harmony export */   JSON_SCHEMA: () => (/* binding */ JSON_SCHEMA),\n/* harmony export */   Schema: () => (/* binding */ Schema),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   YAMLException: () => (/* binding */ YAMLException),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   dump: () => (/* binding */ dump),\n/* harmony export */   load: () => (/* binding */ load),\n/* harmony export */   loadAll: () => (/* binding */ loadAll),\n/* harmony export */   safeDump: () => (/* binding */ safeDump),\n/* harmony export */   safeLoad: () => (/* binding */ safeLoad),\n/* harmony export */   safeLoadAll: () => (/* binding */ safeLoadAll),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\nfunction isObject(subject) {\n  return _typeof(subject) === 'object' && subject !== null;\n}\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n  if (source) {\n    sourceKeys = Object.keys(source);\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction repeat(string, count) {\n  var result = '',\n    cycle;\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n  return result;\n}\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\nvar isNothing_1 = isNothing;\nvar isObject_1 = isObject;\nvar toArray_1 = toArray;\nvar repeat_1 = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1 = extend;\nvar common = {\n  isNothing: isNothing_1,\n  isObject: isObject_1,\n  toArray: toArray_1,\n  repeat: repeat_1,\n  isNegativeZero: isNegativeZero_1,\n  extend: extend_1\n};\nfunction formatError(exception, compact) {\n  var where = '',\n    message = exception.reason || '(unknown reason)';\n  if (!exception.mark) return message;\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n  return message + ' ' + where;\n}\nfunction YAMLException$1(reason, mark) {\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = new Error().stack || '';\n  }\n}\nYAMLException$1.prototype = Object.create(Error.prototype);\nYAMLException$1.prototype.constructor = YAMLException$1;\nYAMLException$1.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\nvar exception = YAMLException$1;\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length\n  };\n}\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n  if (!mark.buffer) return null;\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent !== 'number') options.indent = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [0];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n  while (match = re.exec(mark.buffer)) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n  var result = '',\n    i,\n    line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n' + result;\n  }\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  }\n  return result.replace(/\\n$/, '');\n}\nvar snippet = makeSnippet;\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\nfunction compileStyleAliases(map) {\n  var result = {};\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n  return result;\n}\nfunction Type$1(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n  this.options = options;\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.multi = options['multi'] || false;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\nvar type = Type$1;\nfunction compileList(schema, name) {\n  var result = [];\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {\n        newIndex = previousIndex;\n      }\n    });\n    result[newIndex] = currentType;\n  });\n  return result;\n}\nfunction compileMap() {\n  var result = {\n      scalar: {},\n      sequence: {},\n      mapping: {},\n      fallback: {},\n      multi: {\n        scalar: [],\n        sequence: [],\n        mapping: [],\n        fallback: []\n      }\n    },\n    index,\n    length;\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\nfunction Schema$1(definition) {\n  return this.extend(definition);\n}\nSchema$1.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n  if (definition instanceof type) {\n    explicit.push(definition);\n  } else if (Array.isArray(definition)) {\n    explicit = explicit.concat(definition);\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n  } else {\n    throw new exception('Schema.extend argument should be a Type, [ Type ], ' + 'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n  implicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n    if (type$1.loadKind && type$1.loadKind !== 'scalar') {\n      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n    if (type$1.multi) {\n      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n  explicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n  var result = Object.create(Schema$1.prototype);\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);\n  return result;\n};\nvar schema = Schema$1;\nvar str = new type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function construct(data) {\n    return data !== null ? data : '';\n  }\n});\nvar seq = new type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function construct(data) {\n    return data !== null ? data : [];\n  }\n});\nvar map = new type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function construct(data) {\n    return data !== null ? data : {};\n  }\n});\nvar failsafe = new schema({\n  explicit: [str, seq, map]\n});\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\nfunction constructYamlNull() {\n  return null;\n}\nfunction isNull(object) {\n  return object === null;\n}\nvar _null = new type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function canonical() {\n      return '~';\n    },\n    lowercase: function lowercase() {\n      return 'null';\n    },\n    uppercase: function uppercase() {\n      return 'NULL';\n    },\n    camelcase: function camelcase() {\n      return 'Null';\n    },\n    empty: function empty() {\n      return '';\n    }\n  },\n  defaultStyle: 'lowercase'\n});\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\nvar bool = new type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function lowercase(object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function uppercase(object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function camelcase(object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});\nfunction isHexCode(c) {\n  return 0x30 <= c && c <= 0x39 || 0x41 <= c && c <= 0x46 || 0x61 <= c && c <= 0x66;\n}\nfunction isOctCode(c) {\n  return 0x30 <= c && c <= 0x37;\n}\nfunction isDecCode(c) {\n  return 0x30 <= c && c <= 0x39;\n}\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n    index = 0,\n    hasDigits = false,\n    ch;\n  if (!max) return false;\n  ch = data[index];\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n  if (ch === '0') {\n    if (index + 1 === max) return true;\n    ch = data[++index];\n    if (ch === 'b') {\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n    if (ch === 'x') {\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n    if (ch === 'o') {\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n  }\n  if (ch === '_') return false;\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n  if (!hasDigits || ch === '_') return false;\n  return true;\n}\nfunction constructYamlInteger(data) {\n  var value = data,\n    sign = 1,\n    ch;\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n  ch = value[0];\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n  if (value === '0') return 0;\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n  return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\nvar int = new type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function binary(obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function octal(obj) {\n      return obj >= 0 ? '0o' + obj.toString(8) : '-0o' + obj.toString(8).slice(1);\n    },\n    decimal: function decimal(obj) {\n      return obj.toString(10);\n    },\n    hexadecimal: function hexadecimal(obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});\nvar YAML_FLOAT_PATTERN = new RegExp('^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + '|[-+]?\\\\.(?:inf|Inf|INF)' + '|\\\\.(?:nan|NaN|NAN))$');\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n  if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === '_') {\n    return false;\n  }\n  return true;\n}\nfunction constructYamlFloat(data) {\n  var value, sign;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\nfunction representYamlFloat(object, style) {\n  var res;\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n      case 'uppercase':\n        return '.NAN';\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n      case 'uppercase':\n        return '.INF';\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n      case 'uppercase':\n        return '-.INF';\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n  res = object.toString(10);\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\nvar float = new type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\nvar json = failsafe.extend({\n  implicit: [_null, bool, int, float]\n});\nvar core = json;\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + '-([0-9][0-9])' + '-([0-9][0-9])$');\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + '-([0-9][0-9]?)' + '-([0-9][0-9]?)' + '(?:[Tt]|[ \\\\t]+)' + '([0-9][0-9]?)' + ':([0-9][0-9])' + ':([0-9][0-9])' + '(?:\\\\.([0-9]*))?' + '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + '(?::([0-9][0-9]))?))?$');\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\nfunction constructYamlTimestamp(data) {\n  var match,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    fraction = 0,\n    delta = null,\n    tz_hour,\n    tz_minute,\n    date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error');\n  year = +match[1];\n  month = +match[2] - 1;\n  day = +match[3];\n  if (!match[4]) {\n    return new Date(Date.UTC(year, month, day));\n  }\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) {\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000;\n    if (match[9] === '-') delta = -delta;\n  }\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\nfunction representYamlTimestamp(object) {\n  return object.toISOString();\n}\nvar timestamp = new type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\nvar merge = new type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n    idx,\n    bitlen = 0,\n    max = data.length,\n    map = BASE64_MAP;\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n    if (code > 64) continue;\n    if (code < 0) return false;\n    bitlen += 6;\n  }\n  return bitlen % 8 === 0;\n}\nfunction constructYamlBinary(data) {\n  var idx,\n    tailbits,\n    input = data.replace(/[\\r\\n=]/g, ''),\n    max = input.length,\n    map = BASE64_MAP,\n    bits = 0,\n    result = [];\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  }\n  tailbits = max % 4 * 6;\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  }\n  return new Uint8Array(result);\n}\nfunction representYamlBinary(object) {\n  var result = '',\n    bits = 0,\n    idx,\n    tail,\n    max = object.length,\n    map = BASE64_MAP;\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n    bits = (bits << 8) + object[idx];\n  }\n  tail = max % 3;\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n  return result;\n}\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) === '[object Uint8Array]';\n}\nvar binary = new type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _toString$2 = Object.prototype.toString;\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n    index,\n    length,\n    pair,\n    pairKey,\n    pairHasKey,\n    object = data;\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString$2.call(pair) !== '[object Object]') return false;\n    for (pairKey in pair) {\n      if (_hasOwnProperty$3.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n  return true;\n}\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\nvar omap = new type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\nvar _toString$1 = Object.prototype.toString;\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n    length,\n    pair,\n    keys,\n    result,\n    object = data;\n  result = new Array(object.length);\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString$1.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n  return true;\n}\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n    length,\n    pair,\n    keys,\n    result,\n    object = data;\n  result = new Array(object.length);\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n  return result;\n}\nvar pairs = new type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n    object = data;\n  for (key in object) {\n    if (_hasOwnProperty$2.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n  return true;\n}\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\nvar set = new type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\nvar _default = core.extend({\n  implicit: [timestamp, merge],\n  explicit: [binary, omap, pairs, set]\n});\nvar _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction is_EOL(c) {\n  return c === 0x0A || c === 0x0D;\n}\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09 || c === 0x20;\n}\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09 || c === 0x20 || c === 0x0A || c === 0x0D;\n}\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C || c === 0x5B || c === 0x5D || c === 0x7B || c === 0x7D;\n}\nfunction fromHexCode(c) {\n  var lc;\n  if (0x30 <= c && c <= 0x39) {\n    return c - 0x30;\n  }\n  lc = c | 0x20;\n  if (0x61 <= lc && lc <= 0x66) {\n    return lc - 0x61 + 10;\n  }\n  return -1;\n}\nfunction escapedHexLen(c) {\n  if (c === 0x78) {\n    return 2;\n  }\n  if (c === 0x75) {\n    return 4;\n  }\n  if (c === 0x55) {\n    return 8;\n  }\n  return 0;\n}\nfunction fromDecimalCode(c) {\n  if (0x30 <= c && c <= 0x39) {\n    return c - 0x30;\n  }\n  return -1;\n}\nfunction simpleEscapeSequence(c) {\n  return c === 0x30 ? '\\x00' : c === 0x61 ? '\\x07' : c === 0x62 ? '\\x08' : c === 0x74 ? '\\x09' : c === 0x09 ? '\\x09' : c === 0x6E ? '\\x0A' : c === 0x76 ? '\\x0B' : c === 0x66 ? '\\x0C' : c === 0x72 ? '\\x0D' : c === 0x65 ? '\\x1B' : c === 0x20 ? ' ' : c === 0x22 ? '\\x22' : c === 0x2F ? '/' : c === 0x5C ? '\\x5C' : c === 0x4E ? '\\x85' : c === 0x5F ? '\\xA0' : c === 0x4C ? \"\\u2028\" : c === 0x50 ? \"\\u2029\" : '';\n}\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256);\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\nfunction State$1(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || _default;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.firstTabInLine = -1;\n  this.documents = [];\n}\nfunction generateError(state, message) {\n  var mark = {\n    name: state.filename,\n    buffer: state.input.slice(0, -1),\n    position: state.position,\n    line: state.line,\n    column: state.position - state.lineStart\n  };\n  mark.snippet = snippet(mark);\n  return new exception(message, mark);\n}\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n    handle = args[0];\n    prefix = args[1];\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n    if (_hasOwnProperty$1.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n    state.tagMap[handle] = prefix;\n  }\n};\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n  if (start < end) {\n    _result = state.input.slice(start, end);\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n    state.result += _result;\n  }\n}\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n  sourceKeys = Object.keys(source);\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n    if (!_hasOwnProperty$1.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {\n  var index, quantity;\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n      if (_typeof(keyNode) === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n  if (_typeof(keyNode) === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n  keyNode = String(keyNode);\n  if (_result === null) {\n    _result = {};\n  }\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n    delete overridableKeys[keyNode];\n  }\n  return _result;\n}\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x0A) {\n    state.position++;\n  } else if (ch === 0x0D) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n    ch = state.input.charCodeAt(state.position);\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09 && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n    if (allowComments && ch === 0x23) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A && ch !== 0x0D && ch !== 0);\n    }\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n      while (ch === 0x20) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n  return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n    ch;\n  ch = state.input.charCodeAt(_position);\n  if ((ch === 0x2D || ch === 0x2E) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n    following,\n    captureStart,\n    captureEnd,\n    hasPendingContent,\n    _line,\n    _lineStart,\n    _lineIndent,\n    _kind = state.kind,\n    _result = state.result,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 || ch === 0x26 || ch === 0x2A || ch === 0x21 || ch === 0x7C || ch === 0x3E || ch === 0x27 || ch === 0x22 || ch === 0x25 || ch === 0x40 || ch === 0x60) {\n    return false;\n  }\n  if (ch === 0x3F || ch === 0x2D) {\n    following = state.input.charCodeAt(state.position + 1);\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n  while (ch !== 0) {\n    if (ch === 0x3A) {\n      following = state.input.charCodeAt(state.position + 1);\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (ch === 0x23) {\n      preceding = state.input.charCodeAt(state.position - 1);\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n    ch = state.input.charCodeAt(++state.position);\n  }\n  captureSegment(state, captureStart, captureEnd, false);\n  if (state.result) {\n    return true;\n  }\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x27) {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n      if (ch === 0x27) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x22) {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (ch === 0x5C) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n    _line,\n    _lineStart,\n    _pos,\n    _tag = state.tag,\n    _result,\n    _anchor = state.anchor,\n    following,\n    terminator,\n    isPair,\n    isExplicitPair,\n    isMapping,\n    overridableKeys = Object.create(null),\n    keyNode,\n    keyTag,\n    valueNode,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x5B) {\n    terminator = 0x5D;\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B) {\n    terminator = 0x7D;\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(++state.position);\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C) {\n      throwError(state, \"expected the node content, but found ','\");\n    }\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n    if (ch === 0x3F) {\n      following = state.input.charCodeAt(state.position + 1);\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n    _line = state.line;\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x2C) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n    folding,\n    chomping = CHOMPING_CLIP,\n    didReadContent = false,\n    detectedIndent = false,\n    textIndent = nodeIndent,\n    emptyLines = 0,\n    atMoreIndented = false,\n    tmp,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x7C) {\n    folding = false;\n  } else if (ch === 0x3E) {\n    folding = true;\n  } else {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n    if (ch === 0x2B || ch === 0x2D) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = ch === 0x2B ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n    if (ch === 0x23) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && ch !== 0);\n    }\n  }\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n    if (state.lineIndent < textIndent) {\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          state.result += '\\n';\n        }\n      }\n      break;\n    }\n    if (folding) {\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          state.result += ' ';\n        }\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n    } else {\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    captureSegment(state, captureStart, state.position, false);\n  }\n  return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n    _tag = state.tag,\n    _anchor = state.anchor,\n    _result = [],\n    following,\n    detected = false,\n    ch;\n  if (state.firstTabInLine !== -1) return false;\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(state.position);\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n    if (ch !== 0x2D) {\n      break;\n    }\n    following = state.input.charCodeAt(state.position + 1);\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n    detected = true;\n    state.position++;\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n    allowCompact,\n    _line,\n    _keyLine,\n    _keyLineStart,\n    _keyPos,\n    _tag = state.tag,\n    _anchor = state.anchor,\n    _result = {},\n    overridableKeys = Object.create(null),\n    keyTag = null,\n    keyNode = null,\n    valueNode = null,\n    atExplicitKey = false,\n    detected = false,\n    ch;\n  if (state.firstTabInLine !== -1) return false;\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(state.position);\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line;\n    if ((ch === 0x3F || ch === 0x3A) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n      state.position += 1;\n      ch = following;\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        break;\n      }\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n        if (ch === 0x3A) {\n          ch = state.input.charCodeAt(++state.position);\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true;\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true;\n      }\n    }\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  }\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n  return detected;\n}\nfunction readTagProperty(state) {\n  var _position,\n    isVerbatim = false,\n    isNamed = false,\n    tagHandle,\n    tagName,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21) return false;\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n  ch = state.input.charCodeAt(++state.position);\n  if (ch === 0x3C) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (ch === 0x21) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n  _position = state.position;\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E);\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n    tagName = state.input.slice(_position, state.position);\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n  return true;\n}\nfunction readAnchorProperty(state) {\n  var _position, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26) return false;\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\nfunction readAlias(state) {\n  var _position, alias, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n  alias = state.input.slice(_position, state.position);\n  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n    allowBlockScalars,\n    allowBlockCollections,\n    indentStatus = 1,\n    atNewLine = false,\n    hasContent = false,\n    typeIndex,\n    typeQuantity,\n    typeList,\n    type,\n    flowIndent,\n    blockIndent;\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n    blockIndent = state.position - state.lineStart;\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n  } else if (state.tag === '?') {\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n      if (type.resolve(state.result)) {\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n    if (!type.resolve(state.result, state.tag)) {\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\nfunction readDocument(state) {\n  var documentStart = state.position,\n    _position,\n    directiveName,\n    directiveArgs,\n    hasDirectives = false,\n    ch;\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n    if (state.lineIndent > 0 || ch !== 0x25) {\n      break;\n    }\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n      if (ch === 0x23) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n      if (is_EOL(ch)) break;\n      _position = state.position;\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n    if (ch !== 0) readLineBreak(state);\n    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n  skipSeparationSpace(state, true, -1);\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D && state.input.charCodeAt(state.position + 1) === 0x2D && state.input.charCodeAt(state.position + 2) === 0x2D) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n  state.documents.push(state.result);\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n  if (input.length !== 0) {\n    if (input.charCodeAt(input.length - 1) !== 0x0A && input.charCodeAt(input.length - 1) !== 0x0D) {\n      input += '\\n';\n    }\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n  var state = new State$1(input, options);\n  var nullpos = input.indexOf('\\0');\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  }\n  state.input += '\\0';\n  while (state.input.charCodeAt(state.position) === 0x20) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n  return state.documents;\n}\nfunction loadAll$1(input, iterator, options) {\n  if (iterator !== null && _typeof(iterator) === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n  var documents = loadDocuments(input, options);\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\nfunction load$1(input, options) {\n  var documents = loadDocuments(input, options);\n  if (documents.length === 0) {\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new exception('expected a single document in the stream, but found more');\n}\nvar loadAll_1 = loadAll$1;\nvar load_1 = load$1;\nvar loader = {\n  loadAll: loadAll_1,\n  load: load_1\n};\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_BOM = 0xFEFF;\nvar CHAR_TAB = 0x09;\nvar CHAR_LINE_FEED = 0x0A;\nvar CHAR_CARRIAGE_RETURN = 0x0D;\nvar CHAR_SPACE = 0x20;\nvar CHAR_EXCLAMATION = 0x21;\nvar CHAR_DOUBLE_QUOTE = 0x22;\nvar CHAR_SHARP = 0x23;\nvar CHAR_PERCENT = 0x25;\nvar CHAR_AMPERSAND = 0x26;\nvar CHAR_SINGLE_QUOTE = 0x27;\nvar CHAR_ASTERISK = 0x2A;\nvar CHAR_COMMA = 0x2C;\nvar CHAR_MINUS = 0x2D;\nvar CHAR_COLON = 0x3A;\nvar CHAR_EQUALS = 0x3D;\nvar CHAR_GREATER_THAN = 0x3E;\nvar CHAR_QUESTION = 0x3F;\nvar CHAR_COMMERCIAL_AT = 0x40;\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\nvar CHAR_GRAVE_ACCENT = 0x60;\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\nvar CHAR_VERTICAL_LINE = 0x7C;\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n    result[tag] = style;\n  }\n  return result;\n}\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\nvar QUOTING_TYPE_SINGLE = 1,\n  QUOTING_TYPE_DOUBLE = 2;\nfunction State(options) {\n  this.schema = options['schema'] || _default;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.quotingType = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes = options['forceQuotes'] || false;\n  this.replacer = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n    position = 0,\n    next = -1,\n    result = '',\n    line,\n    length = string.length;\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n  return result;\n}\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;\n}\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n}\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;\n}\nfunction isPlainSafeFirst(c) {\n  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n}\nfunction isPlainSafeLast(c) {\n  return !isWhitespace(c) && c !== CHAR_COLON;\n}\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos),\n    second;\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n}\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\nvar STYLE_PLAIN = 1,\n  STYLE_SINGLE = 2,\n  STYLE_LITERAL = 3,\n  STYLE_FOLDED = 4,\n  STYLE_DOUBLE = 5;\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false;\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1;\n  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));\n  if (singleLineOnly || forceQuotes) {\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n  } else {\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  }\n  if (!hasLineBreak && !hasFoldableLine) {\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"' + string + '\"' : \"'\" + string + \"'\";\n      }\n    }\n    var indent = state.indent * Math.max(1, level);\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string) + '\"';\n      default:\n        throw new exception('impossible error: invalid scalar style');\n    }\n  }();\n}\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n}\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n}\nfunction foldString(string, width) {\n  var lineRe = /(\\n+)([^\\n]*)/g;\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }();\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n  var match;\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n      line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n  return result;\n}\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line;\n  var breakRe = / [^ ]/g;\n  var match;\n  var start = 0,\n    end,\n    curr = 0,\n    next = 0;\n  var result = '';\n  while (match = breakRe.exec(line)) {\n    next = match.index;\n    if (next - start > width) {\n      end = curr > start ? curr : next;\n      result += '\\n' + line.slice(start, end);\n      start = end + 1;\n    }\n    curr = next;\n  }\n  result += '\\n';\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n  return result.slice(1);\n}\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n  return result;\n}\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n    _tag = state.tag,\n    index,\n    length,\n    value;\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n    if (writeNode(state, level, value, false, false) || typeof value === 'undefined' && writeNode(state, level, null, false, false)) {\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n    _tag = state.tag,\n    index,\n    length,\n    value;\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === 'undefined' && writeNode(state, level + 1, null, true, true, false, true)) {\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n      _result += state.dump;\n    }\n  }\n  state.tag = _tag;\n  state.dump = _result || '[]';\n}\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n    _tag = state.tag,\n    objectKeyList = Object.keys(object),\n    index,\n    length,\n    objectKey,\n    objectValue,\n    pairBuffer;\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue;\n    }\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue;\n    }\n    pairBuffer += state.dump;\n    _result += pairBuffer;\n  }\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n    _tag = state.tag,\n    objectKeyList = Object.keys(object),\n    index,\n    length,\n    objectKey,\n    objectValue,\n    explicitPair,\n    pairBuffer;\n  if (state.sortKeys === true) {\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    throw new exception('sortKeys must be a boolean or a function');\n  }\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue;\n    }\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n    pairBuffer += state.dump;\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue;\n    }\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n    pairBuffer += state.dump;\n    _result += pairBuffer;\n  }\n  state.tag = _tag;\n  state.dump = _result || '{}';\n}\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || _typeof(object) === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new exception('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n        state.dump = _result;\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n  var type = _toString.call(state.dump);\n  var inblock = block;\n  var tagStr;\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n    duplicateIndex,\n    duplicate;\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && state.dump.length !== 0) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new exception('unacceptable kind of an object to dump ' + type);\n    }\n    if (state.tag !== null && state.tag !== '?') {\n      tagStr = encodeURI(state.tag[0] === '!' ? state.tag.slice(1) : state.tag).replace(/!/g, '%21');\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n  return true;\n}\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n    duplicatesIndexes = [],\n    index,\n    length;\n  inspectNode(object, objects, duplicatesIndexes);\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n  if (object !== null && _typeof(object) === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\nfunction dump$1(input, options) {\n  options = options || {};\n  var state = new State(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  var value = input;\n  if (state.replacer) {\n    value = state.replacer.call({\n      '': value\n    }, '', value);\n  }\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n  return '';\n}\nvar dump_1 = dump$1;\nvar dumper = {\n  dump: dump_1\n};\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\nvar Type = type;\nvar Schema = schema;\nvar FAILSAFE_SCHEMA = failsafe;\nvar JSON_SCHEMA = json;\nvar CORE_SCHEMA = core;\nvar DEFAULT_SCHEMA = _default;\nvar load = loader.load;\nvar loadAll = loader.loadAll;\nvar dump = dumper.dump;\nvar YAMLException = exception;\nvar types = {\n  binary: binary,\n  float: float,\n  map: map,\n  null: _null,\n  pairs: pairs,\n  set: set,\n  timestamp: timestamp,\n  bool: bool,\n  int: int,\n  merge: merge,\n  omap: omap,\n  seq: seq,\n  str: str\n};\nvar safeLoad = renamed('safeLoad', 'load');\nvar safeLoadAll = renamed('safeLoadAll', 'loadAll');\nvar safeDump = renamed('safeDump', 'dump');\nvar jsYaml = {\n  Type: Type,\n  Schema: Schema,\n  FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n  JSON_SCHEMA: JSON_SCHEMA,\n  CORE_SCHEMA: CORE_SCHEMA,\n  DEFAULT_SCHEMA: DEFAULT_SCHEMA,\n  load: load,\n  loadAll: loadAll,\n  dump: dump,\n  YAMLException: YAMLException,\n  types: types,\n  safeLoad: safeLoad,\n  safeLoadAll: safeLoadAll,\n  safeDump: safeDump\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jsYaml);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/index.js ***!
  \******************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/utils.js\");\n/* harmony import */ var _readFile_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./readFile.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/readFile.js\");\n/* harmony import */ var _writeFile_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./writeFile.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/writeFile.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_readFile_js__WEBPACK_IMPORTED_MODULE_1__, _writeFile_js__WEBPACK_IMPORTED_MODULE_2__]);\n([_readFile_js__WEBPACK_IMPORTED_MODULE_1__, _writeFile_js__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\nvar getDefaults = function getDefaults() {\n  return {\n    loadPath: '/locales/{{lng}}/{{ns}}.json',\n    addPath: '/locales/{{lng}}/{{ns}}.missing.json',\n    ident: 2,\n    parse: JSON.parse,\n    stringify: JSON.stringify\n  };\n};\nvar Backend = function () {\n  function Backend(services) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, Backend);\n    this.services = services;\n    this.options = options;\n    this.allOptions = allOptions;\n    this.type = 'backend';\n    this.init(services, options, allOptions);\n  }\n  return _createClass(Backend, [{\n    key: \"init\",\n    value: function init(services) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.services = services;\n      this.options = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.defaults)(options, this.options || {}, getDefaults());\n      this.allOptions = allOptions;\n      this.queuedWrites = {};\n      this.debouncedWrite = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.write, 250);\n    }\n  }, {\n    key: \"read\",\n    value: function read(language, namespace, callback) {\n      var _this = this;\n      var loadPath = this.options.loadPath;\n      if (typeof this.options.loadPath === 'function') {\n        loadPath = this.options.loadPath(language, namespace);\n      }\n      var filename = this.services.interpolator.interpolate(loadPath, {\n        lng: language,\n        ns: namespace\n      });\n      if (this.allOptions.initAsync === false || this.allOptions.initImmediate === false) {\n        try {\n          var _readFileSync = (0,_readFile_js__WEBPACK_IMPORTED_MODULE_1__.readFileSync)(filename, this.options),\n            data = _readFileSync.data,\n            stat = _readFileSync.stat;\n          var timestamp = stat && stat.mtime && stat.mtime.getTime();\n          if (this.options.expirationTime && timestamp && timestamp + this.options.expirationTime < Date.now()) {\n            this.removeFile(language, namespace);\n            return callback(new Error('File expired!'), false);\n          }\n          callback(null, data, timestamp);\n        } catch (err) {\n          callback(err, false);\n        }\n        return;\n      }\n      (0,_readFile_js__WEBPACK_IMPORTED_MODULE_1__.readFile)(filename, this.options).then(function (_ref) {\n        var data = _ref.data,\n          stat = _ref.stat;\n        var timestamp = stat && stat.mtime && stat.mtime.getTime();\n        if (_this.options.expirationTime && timestamp && timestamp + _this.options.expirationTime < Date.now()) {\n          _this.removeFile(language, namespace);\n          return callback(new Error('File expired!'), false);\n        }\n        callback(null, data, timestamp);\n      }).catch(function (err) {\n        return callback(err, false);\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(languages, namespace, key, fallbackValue, callback) {\n      var _this2 = this;\n      if (typeof callback !== 'function') callback = function callback() {};\n      if (typeof languages === 'string') languages = [languages];\n      var todo = languages.length;\n      var done = function done() {\n        if (! --todo) callback();\n      };\n      languages.forEach(function (lng) {\n        _this2.queue.call(_this2, lng, namespace, key, fallbackValue, done);\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function save(language, namespace, data, callback) {\n      var _this3 = this;\n      if (!callback) callback = function callback() {};\n      var keys = Object.keys(data);\n      var todo = keys.length;\n      var done = function done() {\n        if (! --todo) callback();\n      };\n      keys.forEach(function (key) {\n        _this3.queue.call(_this3, language, namespace, key, data[key], done);\n      });\n    }\n  }, {\n    key: \"removeFile\",\n    value: function removeFile(language, namespace) {\n      var addPath = this.options.addPath;\n      if (typeof this.options.addPath === 'function') {\n        addPath = this.options.addPath(language, namespace);\n      }\n      var filename = this.services.interpolator.interpolate(addPath, {\n        lng: language,\n        ns: namespace\n      });\n      (0,_writeFile_js__WEBPACK_IMPORTED_MODULE_2__.removeFile)(filename, this.options).then(function () {}).catch(function () {});\n    }\n  }, {\n    key: \"write\",\n    value: function write() {\n      for (var lng in this.queuedWrites) {\n        var namespaces = this.queuedWrites[lng];\n        if (lng !== 'locks') {\n          for (var ns in namespaces) {\n            this.writeFile(lng, ns);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"writeFile\",\n    value: function writeFile(lng, namespace) {\n      var _this4 = this;\n      var lock = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPath)(this.queuedWrites, ['locks', lng, namespace]);\n      if (lock) return;\n      var addPath = this.options.addPath;\n      if (typeof this.options.addPath === 'function') {\n        addPath = this.options.addPath(lng, namespace);\n      }\n      var filename = this.services.interpolator.interpolate(addPath, {\n        lng: lng,\n        ns: namespace\n      });\n      var missings = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getPath)(this.queuedWrites, [lng, namespace]);\n      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(this.queuedWrites, [lng, namespace], []);\n      if (missings.length) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(this.queuedWrites, ['locks', lng, namespace], true);\n        var proceed = function proceed(_ref2) {\n          var data = _ref2.data;\n          missings.forEach(function (missing) {\n            var path = _this4.allOptions.keySeparator === false ? [missing.key] : missing.key.split(_this4.allOptions.keySeparator || '.');\n            try {\n              (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(data, path, missing.fallbackValue);\n            } catch (e) {\n              if (path.length < 2 || !e.message || e.message.indexOf('Cannot create property') < 0) throw e;\n              (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(data, [missing.key], missing.fallbackValue);\n            }\n          });\n          var proceedWrite = function proceedWrite() {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setPath)(_this4.queuedWrites, ['locks', lng, namespace], false);\n            missings.forEach(function (missing) {\n              if (missing.callback) missing.callback();\n            });\n            _this4.debouncedWrite();\n          };\n          (0,_writeFile_js__WEBPACK_IMPORTED_MODULE_2__.writeFile)(filename, data, _this4.options).then(proceedWrite).catch(proceedWrite);\n        };\n        (0,_readFile_js__WEBPACK_IMPORTED_MODULE_1__.readFile)(filename, this.options).then(proceed).catch(function () {\n          return proceed({\n            data: {}\n          });\n        });\n      }\n    }\n  }, {\n    key: \"queue\",\n    value: function queue(lng, namespace, key, fallbackValue, callback) {\n      (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pushPath)(this.queuedWrites, [lng, namespace], {\n        key: key,\n        fallbackValue: fallbackValue || '',\n        callback: callback\n      });\n      this.debouncedWrite();\n    }\n  }]);\n}();\nBackend.type = 'backend';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Backend);\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/readFile.js":
/*!*********************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/readFile.js ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readFile: () => (/* binding */ readFile),\n/* harmony export */   readFileSync: () => (/* binding */ readFileSync)\n/* harmony export */ });\n/* harmony import */ var _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats/json5.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js\");\n/* harmony import */ var _formats_jsonc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats/jsonc.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/jsonc.js\");\n/* harmony import */ var _formats_yaml_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formats/yaml.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js\");\n/* harmony import */ var _extname_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extname.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/extname.js\");\n\n\n\n\nvar isDeno = typeof Deno !== 'undefined';\nvar isBun = typeof Bun !== 'undefined';\nvar YAML = typeof _formats_yaml_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] !== 'undefined' && _formats_yaml_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].load ? _formats_yaml_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : undefined;\nvar fs = !isDeno ? (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs */ \"node:fs\", 19))).default : undefined;\nvar evalAlias = eval;\nvar readFileInNodeSync = function readFileInNodeSync(filename) {\n  var data = fs.readFileSync(filename, 'utf8');\n  var stat;\n  try {\n    stat = fs.statSync(filename);\n  } catch (e) {}\n  return {\n    data: data,\n    stat: stat\n  };\n};\nvar readFileInNode = function readFileInNode(filename) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(filename, 'utf8', function (err, data) {\n      if (err) return reject(err);\n      fs.stat(filename, function (err, stat) {\n        if (err) return resolve({\n          data: data\n        });\n        return resolve({\n          data: data,\n          stat: stat\n        });\n      });\n    });\n  });\n};\nvar readFileInDenoSync = function readFileInDenoSync(filename) {\n  var decoder = new TextDecoder('utf-8');\n  var d = Deno.readFileSync(filename);\n  var data = decoder.decode(d);\n  var stat;\n  try {\n    stat = Deno.statSync(filename);\n  } catch (e) {}\n  return {\n    data: data,\n    stat: stat\n  };\n};\nvar readFileInDeno = function readFileInDeno(filename) {\n  return new Promise(function (resolve, reject) {\n    var decoder = new TextDecoder('utf-8');\n    Deno.readFile(filename).then(function (d) {\n      var data = decoder.decode(d);\n      Deno.stat(filename).then(function (stat) {\n        return resolve({\n          data: data,\n          stat: stat\n        });\n      }).catch(function () {\n        return resolve({\n          data: data\n        });\n      });\n    }).catch(reject);\n  });\n};\nvar readFileInBunSync = readFileInNodeSync;\nvar readFileInBun = readFileInNode;\nvar replaceLast = function replaceLast(str, find, replace) {\n  var index = str.lastIndexOf(find);\n  if (index > -1) {\n    return str.substring(0, index) + replace + str.substring(index + find.length);\n  }\n  return str.toString();\n};\nvar parseData = function parseData(extension, data, options) {\n  data = data.replace(/^\\uFEFF/, '');\n  var result = {};\n  switch (extension) {\n    case '.js':\n    case '.ts':\n      if (typeof module === 'undefined') {\n        if (data.indexOf('exports') > -1) {\n          data = \"(\".concat(replaceLast(data.substring(data.indexOf('=') + 1), '};', ''), \")\");\n        } else if (data.indexOf('export default ') > -1) {\n          data = \"(\".concat(replaceLast(data.substring(data.indexOf('export default ') + 15), '};', ''), \")\");\n        }\n      }\n      result = evalAlias(data);\n      break;\n    case '.json5':\n      result = _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(data);\n      break;\n    case '.jsonc':\n      result = (0,_formats_jsonc_js__WEBPACK_IMPORTED_MODULE_1__.parse)(data);\n      break;\n    case '.yml':\n    case '.yaml':\n      result = YAML.load(data);\n      break;\n    default:\n      result = options.parse(data);\n  }\n  return result;\n};\nfunction readFileSync(filename, options) {\n  var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(filename);\n  var data, stat;\n  if (isBun) {\n    var ret = readFileInBunSync(filename);\n    data = ret.data;\n    stat = ret.stat;\n  } else if (isDeno) {\n    var _ret = readFileInDenoSync(filename);\n    data = _ret.data;\n    stat = _ret.stat;\n  } else {\n    var _ret2 = readFileInNodeSync(filename);\n    data = _ret2.data;\n    stat = _ret2.stat;\n  }\n  return {\n    data: parseData(ext, data, options),\n    stat: stat\n  };\n}\nfunction readFile(filename) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    parse: JSON.parse\n  };\n  var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(filename);\n  var fn = isBun ? readFileInBun : isDeno ? readFileInDeno : readFileInNode;\n  return new Promise(function (resolve, reject) {\n    fn(filename).then(function (_ref) {\n      var data = _ref.data,\n        stat = _ref.stat;\n      try {\n        var ret = parseData(ext, data, options);\n        resolve({\n          data: ret,\n          stat: stat\n        });\n      } catch (err) {\n        err.message = 'error parsing ' + filename + ': ' + err.message;\n        reject(err);\n      }\n    }).catch(reject);\n  });\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS9yZWFkRmlsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXVDO0FBQ2tCO0FBQ2xCO0FBQ0o7QUFDbkM7QUFDQTtBQUNBLGtCQUFrQix3REFBTSxvQkFBb0IsNkRBQVcsR0FBRyx3REFBTTtBQUNoRSwwQkFBMEIsb0hBQWlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0Y7QUFDbEYsVUFBVTtBQUNWLGlHQUFpRztBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5REFBSztBQUNwQjtBQUNBO0FBQ0EsZUFBZSx3REFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx1REFBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFlBQVksdURBQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NsYXplLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtZnMtYmFja2VuZC9lc20vcmVhZEZpbGUuanM/YTJmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNPTjUgZnJvbSAnLi9mb3JtYXRzL2pzb241LmpzJztcbmltcG9ydCB7IHBhcnNlIGFzIHBhcnNlSlNPTkMgfSBmcm9tICcuL2Zvcm1hdHMvanNvbmMuanMnO1xuaW1wb3J0IGpzWWFtbCBmcm9tICcuL2Zvcm1hdHMveWFtbC5qcyc7XG5pbXBvcnQgZXh0bmFtZSBmcm9tICcuL2V4dG5hbWUuanMnO1xudmFyIGlzRGVubyA9IHR5cGVvZiBEZW5vICE9PSAndW5kZWZpbmVkJztcbnZhciBpc0J1biA9IHR5cGVvZiBCdW4gIT09ICd1bmRlZmluZWQnO1xudmFyIFlBTUwgPSB0eXBlb2YganNZYW1sICE9PSAndW5kZWZpbmVkJyAmJiBqc1lhbWwubG9hZCA/IGpzWWFtbCA6IHVuZGVmaW5lZDtcbnZhciBmcyA9ICFpc0Rlbm8gPyAoYXdhaXQgaW1wb3J0KCdub2RlOmZzJykpLmRlZmF1bHQgOiB1bmRlZmluZWQ7XG52YXIgZXZhbEFsaWFzID0gZXZhbDtcbnZhciByZWFkRmlsZUluTm9kZVN5bmMgPSBmdW5jdGlvbiByZWFkRmlsZUluTm9kZVN5bmMoZmlsZW5hbWUpIHtcbiAgdmFyIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGY4Jyk7XG4gIHZhciBzdGF0O1xuICB0cnkge1xuICAgIHN0YXQgPSBmcy5zdGF0U3luYyhmaWxlbmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiB7XG4gICAgZGF0YTogZGF0YSxcbiAgICBzdGF0OiBzdGF0XG4gIH07XG59O1xudmFyIHJlYWRGaWxlSW5Ob2RlID0gZnVuY3Rpb24gcmVhZEZpbGVJbk5vZGUoZmlsZW5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmcy5yZWFkRmlsZShmaWxlbmFtZSwgJ3V0ZjgnLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICBmcy5zdGF0KGZpbGVuYW1lLCBmdW5jdGlvbiAoZXJyLCBzdGF0KSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh7XG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBzdGF0OiBzdGF0XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcbnZhciByZWFkRmlsZUluRGVub1N5bmMgPSBmdW5jdGlvbiByZWFkRmlsZUluRGVub1N5bmMoZmlsZW5hbWUpIHtcbiAgdmFyIGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04Jyk7XG4gIHZhciBkID0gRGVuby5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpO1xuICB2YXIgZGF0YSA9IGRlY29kZXIuZGVjb2RlKGQpO1xuICB2YXIgc3RhdDtcbiAgdHJ5IHtcbiAgICBzdGF0ID0gRGVuby5zdGF0U3luYyhmaWxlbmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiB7XG4gICAgZGF0YTogZGF0YSxcbiAgICBzdGF0OiBzdGF0XG4gIH07XG59O1xudmFyIHJlYWRGaWxlSW5EZW5vID0gZnVuY3Rpb24gcmVhZEZpbGVJbkRlbm8oZmlsZW5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKTtcbiAgICBEZW5vLnJlYWRGaWxlKGZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uIChkKSB7XG4gICAgICB2YXIgZGF0YSA9IGRlY29kZXIuZGVjb2RlKGQpO1xuICAgICAgRGVuby5zdGF0KGZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uIChzdGF0KSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIHN0YXQ6IHN0YXRcbiAgICAgICAgfSk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgfSk7XG59O1xudmFyIHJlYWRGaWxlSW5CdW5TeW5jID0gcmVhZEZpbGVJbk5vZGVTeW5jO1xudmFyIHJlYWRGaWxlSW5CdW4gPSByZWFkRmlsZUluTm9kZTtcbnZhciByZXBsYWNlTGFzdCA9IGZ1bmN0aW9uIHJlcGxhY2VMYXN0KHN0ciwgZmluZCwgcmVwbGFjZSkge1xuICB2YXIgaW5kZXggPSBzdHIubGFzdEluZGV4T2YoZmluZCk7XG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgaW5kZXgpICsgcmVwbGFjZSArIHN0ci5zdWJzdHJpbmcoaW5kZXggKyBmaW5kLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIHN0ci50b1N0cmluZygpO1xufTtcbnZhciBwYXJzZURhdGEgPSBmdW5jdGlvbiBwYXJzZURhdGEoZXh0ZW5zaW9uLCBkYXRhLCBvcHRpb25zKSB7XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoL15cXHVGRUZGLywgJycpO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIHN3aXRjaCAoZXh0ZW5zaW9uKSB7XG4gICAgY2FzZSAnLmpzJzpcbiAgICBjYXNlICcudHMnOlxuICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChkYXRhLmluZGV4T2YoJ2V4cG9ydHMnKSA+IC0xKSB7XG4gICAgICAgICAgZGF0YSA9IFwiKFwiLmNvbmNhdChyZXBsYWNlTGFzdChkYXRhLnN1YnN0cmluZyhkYXRhLmluZGV4T2YoJz0nKSArIDEpLCAnfTsnLCAnJyksIFwiKVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmluZGV4T2YoJ2V4cG9ydCBkZWZhdWx0ICcpID4gLTEpIHtcbiAgICAgICAgICBkYXRhID0gXCIoXCIuY29uY2F0KHJlcGxhY2VMYXN0KGRhdGEuc3Vic3RyaW5nKGRhdGEuaW5kZXhPZignZXhwb3J0IGRlZmF1bHQgJykgKyAxNSksICd9OycsICcnKSwgXCIpXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBldmFsQWxpYXMoZGF0YSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcuanNvbjUnOlxuICAgICAgcmVzdWx0ID0gSlNPTjUucGFyc2UoZGF0YSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcuanNvbmMnOlxuICAgICAgcmVzdWx0ID0gcGFyc2VKU09OQyhkYXRhKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJy55bWwnOlxuICAgIGNhc2UgJy55YW1sJzpcbiAgICAgIHJlc3VsdCA9IFlBTUwubG9hZChkYXRhKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXN1bHQgPSBvcHRpb25zLnBhcnNlKGRhdGEpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlU3luYyhmaWxlbmFtZSwgb3B0aW9ucykge1xuICB2YXIgZXh0ID0gZXh0bmFtZShmaWxlbmFtZSk7XG4gIHZhciBkYXRhLCBzdGF0O1xuICBpZiAoaXNCdW4pIHtcbiAgICB2YXIgcmV0ID0gcmVhZEZpbGVJbkJ1blN5bmMoZmlsZW5hbWUpO1xuICAgIGRhdGEgPSByZXQuZGF0YTtcbiAgICBzdGF0ID0gcmV0LnN0YXQ7XG4gIH0gZWxzZSBpZiAoaXNEZW5vKSB7XG4gICAgdmFyIF9yZXQgPSByZWFkRmlsZUluRGVub1N5bmMoZmlsZW5hbWUpO1xuICAgIGRhdGEgPSBfcmV0LmRhdGE7XG4gICAgc3RhdCA9IF9yZXQuc3RhdDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX3JldDIgPSByZWFkRmlsZUluTm9kZVN5bmMoZmlsZW5hbWUpO1xuICAgIGRhdGEgPSBfcmV0Mi5kYXRhO1xuICAgIHN0YXQgPSBfcmV0Mi5zdGF0O1xuICB9XG4gIHJldHVybiB7XG4gICAgZGF0YTogcGFyc2VEYXRhKGV4dCwgZGF0YSwgb3B0aW9ucyksXG4gICAgc3RhdDogc3RhdFxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVuYW1lKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7XG4gICAgcGFyc2U6IEpTT04ucGFyc2VcbiAgfTtcbiAgdmFyIGV4dCA9IGV4dG5hbWUoZmlsZW5hbWUpO1xuICB2YXIgZm4gPSBpc0J1biA/IHJlYWRGaWxlSW5CdW4gOiBpc0Rlbm8gPyByZWFkRmlsZUluRGVubyA6IHJlYWRGaWxlSW5Ob2RlO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZuKGZpbGVuYW1lKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YSxcbiAgICAgICAgc3RhdCA9IF9yZWYuc3RhdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXQgPSBwYXJzZURhdGEoZXh0LCBkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgZGF0YTogcmV0LFxuICAgICAgICAgIHN0YXQ6IHN0YXRcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSAnZXJyb3IgcGFyc2luZyAnICsgZmlsZW5hbWUgKyAnOiAnICsgZXJyLm1lc3NhZ2U7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gIH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/readFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   pushPath: () => (/* binding */ pushPath),\n/* harmony export */   setPath: () => (/* binding */ setPath)\n/* harmony export */ });\nvar arr = [];\nvar each = arr.forEach;\nvar slice = arr.slice;\nfunction defaults(obj) {\n  each.call(slice.call(arguments, 1), function (source) {\n    if (source) {\n      for (var prop in source) {\n        if (obj[prop] === undefined) obj[prop] = source[prop];\n      }\n    }\n  });\n  return obj;\n}\nfunction debounce(func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n    var later = function later() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\nfunction getLastOfPath(object, path, Empty) {\n  function cleanKey(key) {\n    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;\n  }\n  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');\n  while (stack.length > 1) {\n    if (!object) return {};\n    var key = cleanKey(stack.shift());\n    if (!object[key] && Empty) object[key] = new Empty();\n    object = object[key];\n  }\n  if (!object) return {};\n  return {\n    obj: object,\n    k: cleanKey(stack.shift())\n  };\n}\nfunction setPath(object, path, newValue) {\n  var _getLastOfPath = getLastOfPath(object, path, Object),\n    obj = _getLastOfPath.obj,\n    k = _getLastOfPath.k;\n  if (Array.isArray(obj) && isNaN(k)) throw new Error(\"Cannot create property \\\"\".concat(k, \"\\\" here since object is an array\"));\n  obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n  var _getLastOfPath2 = getLastOfPath(object, path, Object),\n    obj = _getLastOfPath2.obj,\n    k = _getLastOfPath2.k;\n  obj[k] = obj[k] || [];\n  if (concat) obj[k] = obj[k].concat(newValue);\n  if (!concat) obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n  var _getLastOfPath3 = getLastOfPath(object, path),\n    obj = _getLastOfPath3.obj,\n    k = _getLastOfPath3.k;\n  if (!obj) return undefined;\n  return obj[k];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1mcy1iYWNrZW5kL2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGF6ZS8uL25vZGVfbW9kdWxlcy9pMThuZXh0LWZzLWJhY2tlbmQvZXNtL3V0aWxzLmpzP2JhOGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFyciA9IFtdO1xudmFyIGVhY2ggPSBhcnIuZm9yRWFjaDtcbnZhciBzbGljZSA9IGFyci5zbGljZTtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0cyhvYmopIHtcbiAgZWFjaC5jYWxsKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHVuZGVmaW5lZCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgaWYgKCFpbW1lZGlhdGUpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgIGlmIChjYWxsTm93KSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIEVtcHR5KSB7XG4gIGZ1bmN0aW9uIGNsZWFuS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgJiYga2V5LmluZGV4T2YoJyMjIycpID4gLTEgPyBrZXkucmVwbGFjZSgvIyMjL2csICcuJykgOiBrZXk7XG4gIH1cbiAgdmFyIHN0YWNrID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnID8gW10uY29uY2F0KHBhdGgpIDogcGF0aC5zcGxpdCgnLicpO1xuICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMSkge1xuICAgIGlmICghb2JqZWN0KSByZXR1cm4ge307XG4gICAgdmFyIGtleSA9IGNsZWFuS2V5KHN0YWNrLnNoaWZ0KCkpO1xuICAgIGlmICghb2JqZWN0W2tleV0gJiYgRW1wdHkpIG9iamVjdFtrZXldID0gbmV3IEVtcHR5KCk7XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKCFvYmplY3QpIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBvYmo6IG9iamVjdCxcbiAgICBrOiBjbGVhbktleShzdGFjay5zaGlmdCgpKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldFBhdGgob2JqZWN0LCBwYXRoLCBuZXdWYWx1ZSkge1xuICB2YXIgX2dldExhc3RPZlBhdGggPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCwgT2JqZWN0KSxcbiAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aC5vYmosXG4gICAgayA9IF9nZXRMYXN0T2ZQYXRoLms7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgaXNOYU4oaykpIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgcHJvcGVydHkgXFxcIlwiLmNvbmNhdChrLCBcIlxcXCIgaGVyZSBzaW5jZSBvYmplY3QgaXMgYW4gYXJyYXlcIikpO1xuICBvYmpba10gPSBuZXdWYWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXNoUGF0aChvYmplY3QsIHBhdGgsIG5ld1ZhbHVlLCBjb25jYXQpIHtcbiAgdmFyIF9nZXRMYXN0T2ZQYXRoMiA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpLFxuICAgIG9iaiA9IF9nZXRMYXN0T2ZQYXRoMi5vYmosXG4gICAgayA9IF9nZXRMYXN0T2ZQYXRoMi5rO1xuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIGlmIChjb25jYXQpIG9ialtrXSA9IG9ialtrXS5jb25jYXQobmV3VmFsdWUpO1xuICBpZiAoIWNvbmNhdCkgb2JqW2tdLnB1c2gobmV3VmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGgob2JqZWN0LCBwYXRoKSB7XG4gIHZhciBfZ2V0TGFzdE9mUGF0aDMgPSBnZXRMYXN0T2ZQYXRoKG9iamVjdCwgcGF0aCksXG4gICAgb2JqID0gX2dldExhc3RPZlBhdGgzLm9iaixcbiAgICBrID0gX2dldExhc3RPZlBhdGgzLms7XG4gIGlmICghb2JqKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gb2JqW2tdO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/i18next-fs-backend/esm/writeFile.js":
/*!**********************************************************!*\
  !*** ./node_modules/i18next-fs-backend/esm/writeFile.js ***!
  \**********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeFile: () => (/* binding */ removeFile),\n/* harmony export */   removeFileSync: () => (/* binding */ removeFileSync),\n/* harmony export */   writeFile: () => (/* binding */ writeFile),\n/* harmony export */   writeFileSync: () => (/* binding */ writeFileSync)\n/* harmony export */ });\n/* harmony import */ var _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats/json5.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/json5.js\");\n/* harmony import */ var _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats/yaml.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/formats/yaml.js\");\n/* harmony import */ var _extname_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extname.js */ \"(rsc)/./node_modules/i18next-fs-backend/esm/extname.js\");\n\n\n\nvar isDeno = typeof Deno !== 'undefined';\nvar isBun = typeof Bun !== 'undefined';\nvar YAML = typeof _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] !== 'undefined' && _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].load ? _formats_yaml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : undefined;\nvar fs = !isDeno ? (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs */ \"node:fs\", 19))).default : undefined;\nfunction dirname(path) {\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      matchedSlash = false;\n    }\n  }\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) return '//';\n  return path.slice(0, end);\n}\nvar writeFileInNodeSync = function writeFileInNodeSync(filename, payload) {\n  try {\n    fs.mkdirSync(dirname(filename), {\n      recursive: true\n    });\n  } catch (err) {}\n  return fs.writeFileSync(filename, payload, 'utf8');\n};\nvar writeFileInNode = function writeFileInNode(filename, payload) {\n  return new Promise(function (resolve, reject) {\n    fs.mkdir(dirname(filename), {\n      recursive: true\n    }, function () {\n      fs.writeFile(filename, payload, 'utf8', function (err, data) {\n        return err ? reject(err) : resolve(data);\n      });\n    });\n  });\n};\nvar removeFileInNodeSync = function removeFileInNodeSync(filename) {\n  return fs.unlinkSync(filename);\n};\nvar removeFileInNode = function removeFileInNode(filename) {\n  return new Promise(function (resolve, reject) {\n    return fs.unlink(filename, function (err) {\n      return err ? reject(err) : resolve();\n    });\n  });\n};\nvar writeFileInDenoSync = function writeFileInDenoSync(filename, payload) {\n  var encoder = new TextEncoder();\n  var data = encoder.encode(payload);\n  try {\n    Deno.mkdirSync(dirname(filename), {\n      recursive: true\n    });\n  } catch (err) {}\n  Deno.writeFileSync(filename, data);\n};\nvar writeFileInDeno = function writeFileInDeno(filename, payload) {\n  var encoder = new TextEncoder();\n  var data = encoder.encode(payload);\n  return new Promise(function (resolve, reject) {\n    Deno.mkdir(dirname(filename), {\n      recursive: true\n    }).then(function () {\n      Deno.writeFile(filename, data).then(resolve, reject);\n    }).catch(function () {\n      Deno.writeFile(filename, data).then(resolve, reject);\n    });\n  });\n};\nvar removeFileInDenoSync = function removeFileInDenoSync(filename) {\n  Deno.removeSync(filename);\n};\nvar removeFileInDeno = function removeFileInDeno(filename) {\n  return Deno.remove(filename);\n};\nvar writeFileInBunSync = writeFileInNodeSync;\nvar writeFileInBun = writeFileInNode;\nvar removeFileInBunSync = removeFileInNodeSync;\nvar removeFileInBun = removeFileInNode;\nvar stringifyData = function stringifyData(extension, data, options) {\n  var result = '';\n  switch (extension) {\n    case '.js':\n    case '.ts':\n      if (typeof module === 'undefined') {\n        result = \"export default \".concat(options.stringify(data, null, options.ident));\n      } else {\n        result = \"module.exports = \".concat(options.stringify(data, null, options.ident));\n      }\n      break;\n    case '.json5':\n      result = _formats_json5_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].stringify(data, null, options.ident);\n      break;\n    case '.yml':\n    case '.yaml':\n      result = YAML.dump(data, {\n        ident: options.indent\n      });\n      break;\n    default:\n      result = options.stringify(data, null, options.ident);\n  }\n  return result;\n};\nfunction writeFileSync(filename, payload, options) {\n  var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(filename);\n  var data;\n  try {\n    data = stringifyData(ext, payload, options);\n  } catch (err) {\n    err.message = 'error stringifying ' + filename + ': ' + err.message;\n    throw err;\n  }\n  if (isBun) {\n    return writeFileInBunSync(filename, data);\n  } else if (isDeno) {\n    return writeFileInDenoSync(filename, data);\n  } else {\n    return writeFileInNodeSync(filename, data);\n  }\n}\nfunction writeFile(filename, payload) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    stringify: JSON.stringify,\n    ident: 2\n  };\n  var ext = (0,_extname_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(filename);\n  var data;\n  try {\n    data = stringifyData(ext, payload, options);\n  } catch (err) {\n    err.message = 'error stringifying ' + filename + ': ' + err.message;\n    throw err;\n  }\n  var fn = isBun ? writeFileInBun : isDeno ? writeFileInDeno : writeFileInNode;\n  return fn(filename, data);\n}\nfunction removeFileSync(filename) {\n  if (isBun) {\n    return removeFileInBunSync(filename);\n  } else if (isDeno) {\n    return removeFileInDenoSync(filename);\n  } else {\n    return removeFileInNodeSync(filename);\n  }\n}\nfunction removeFile(filename) {\n  var fn = isBun ? removeFileInBun : isDeno ? removeFileInDeno : removeFileInNode;\n  return fn(filename);\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/i18next-fs-backend/esm/writeFile.js\n");

/***/ })

};
;